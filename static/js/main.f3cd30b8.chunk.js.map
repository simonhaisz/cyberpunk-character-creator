{"version":3,"sources":["model/create-options.ts","data/default-create-options.ts","model/dictionary.ts","model/gear.ts","model/character.ts","data/default-character.ts","persistance.ts","model/meta-type.ts","model/modifier.ts","model/attributes.ts","model/skills.ts","model/quality.ts","model/contact.ts","model/magic.ts","reducer.ts","model/karma.ts","context.ts","component/CharacterName.tsx","component/SelectCharacter.tsx","data/meta-types.ts","component/ChipCollection.tsx","model/item.ts","component/GradeButton.tsx","component/ItemPickerCard.tsx","component/ItemPickerSection.tsx","component/ItemPickerDialog.tsx","component/ItemPickerButton.tsx","component/GroupContainer.tsx","component/QualitiesSection.tsx","component/Property.tsx","component/Professionalism.tsx","component/CharacterTab.tsx","model/custom-item.ts","component/PickerDialog.tsx","component/PickerButton.tsx","component/Skill.tsx","component/SkillList.tsx","component/ActiveSkillList.tsx","component/KnowledgeSkillList.tsx","component/LanguageSkillList.tsx","component/SkillsTab.tsx","component/Karma.tsx","component/Attribute.tsx","component/AttributeList.tsx","component/AttributesTab.tsx","component/Contact.tsx","component/ContactList.tsx","component/ContactsTab.tsx","component/InitiateGrade.tsx","component/MagicTab.tsx","component/GearTab.tsx","component/ReadOnlyProperty.tsx","component/ModifiableProperty.tsx","component/StatsTab.tsx","request.ts","component/ConfirmationDialog.tsx","component/ImportButton.tsx","component/ExportButton.tsx","component/LevelSelect.tsx","component/CreateOptionsPanel.tsx","component/CharacterCreator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Level","ALL_LEVELS","Street","Normal","Elite","getBaseGearAvailability","level","Error","DEFAULT_OPTIONS","karmaLevel","connectionLevel","nuyenLevel","gearLevel","transformAllItems","parentPath","parentData","allItems","transformValues","Object","keys","childName","childPath","childData","Array","isArray","itemCostMap","Map","getItemCost","item","key","path","name","has","get","items","undefined","foundItem","find","g","JSON","stringify","cost","parseFloat","set","itemAvailabilityMap","getChildNames","values","childNames","Set","parents","split","findChildPaths","components","add","length","from","getChildSet","subset","childPaths","match","i","push","Grade","MetaType","gearRoot","transformGearValues","map","v","data","availability","costLabel","propName","propValue","essence","transformGearItem","test","splitGearItems","finalizeGearItem","itemVersions","groupResult","exec","namePrefix","nameSuffixes","r","trim","itemCount","itemVersion","splitValues","costResult","isNaN","parseInt","computeItemCost","allGear","baseCost","multiplier","grade","getGradeCostMultipler","getItemAvailability","parseAvailability","rating","legality","baseAvailability","Number","NaN","restrictedAvailability","legalAvailability","getAvailabilityCostMultiplier","createSavedItem","count","savedItem","Used","Alpha","Beta","Delta","getGradeEssenceMultiplier","toPrecision","result","console","error","getCharacterGearNuyenCost","character","nuyen","gear","getCharacterGearKarmaCost","factor","getNuyenFactor","Math","ceil","isAwakened","qualities","q","getProfessionalismCost","professionalism","upgradeCharacter","originalCharacter","upgradedCharacter","options","modifiers","originalGear","upgradedGear","upgradedPath","groups","upgradedName","upgradeGear","powers","initiateGrade","metaMagics","DEFAULT_CHARACTER","streetName","metaType","Human","attributes","activeSkills","knowledgeSkills","languageSkills","contacts","spells","getDefaultCharacter","createCharacterKey","loadCharacter","localStorage","getItem","parse","saveCharacter","setItem","SELECTED_CHARACTER_KEY","createCustomItemKey","getMetaTypeCost","Ork","Dwarf","Elf","Troll","getModifier","modifier","m","getNaturalAttributeRating","attribute","a","getBaseAttributeRating","getAttributeMetaTypeModifier","getEffectiveAttributeRating","getAttributeCost","getAttributesCost","awakened","getActiveSkillCost","getActiveSkillsCost","s","reduce","b","getKnowledgeSkillCost","getKnowledgeSkillsCost","getFreeKnowledgeSkillPoints","getSkillsCost","activeSkillCost","knowledgeSkillCost","languageSkillCost","freeKnowledgePoints","max","transformQualityValues","value","getCharacterQualitiesCost","allQualities","getContactRatingCost","getContactCost","contact","connection","loyalty","getFreeContactPoints","getAllContactsCost","c","transformSpellValues","powersRoot","transformPowerValues","levels","ActionType","powerHasLevelsMap","getInitiateGradeCost","getCharacterMagicCost","getCharacterSpellsCost","getDefaultKarma","total","spent","available","getCharacterKarma","state","getStartingKarma","allContactsCost","freeContactPoints","getContactsCost","reducer","action","type","UpdateCharacter","selectedCharacter","characters","handleCharacterUpdate","karma","ImportCharacter","ClearCharacter","removeItem","filter","SelectCharacter","characterRef","LoadQualities","LoadSkills","allSkills","LoadContacts","allContacts","LoadGear","LoadSpells","allSpells","LoadPowers","allPowers","LoadCustomItems","customItems","AddCustomItem","newItem","Name","saveCustomItem","UpdateCreateOptions","newOptions","INITIAL_STATE","positive","negative","active","knowledge","language","combat","detection","health","illusion","manipulation","adeptPowers","index","hasDefaultKey","findIndex","Date","now","DispatchContext","createContext","useDispatch","useContext","StateContext","useGlobalState","property","CharacterName","props","Typography","dispatch","List","subheader","ListSubheader","ListItem","onClick","onCharacterClick","ALL_META_TYPES","useStyles","makeStyles","root","display","flexDirection","flexWrap","justifyContent","chip","marginRight","marginBottom","ChipCollection","createChipLabel","onDeleteValue","classes","className","Badge","badgeContent","invisible","color","anchorOrigin","vertical","horizontal","Chip","label","onDelete","getItemSubset","subItems","startsWith","minWidth","maxWidth","width","GradeButton","disabled","onUpdateGrade","Button","variant","nextGrade","padding","margin","textAlign","buttons","ItemPickerCard","allowMultiple","createCostLabel","onUpdateItem","hasAny","foundPower","p","hasLevels","doesAdeptPowerHaveLevels","includeAvailability","isItemAvailable","includeGrade","Paper","elevation","style","lineHeight","ButtonGroup","toString","newGrade","ItemPickerSection","onUpdateItems","handleUpdate","newItems","Divider","ItemPickerDialog","open","onClose","title","onUpdateAllItems","allPaths","paths","pathToLabel","finalComponent","sentenceCase","useState","group","setGroup","Dialog","DialogTitle","DialogContent","Select","id","displayEmpty","onChange","event","target","MenuItem","newAllItems","ItemPickerButton","setOpen","parentPathsToName","componentIndex","parentPathToName","differenceFound","pathIndex","slice","join","getNextParentPaths","parentPaths","setParentPath","menuAnchor","setMenuAnchor","allChildItems","allCountedItems","hasItems","localItems","matchingItems","localItem","matchingItem","matchingParents","matchingLevels","currentLevel","currentLevelMatches","getMatchingParents","matchingParentPath","maxPathDepth","maxDepth","getMaxPathDepth","useMenu","IconButton","currentTarget","size","disableRipple","anchorEl","Boolean","handleMenuClick","newCountedItems","includeItem","splice","headerLabel","fontWeight","GroupContainer","createItemLabel","createItemCostLabel","flatItems","defaultExpanded","expandIcon","FormControlLabel","stopPropagation","onFocus","control","toDelete","QualitiesSection","createQualityCostLabel","newQualities","height","slider","Property","onUpdate","min","step","formatDisplayValue","computeCost","gutterBottom","Slider","marks","valueLabelDisplay","e","valueLabelFormat","_index","paddingTop","paddingLeft","Professionalism","newProfessionalism","header","marginLeft","alignItems","field","marginTop","divider","CharacterTab","onCharacterUpdated","updatedCharacter","TextField","id-","t","getChildItems","content","ul","PickerDialog","onItemSelectionChange","includeCost","allowNewItems","allowMultiSelection","newItemName","setNewItemName","newItemAvailability","setNewItemAvailability","newItemCost","setNewItemCost","onUpdateNewItem","aria-label","selected","Availability","Cost","ListItemText","findName","editButton","PickerButton","breadcrums","selectedValueNames","addValue","removeValue","allowNewValues","createValue","findAvailability","findCost","n","createSelectableItem","Skill","skill","SkillList","skills","computeSkillCost","onSkillsUpdated","sort","localeCompare","onSkillUpdate","newSkills","skillIndex","ActiveSkillList","activeSkillsCost","allActiveSkills","KnowledgeSkillList","knowledgeSkillsCost","freeKnowledgeSkillPoints","totalCost","allKnowledgeSkills","LanguageSkillList","languageSkillsCost","allLanguageSkills","SkillsTab","paddingRight","badge","Karma","showZero","Attribute","AttributeList","filteredAttributes","attributesCost","newAttributes","attributeIndex","AttributesTab","details","Contact","contactCost","maxConnection","getMaxConnection","updatedConnection","updatedContact","updatedLoyalty","ContactList","selectedContacts","contactsCost","onContactUpdate","newContacts","contactIndex","ContactsTab","InitiateGrade","newInitiateGrade","section","MagicTab","allAdeptPowers","allMetaMagics","isMagician","isAdept","createPowerCostLabel","computeAdeptPowerCost","_item","newSpells","newPowers","newMetaMagics","GearTab","createGearCostLabel","createGearLabel","newSubGear","newGear","handleUpdateGear","theme","palette","getContrastText","primary","main","backgroundColor","ReadOnlyProperty","Avatar","button","ModifiableProperty","updateModifier","orientation","StatsTab","body","agility","reaction","strength","charisma","intuition","logic","willpower","magic","athletics","initiative","physicalBoxes","stunBoxes","sneaking","walking","running","ModifierProperty","newValue","newModifiers","modifierIndex","createPublicUrl","relativeUrl","process","ConfirmationDialog","onChoice","handleNo","DialogContentText","DialogActions","autoFocus","ImportButton","saveData","accept","hidden","files","file","reader","FileReader","onload","readAsText","log","htmlFor","Tooltip","component","ExportButton","filename","generateData","element","document","createElement","setAttribute","encodeURIComponent","appendChild","click","removeChild","LevelSelect","updateValue","selectId","labelId","FormControl","InputLabel","child","l","CreateOptionsPanel","handleOnOptionsChange","bar","flexGrow","CharacterCreator","drawerOpen","setDrawerOpen","selectedTab","setSelectedTab","useEffect","fetch","then","response","json","allData","transformAllQualities","catch","message","stack","all","spellData","transformAllSpells","powersData","transformAllPowers","gearData","transformAllGear","gearNuyenCostLabel","showDeleteConfirmation","setShowDeleteConfirmation","characterCost","skillsCost","magicCost","gearNuyenCost","getGearKarmaCost","round","selectedTabPanel","exportFileName","AppBar","position","Toolbar","edge","rawData","Tabs","_event","Tab","Drawer","createMuiTheme","App","useReducer","characterJSON","loadCharacters","selectedCharacterKey","loadSelectedCharacter","selectedCharacterRef","loadedCharacter","Provider","ThemeProvider","CssBaseline","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f3cd30b8.chunk.js","sourcesContent":["export enum Level {\r\n    Street = \"Street\",\r\n    Normal = \"Normal\",\r\n    Elite = \"Elite\"\r\n}\r\n\r\nexport const ALL_LEVELS: Level[] = [\r\n    Level.Street,\r\n    Level.Normal,\r\n    Level.Elite\r\n];\r\n\r\nexport type CreateOptions = {\r\n    karmaLevel: Level;\r\n    connectionLevel: Level;\r\n    nuyenLevel: Level;\r\n    gearLevel: Level;\r\n}\r\n\r\nexport function getStartingKarma(level: Level): number {\r\n    switch (level) {\r\n        case Level.Street:\r\n            return 400;\r\n        case Level.Normal:\r\n            return 500;\r\n        case Level.Elite:\r\n            return 700;\r\n        default:\r\n            throw new Error(`Unknown level '${level}'`);\r\n    }\r\n}\r\n\r\nexport function getNuyenFactor(level: Level): number {\r\n    switch (level) {\r\n        case Level.Street:\r\n            return 10000;\r\n        case Level.Normal:\r\n            return 20000;\r\n        case Level.Elite:\r\n            return 50000;\r\n        default:\r\n            throw new Error(`Unknown level '${level}'`);\r\n    }\r\n}\r\n\r\nexport function getBaseGearAvailability(level: Level): number {\r\n    switch (level) {\r\n        case Level.Street:\r\n            return 6;\r\n        case Level.Normal:\r\n            return 12;\r\n        case Level.Elite:\r\n            return 18;\r\n        default:\r\n            throw new Error(`Unknown level '${level}'`);\r\n    }\r\n}\r\n\r\nexport function getMaxConnection(level: Level): number {\r\n    switch (level) {\r\n        case Level.Street:\r\n            return 3;\r\n        case Level.Normal:\r\n            return 5;\r\n        case Level.Elite:\r\n            return 7;\r\n        default:\r\n            throw new Error(`Unknown level '${level}'`);\r\n    }\r\n}","import { CreateOptions, Level } from \"../model/create-options\";\r\n\r\nexport const DEFAULT_OPTIONS: CreateOptions = {\r\n    karmaLevel: Level.Normal,\r\n    connectionLevel: Level.Normal,\r\n    nuyenLevel: Level.Normal,\r\n    gearLevel: Level.Normal\r\n};","import { sentenceCase } from \"change-case\";\r\nimport { Item } from \"./item\";\r\n\r\nexport type Dictionary<T> = { [key: string]: T };\r\n\r\nexport function transformAllItems<T>(parentPath: string, parentData: any, allItems: Dictionary<T[]>, transformValues: (childpath: string, childValues: any[]) => T[]) {\r\n\tfor (const childName of Object.keys(parentData)) {\r\n\t\tconst childPath = `${parentPath}.${childName}`;\r\n\t\tconst childData = parentData[childName];\r\n\t\tif (Array.isArray(childData)) {\r\n\t\t\tallItems[childPath] = transformValues(childPath, childData as any[]);\r\n\t\t} else {\r\n\t\t\ttransformAllItems(childPath, childData, allItems, transformValues);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nconst itemCostMap = new Map<string,number>();\r\nexport function getItemCost<T extends Item>(item: Item, allItems: Dictionary<T[]>): number {\r\n\tconst key = `${item.path}.${item.name}`;\r\n\tif (itemCostMap.has(key)) {\r\n\t\treturn itemCostMap.get(key)!;\r\n\t}\r\n\tconst items = allItems[item.path];\r\n\tif (items === undefined) {\r\n\t\tthrow new Error(`Could not find any items under path '${item.path}'`);\r\n\t}\r\n\tconst foundItem = items.find(g => g.name === item.name);\r\n\tif (!foundItem) {\r\n\t\tthrow new Error(`Could not find item with name '${item.name}' in list '${JSON.stringify(items)}' under path '${item.path}'`);\r\n\t}\r\n\r\n\tconst cost = parseFloat(foundItem.cost!);\r\n\titemCostMap.set(key, cost);\r\n\treturn cost;\r\n}\r\n\r\nconst itemAvailabilityMap = new Map<string,string | undefined>();\r\nexport function getItemAvailability<T extends Item>(item: Item, allItems: Dictionary<T[]>): string | undefined {\r\n\tconst key = `${item.path}.${item.name}`;\r\n\tif (itemAvailabilityMap.has(key)) {\r\n\t\treturn itemAvailabilityMap.get(key)!;\r\n\t}\r\n\tconst items = allItems[item.path];\r\n\tconst foundItem = items.find(g => g.name === item.name);\r\n\tif (!foundItem) {\r\n\t\tthrow new Error(`Could not find item with name '${item.name}' in list '${JSON.stringify(items)}' under path '${item.path}'`);\r\n\t}\r\n\r\n\tconst availability = foundItem.availability;\r\n\titemAvailabilityMap.set(key, foundItem.availability);\r\n\treturn availability;\r\n}\r\n\r\nexport function getNextParentPaths<T>(values: Dictionary<T>): Map<string,string> {\r\n\tconst parentPathToName = new Map<string,string>();\r\n\tconst paths = Object.keys(values).map(p => p.split(\".\"));\r\n\tlet componentIndex: number;\r\n\tif (paths.length > 1) {\r\n\t\tlet differenceFound = false;\r\n\t\tcomponentIndex = 0;\r\n\t\twhile (!differenceFound) {\r\n\t\t\tif (componentIndex >= paths[0].length) {\r\n\t\t\t\tthrow new Error(`Searched through all path components and found no differences`);\r\n\t\t\t}\r\n\t\t\tfor (let pathIndex = 1; pathIndex < paths.length; pathIndex++) {\r\n\t\t\t\tif (paths[0][componentIndex] !== paths[pathIndex][componentIndex]) {\r\n\t\t\t\t\tdifferenceFound = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcomponentIndex++;\r\n\t\t}\r\n\t} else if (paths.length === 1) {\r\n\t\t// there is only a single path so pick the last component\r\n\t\tcomponentIndex = paths[0].length - 1;\r\n\t} else {\r\n\t\tthrow new Error(`There are no paths`);\r\n\t}\r\n\tfor (const path of paths) {\r\n\t\tconst parentPath = path.slice(0, componentIndex).join(\".\");\r\n\t\tconst name = path[componentIndex - 1];\r\n\t\tparentPathToName.set(parentPath, sentenceCase(name));\r\n\t}\r\n\treturn parentPathToName;\r\n}\r\n\r\nexport function getMatchingParents<T>(values: Dictionary<T>): string[] {\r\n\tconst paths = Object.keys(values).map(p => p.split(\".\"));\r\n\tlet matchingLevels = 0;\r\n\tfor (let i = 0; ; i++) {\r\n\t\tlet currentLevel: string | undefined;\r\n\t\tlet currentLevelMatches = true;\r\n\t\tfor (const path of paths) {\r\n\t\t\tif (i >= path.length) {\r\n\t\t\t\tcurrentLevelMatches = false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif (currentLevel === undefined) {\r\n\t\t\t\tcurrentLevel = path[i];\r\n\t\t\t} else if (currentLevel !== path[i]) {\r\n\t\t\t\tcurrentLevelMatches = false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (currentLevelMatches) {\r\n\t\t\tmatchingLevels++;\r\n\t\t} else {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\tif (matchingLevels === 0) {\r\n\t\treturn [];\r\n\t}\r\n\t// since they all match we can just grab the first path\r\n\treturn paths[0].slice(0, matchingLevels);\r\n}\r\n\r\nexport function getMaxPathDepth<T>(values: Dictionary<T>): number {\r\n\tlet maxDepth = 0;\r\n\tconst paths = Object.keys(values).map(p => p.split(\".\"));\r\n\tfor (const path of paths) {\r\n\t\tmaxDepth = Math.max(maxDepth, path.length);\r\n\t}\r\n\treturn maxDepth;\r\n}\r\n\r\nexport function getChildNames<T>(values: Dictionary<T>, parentPath: string): string[] {\r\n\tconst childNames = new Set<string>();\r\n\tconst parents = parentPath.split(\".\");\r\n\tfor (const path of findChildPaths(values, parentPath)) {\r\n\t\tconst components = path.split(\".\");\r\n\t\tchildNames.add(components[parents.length]);\r\n\t}\r\n\treturn Array.from(childNames);\r\n}\r\n\r\nexport function getChildValues<T>(values: Dictionary<T[]>, parentPath: string): T[] {\r\n\tconst childValues: T[] = [];\r\n\tfor (const path of findChildPaths(values, parentPath)) {\r\n\t\tchildValues.push(...values[path]);\r\n\t}\r\n\treturn childValues;\r\n}\r\n\r\nexport function getChildSet<T>(values: Dictionary<T[]>, parentPath: string): Dictionary<T[]> {\r\n\tconst subset: Dictionary<T[]> = {};\r\n\tfor (const path of findChildPaths(values, parentPath)) {\r\n\t\tsubset[path] = values[path];\r\n\t}\r\n\treturn subset;\r\n}\r\n\r\nfunction findChildPaths<T>(values: Dictionary<T>, parentPath: string): string[] {\r\n\tconst childPaths: string[] = [];\r\n\tconst parents = parentPath.split(\".\");\r\n\tfor (const path of Object.keys(values)) {\r\n\t\tconst components = path.split(\".\");\r\n\t\tif (components.length < parents.length) {\r\n\t\t\tthrow new Error(`Child paths '${path}' must be longer than parent paths '${parentPath}'`);\r\n\t\t}\r\n\t\tlet match = true;\r\n\t\tfor (let i = 0; i < parents.length; i++) {\r\n\t\t\tif (parents[i] !== components[i]) {\r\n\t\t\t\tmatch = false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (match) {\r\n\t\t\tchildPaths.push(path);\r\n\t\t}\r\n\t}\r\n\treturn childPaths;\r\n}","import { Dictionary, transformAllItems, getItemCost, getItemAvailability } from \"./dictionary\";\r\nimport { Item } from \"./item\";\r\nimport { Character } from \"./character\";\r\nimport { getBaseGearAvailability, getNuyenFactor, Level } from \"./create-options\";\r\n\r\nexport type Gear = {\r\n\tavailability: string;\r\n\tcost: string;\r\n\tcostLabel: string;\r\n} & Item;\r\n\r\nexport const gearRoot = \"gear\";\r\n\r\nexport function transformAllGear(allData: any): Dictionary<Gear[]> {\r\n\tconst allGear: Dictionary<Gear[]> = {};\r\n\ttransformAllItems(gearRoot, allData, allGear, transformGearValues);\r\n\treturn allGear;\r\n}\r\n\r\nfunction transformGearValues(path: string, values: any[]): Gear[] {\r\n\tconst items: Gear[] = [];\r\n\tfor (const item of values.map(v => transformGearItem(path, v))) {\r\n\t\t// gear with multiple versions need to be split into separate items\r\n\t\tif (/^([\\w-\\s]+)\\s+\\(([\\w-\\s]+(,\\s*)?)+\\)$/i.test(item.name)) {\r\n\t\t\titems.push(...splitGearItems(path, item));\r\n\t\t} else {\r\n\t\t\titems.push(item);\r\n\t\t}\r\n\t}\r\n\tfor (const item of items) {\r\n\t\tfinalizeGearItem(item);\r\n\t}\r\n\treturn items;\r\n}\r\n\r\nfunction transformGearItem(path: string, data: any): Gear {\r\n\tconst item: Gear = {\r\n\t\tpath,\r\n\t\tname: \"[NAME]\",\r\n\t\tavailability: \"[AVAILABILITY]\",\r\n\t\tcost: \"[COST]\",\r\n\t\tcostLabel: \"[COST]\"\r\n\t};\r\n\tfor (const propName of Object.keys(data)) {\r\n\t\tconst propValue = data[propName];\r\n\t\tif (propName === \"Name\") {\r\n\t\t\titem.name = propValue as string;\r\n\t\t} else if (propName === \"Availability\") {\r\n\t\t\titem.availability = propValue as string;\r\n\t\t} else if (propName === \"Cost\") {\r\n\t\t\titem.costLabel = propValue as string;\r\n\t\t} else if (propName === \"Essence\") {\r\n\t\t\titem.essence = propValue as string;\r\n\t\t} else {\r\n\t\t\t// assume a string (not that it actually matters)\r\n\t\t\titem[propName] = propValue as string;\r\n\t\t}\r\n\t}\r\n\treturn item;\r\n}\r\n\r\nfunction splitGearItems(path: string, item: Gear): Gear[] {\r\n\tconst itemVersions: Gear[] = [];\r\n\t/*\r\n\t\"Some Thingy (1, 2, 3)\" => [\r\n\t\t\"Some Thingy (A, B, C)\"\r\n\t\t\"Some Thingy\",\r\n\t\t\"A, B, C\"\r\n\t]\r\n\t*/\r\n\tconst groupResult = /^([\\w-\\s]+)\\s+\\(((?:(?:[\\w-\\s]+)(?:,\\s*)?)+)\\)$/i.exec(item.name);\r\n\tif (groupResult === null) {\r\n\t\tthrow new Error(`Gear item's name '${item.name}' does not contain multiple ratings`);\r\n\t}\r\n\tconst namePrefix = groupResult[1];\r\n\tconst nameSuffixes = groupResult[2].split(\",\").map(r => r.trim());\r\n\tconst itemCount = nameSuffixes.length;\r\n\tfor (let i = 0; i < itemCount; i++) {\r\n\t\tconst itemVersion: Gear = {\r\n\t\t\tpath,\r\n\t\t\tname: `${namePrefix} - ${nameSuffixes[i]}`,\r\n\t\t\tavailability: \"[AVAILABILITY]\",\r\n\t\t\tcost: \"[COST]\",\r\n\t\t\tcostLabel: \"[COST]\"\r\n\t\t};\r\n\t\tfor (const propName of Object.keys(item)) {\r\n\t\t\t// use lower-case names as this is the Gear object, not the raw object from the JSON file\r\n\t\t\tif (propName === \"name\") {\r\n\t\t\t\t// skip name - it is already set\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif (propName === \"cost\") {\r\n\t\t\t\t// skip cost - it is determined in the finalize step, after splitting\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// all other properties are strings\r\n\t\t\tconst propValue = item[propName] as string;\r\n\t\t\tconst splitValues = propValue.split(\",\").map(v => v.trim());\r\n\t\t\tif (splitValues.length === 1) {\r\n\t\t\t\t// same value for all versions\r\n\t\t\t\titemVersion[propName] = propValue;\r\n\t\t\t} else if (splitValues.length === itemCount) {\r\n\t\t\t\titemVersion[propName] = splitValues[i];\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error(`Properties should have a single value or the same amount as there are version names ${itemCount} - found ${splitValues.length}`);\r\n\t\t\t}\r\n\t\t}\r\n\t\titemVersions.push(itemVersion);\r\n\t}\r\n\treturn itemVersions;\r\n}\r\n\r\nfunction finalizeGearItem(item: Gear) {\r\n\t/*\r\n\t1000\r\n\t+500\r\n\tx2\r\n\t50 (per dose)\r\n\t*/\r\n\tconst costResult = /^(?:x|\\+)?(\\d+)\\s*(?:\\(([\\w\\s]+)\\))?$/i.exec(item.costLabel);\r\n\tif (costResult) {\r\n\t\titem.cost = costResult[1];\r\n\t\tif (isNaN(parseInt(item.cost))) {\r\n\t\t\tthrow new Error(`Gear item '${item.name}' has unsupported cost label '${item.costLabel}'`);\r\n\t\t}\r\n\t} else {\r\n\t\titem.cost = \"0\";\r\n\t}\r\n}\r\n\r\nexport function computeItemCost(item: Item, allGear: Dictionary<Item[]>, gearLevel: Level): number {\r\n\tconst baseCost = getItemCost(item, allGear);\r\n\tlet multiplier = 1;\r\n\tif (item.grade !== undefined) {\r\n\t\tmultiplier *= getGradeCostMultipler(item.grade as Grade) \r\n\t\tmultiplier= getGradeCostMultipler(item.grade as Grade);\r\n\t}\r\n\tconst availability = getItemAvailability(item, allGear);\r\n\tif (availability !== undefined) {\r\n\t\tmultiplier *= getAvailabilityCostMultiplier(availability, gearLevel);\r\n\t}\r\n\treturn baseCost * multiplier;\r\n}\r\n\r\nexport function createSavedItem(path: string, item: Item): Item {\r\n\tconst { name, count, grade, essence } = item;\r\n\tconst savedItem = { path, name, count, grade, essence };\r\n\t// do not want to save optional properties\r\n\t// grade (used, alpha, beta, delta) only applies to augmentations\r\n\tif (grade === undefined) {\r\n\t\tdelete savedItem.grade;\r\n\t}\r\n\tif (essence === undefined) {\r\n\t\tdelete savedItem.essence;\r\n\t}\r\n\tif (grade !== undefined && essence !== undefined) {\r\n\t\tsavedItem.essence = (parseFloat(essence) * getGradeEssenceMultiplier(grade as Grade)).toPrecision(2);\r\n\t}\r\n\treturn savedItem;\r\n}\r\n\r\nexport enum Grade {\r\n\tUsed = \"Used\",\r\n\tAlpha = \"Alpha\",\r\n\tBeta = \"Beta\",\r\n\tDelta = \"Delta\"\r\n}\r\n\r\nexport function getGradeCostMultipler(grade: Grade = Grade.Alpha): number {\r\n\tswitch (grade) {\r\n\t\tcase Grade.Used:\r\n\t\t\treturn 0.5;\r\n\t\tcase Grade.Alpha:\r\n\t\t\treturn 1;\r\n\t\tcase Grade.Beta:\r\n\t\t\treturn 5;\r\n\t\tcase Grade.Delta:\r\n\t\t\treturn 15;\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown augmentation grade '${grade}'`);\r\n\t}\r\n}\r\n\r\nexport function getGradeEssenceMultiplier(grade: Grade): number {\r\n\tswitch (grade) {\r\n\t\tcase Grade.Used:\r\n\t\t\treturn 1.2;\r\n\t\tcase Grade.Alpha:\r\n\t\t\treturn 1;\r\n\t\tcase Grade.Beta:\r\n\t\t\treturn 0.7;\r\n\t\tcase Grade.Delta:\r\n\t\t\treturn 0.5;\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown augmentation grade '${grade}'`);\r\n\t}\r\n}\r\n\r\nexport function isItemAvailable(availability: string, gearLevel: Level): boolean {\r\n\tconst { rating, legality } = parseAvailability(availability);\r\n\tconst baseAvailability = getBaseGearAvailability(gearLevel);\r\n\tswitch (legality) {\r\n\t\tcase \"L\":\r\n\t\t\treturn rating <= (baseAvailability + 12 + 6);\r\n\t\tcase \"R\":\r\n\t\t\treturn rating <= (baseAvailability + 6 + 6);\r\n\t\tcase \"F\":\r\n\t\t\treturn rating <= (baseAvailability + 6);\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown availability legality '${legality}'`);\r\n\t}\r\n}\r\n\r\nexport function getAvailabilityCostMultiplier(availability: string, gearLevel: Level): number {\r\n\tconst { rating, legality } = parseAvailability(availability);\r\n\r\n\tconst baseAvailability = getBaseGearAvailability(gearLevel);\r\n\r\n\tif (legality === \"F\") {\r\n\t\t// forbidden\r\n\t\tconst forbiddenAvailability = baseAvailability;\r\n\t\tif (rating <= forbiddenAvailability) {\r\n\t\t\treturn 1;\r\n\t\t} else if (rating <= forbiddenAvailability + 2) {\r\n\t\t\treturn 2;\r\n\t\t} else if (rating <= forbiddenAvailability + 4) {\r\n\t\t\treturn 5;\r\n\t\t} else if (rating <= forbiddenAvailability + 6) {\r\n\t\t\treturn 10;\r\n\t\t} else {\r\n\t\t\treturn Number.NaN;\r\n\t\t}\r\n\t} else if (legality === \"R\") {\r\n\t\t// restricted\r\n\t\tconst restrictedAvailability = baseAvailability + 6;\r\n\t\tif (rating <= restrictedAvailability) {\r\n\t\t\treturn 1;\r\n\t\t} else if (rating <= restrictedAvailability + 2) {\r\n\t\t\treturn 2;\r\n\t\t} else if (rating <= restrictedAvailability + 4) {\r\n\t\t\treturn 5;\r\n\t\t} else if (rating <= restrictedAvailability + 6) {\r\n\t\t\treturn 10;\r\n\t\t} else {\r\n\t\t\treturn Number.NaN;\r\n\t\t}\r\n\t} else {\r\n\t\t// legal\r\n\t\tconst legalAvailability = baseAvailability + 12;\r\n\t\tif (rating <= legalAvailability) {\r\n\t\t\treturn 1;\r\n\t\t} else if (rating <= legalAvailability + 2) {\r\n\t\t\treturn 2;\r\n\t\t} else if (rating <= legalAvailability + 4) {\r\n\t\t\treturn 5;\r\n\t\t} else if (rating <= legalAvailability + 6) {\r\n\t\t\treturn 10;\r\n\t\t} else {\r\n\t\t\treturn Number.NaN;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction parseAvailability(availability: string): { rating: number, legality: string } {\r\n\tif (availability === \"-\") {\r\n\t\treturn { rating: 1, legality: \"L\" };\r\n\t}\r\n\tconst result = /^\\+?(\\d+)(R|F)?$/i.exec(availability);\r\n\tif (!result) {\r\n\t\tconsole.error(`Unknown availability format '${availability}' - falling back to standard cost`);\r\n\t\treturn { rating: 1, legality: \"L\" };\r\n\t}\r\n\tconst rating = parseInt(result[1]);\r\n\tconst legality = result[2] || \"L\";\r\n\treturn { rating, legality };\r\n}\r\n\r\nexport function getGradeEssenseMultiplier(grade: Grade = Grade.Alpha): number {\r\n\tswitch (grade) {\r\n\t\tcase Grade.Used:\r\n\t\t\treturn 1.2;\r\n\t\tcase Grade.Alpha:\r\n\t\t\treturn 1;\r\n\t\tcase Grade.Beta:\r\n\t\t\treturn 0.7;\r\n\t\tcase Grade.Delta:\r\n\t\t\treturn 0.5;\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown augmentation grade '${grade}'`);\r\n\t}\r\n}\r\n\r\nexport function getCharacterGearNuyenCost(character: Character, allGear: Dictionary<Gear[]>, gearLevel: Level): number {\r\n\tlet nuyen = 0;\r\n\tfor (const item of character.gear) {\r\n\t\tnuyen += computeItemCost(item, allGear, gearLevel) * parseInt(item.count!);\r\n\t}\r\n\treturn nuyen;\r\n}\r\n\r\nexport function getCharacterGearKarmaCost(nuyen: number, nuyenLevel: Level): number {\r\n\t// Nuyen is bought at a rate of 5 Karma for ¥10000 / 20000 / 50000 depending upon nuyen level\r\n\t// All unspent nuyen is lost so round up\r\n\tconst factor = getNuyenFactor(nuyenLevel);\r\n\treturn Math.ceil(nuyen / factor) * 5;\r\n}\r\n\r\nexport function upgradeGear(originalGear: Item[]): Item[] {\r\n\tconst upgradedGear: Item[] = [];\r\n\r\n\tfor (const item of originalGear) {\r\n\t\tif (/^gear\\.weapons\\.grenades-and\\./i.test(item.path)) {\r\n\t\t\tconst match = /(?<toreplace>^gear\\.weapons\\.grenades-and\\.)(?<tokeep>.*)/i.exec(item.path);\r\n\t\t\tif (match === null) {\r\n\t\t\t\tthrow new Error(`'${item.path}' matched test regex but not exec regex`);\r\n\t\t\t}\r\n\t\t\tconst upgradedPath = `gear.weapons.grenades-and-rockets.${match.groups![\"tokeep\"]}`;\r\n\t\t\tupgradedGear.push({\r\n\t\t\t\t...item,\r\n\t\t\t\tpath: upgradedPath\r\n\t\t\t});\r\n\t\t} else if (/^Bow –/i.test(item.name)) {\r\n\t\t\tconst match = /(?<toreplace>^Bow –)(?<tokeep>.*)/i.exec(item.name);\r\n\t\t\tif (match === null) {\r\n\t\t\t\tthrow new Error(`'${item.name}' matched test regex but not exec regex`);\r\n\t\t\t}\r\n\t\t\tconst upgradedName = `Bow -${match.groups![\"tokeep\"]}`;\r\n\t\t\tupgradedGear.push({\r\n\t\t\t\t...item,\r\n\t\t\t\tname: upgradedName\r\n\t\t\t});\r\n\t\t} else if (/^Jammer –/i.test(item.name)) {\r\n\t\t\tconst match = /(?<toreplace>^Jammer –)(?<tokeep>.*)/i.exec(item.name);\r\n\t\t\tif (match === null) {\r\n\t\t\t\tthrow new Error(`'${item.name}' matched test regex but not exec regex`);\r\n\t\t\t}\r\n\t\t\tconst upgradedName = `Jammer -${match.groups![\"tokeep\"]}`;\r\n\t\t\tupgradedGear.push({\r\n\t\t\t\t...item,\r\n\t\t\t\tname: upgradedName\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tupgradedGear.push(item);\r\n\t\t}\r\n\t}\r\n\r\n\treturn upgradedGear;\r\n}","import { DEFAULT_OPTIONS } from \"../data/default-create-options\";\r\nimport { Contact } from \"./contact\";\r\nimport { CreateOptions } from \"./create-options\";\r\nimport { upgradeGear } from \"./gear\";\r\nimport { Item } from \"./item\";\r\n\r\nexport enum MetaType {\r\n    Dwarf = \"Dwarf\",\r\n    Elf = \"Elf\",\r\n    Human = \"Human\",\r\n    Ork = \"Ork\",\r\n    Troll = \"Troll\",\r\n}\r\n\r\nexport type NamedProperty = {\r\n    name: string;\r\n    rating: number;\r\n};\r\n\r\nexport type Attribute = NamedProperty;\r\n\r\nexport type Skill = NamedProperty;\r\n\r\nexport type CharacterRef = {\r\n    key: number;\r\n    name: string;\r\n    streetName: string;\r\n};\r\n\r\nexport type Character = CharacterRef & {\r\n    metaType: MetaType;\r\n    attributes: Attribute[];\r\n    qualities: Item[];\r\n    activeSkills: Skill[];\r\n    knowledgeSkills: Skill[];\r\n    languageSkills: Skill[];\r\n    contacts: Contact[];\r\n    spells: Item[];\r\n    powers: Item[];\r\n    gear: Item[];\r\n    options: CreateOptions;\r\n    professionalism: number;\r\n    initiateGrade: number;\r\n    metaMagics: Item[];\r\n    modifiers: NamedProperty[];\r\n};\r\n\r\nexport function isAwakened(character: Character): boolean {\r\n    return character.qualities.find(q => q.name === \"Adept\" || q.name === \"Magician\") !== undefined;\r\n}\r\n\r\nexport function getProfessionalismCost(professionalism: number): number {\r\n    if (professionalism < 0 || professionalism > 6) {\r\n        throw new Error(`Professionalism must be witin the range [1..6] - found ${professionalism}`);\r\n    }\r\n    const sum = professionalism * (professionalism + 1) / 2;\r\n    return sum * 20;\r\n}\r\n\r\nexport function upgradeCharacter(originalCharacter: any): Character {\r\n    const upgradedCharacter = { ...originalCharacter };\r\n    if (upgradedCharacter.options === undefined) {\r\n        upgradedCharacter.options = { ...DEFAULT_OPTIONS };\r\n    }\r\n    if (upgradedCharacter.professionalism === undefined) {\r\n        upgradedCharacter.professionalism = 0;\r\n    }\r\n    if (upgradedCharacter.modifiers === undefined) {\r\n        upgradedCharacter.modifiers = [];\r\n    }\r\n    if (upgradedCharacter.gear === undefined) {\r\n        upgradedCharacter.gear = [];\r\n    } else {\r\n        upgradedCharacter.gear = upgradeGear(upgradedCharacter.gear);\r\n    }\r\n    if (upgradedCharacter.powers === undefined) {\r\n        upgradedCharacter.powers = [];\r\n    }\r\n    if (upgradedCharacter.initiateGrade === undefined) {\r\n        upgradedCharacter.initiateGrade = 0;\r\n    }\r\n    if (upgradedCharacter.metaMagics === undefined) {\r\n        upgradedCharacter.metaMagics = [];\r\n    }\r\n    return upgradedCharacter;\r\n}","import { Character, MetaType } from \"../model/character\";\r\nimport { DEFAULT_OPTIONS } from \"./default-create-options\";\r\n\r\nconst DEFAULT_KEY = -1;\r\nconst DEFAULT_CHARACTER: Character = {\r\n    key: DEFAULT_KEY,\r\n    name: \"\",\r\n    streetName: \"\",\r\n    metaType: MetaType.Human,\r\n    attributes: [\r\n        { name: \"Body\", rating: 3 },\r\n        { name: \"Agility\", rating: 3 },\r\n        { name: \"Reaction\", rating: 3 },\r\n        { name: \"Strength\", rating: 3 },\r\n        { name: \"Charisma\", rating: 3 },\r\n        { name: \"Intuition\", rating: 3 },\r\n        { name: \"Logic\", rating: 3 },\r\n        { name: \"Willpower\", rating: 3 },\r\n        { name: \"Edge\", rating: 3 },\r\n        { name: \"Magic\", rating: 3 },\r\n    ],\r\n    qualities: [],\r\n    activeSkills: [],\r\n    knowledgeSkills: [],\r\n    languageSkills: [],\r\n    contacts: [],\r\n    spells: [],\r\n    powers: [],\r\n    gear: [],\r\n    options: { ...DEFAULT_OPTIONS },\r\n    professionalism: 0,\r\n    initiateGrade: 0,\r\n    metaMagics: [],\r\n    modifiers: []\r\n};\r\n\r\nexport function getDefaultCharacter(): Character {\r\n    return { ...DEFAULT_CHARACTER };\r\n}\r\n\r\nexport function isDefaultCharacter(character: Character): boolean {\r\n    return JSON.stringify(DEFAULT_CHARACTER) === JSON.stringify(character);\r\n}\r\n\r\nexport function hasDefaultKey(character: Character): boolean {\r\n    return character.key === DEFAULT_KEY;\r\n}","import { Character, CharacterRef, upgradeCharacter } from \"./model/character\";\r\nimport { CustomItem } from \"./model/custom-item\";\r\nimport { getDefaultCharacter } from \"./data/default-character\";\r\nimport { Dictionary } from \"./model/dictionary\";\r\n\r\nconst CHARACTER_KEY = \"character\";\r\n\r\nfunction createCharacterKey(key: number): string {\r\n    return `${CHARACTER_KEY}:${key}`;\r\n}\r\n\r\nexport function loadCharacters(): CharacterRef[] {\r\n    const characters: CharacterRef[] = [getDefaultCharacter()];\r\n    for (let i = 0; i < localStorage.length; i++) {\r\n        const key = localStorage.key(i);\r\n        if (key === null) {\r\n            continue;\r\n        }\r\n        // charater:1337\r\n        if (/^character:\\d+$/i.test(key)) {\r\n            const characterJSON = localStorage.getItem(key);\r\n            if (characterJSON) {\r\n                const { key, name, streetName } = JSON.parse(characterJSON);\r\n                characters.push({ key, name, streetName });\r\n            }\r\n        }\r\n    }\r\n    characters.sort((a, b) => a.key - b.key);\r\n    return characters;\r\n}\r\n\r\nexport function loadCharacter(key: number): Character | undefined {\r\n    if (key === -1) {\r\n        return getDefaultCharacter();\r\n    }\r\n    const character = localStorage.getItem(createCharacterKey(key));\r\n    if (character) {\r\n        return upgradeCharacter(JSON.parse(character));\r\n    } else {\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport function saveCharacter(character: Character) {\r\n    localStorage.setItem(createCharacterKey(character.key), JSON.stringify(character));\r\n}\r\n\r\nexport function clearCharacter(character: Character) {\r\n    localStorage.removeItem(createCharacterKey(character.key));\r\n}\r\n\r\nconst SELECTED_CHARACTER_KEY = \"selected-character\";\r\n\r\nexport function loadSelectedCharacter(): number {\r\n    const selectedCharacter = localStorage.getItem(SELECTED_CHARACTER_KEY);\r\n    if (selectedCharacter) {\r\n        return parseInt(selectedCharacter);\r\n    } else {\r\n        return -1;\r\n    }\r\n}\r\n\r\nexport function saveSelectedCharacter(key: number) {\r\n    localStorage.setItem(SELECTED_CHARACTER_KEY, key.toString());\r\n}\r\n\r\nexport function clearSelectedCharacter() {\r\n    localStorage.removeItem(SELECTED_CHARACTER_KEY);\r\n}\r\n\r\nconst CUSTOM_ITEM_KEY = \"custom-item\";\r\n\r\nfunction createCustomItemKey(path: string, name: string): string {\r\n    return `${CUSTOM_ITEM_KEY}:${path}.${name}}`;\r\n}\r\n\r\nexport function loadCustomItems(): Dictionary<CustomItem> {\r\n    const customItems: Dictionary<CustomItem> = {};\r\n    for (let i = 0; i < localStorage.length; i++) {\r\n        const key = localStorage.key(i);\r\n        if (key === null) {\r\n            // not a custom item\r\n            continue;\r\n        }\r\n        /*\r\n        custom-item:category.group.name => [\r\n            \"custom-item:category.group.name\",\r\n            \"category.group\",\r\n            \"name\"\r\n        ]\r\n        */\r\n        const result = /^custom-item:(?:((?:(?:\\w+)(?:\\.)?)*)\\.)?(\\w+)$/i.exec(key);\r\n        if (result) {\r\n            const path = result[1];\r\n            const itemJSON = localStorage.getItem(key);\r\n            if (itemJSON) {\r\n                const item = JSON.parse(itemJSON);\r\n                customItems[path] = item;\r\n            }\r\n        }\r\n    }\r\n    return customItems;\r\n}\r\n\r\nexport function saveCustomItem(path: string, item: CustomItem) {\r\n    const key = createCustomItemKey(path, item.Name);\r\n    localStorage.setItem(key, JSON.stringify(item));\r\n}\r\n\r\nexport function clearCustomItem(path: string, item: CustomItem) {\r\n    const key = createCustomItemKey(path, item.Name);\r\n    localStorage.removeItem(key);\r\n}","import { MetaType } from \"./character\";\r\n\r\nexport function getMetaTypeCost(metaType: MetaType): number {\r\n    switch (metaType) {\r\n        case MetaType.Human:\r\n            return 0;\r\n        case MetaType.Ork:\r\n            return 30;\r\n        case MetaType.Dwarf:\r\n            return 30;\r\n        case MetaType.Elf:\r\n            return 40;\r\n        case MetaType.Troll:\r\n            return 60;\r\n        default:\r\n            throw new Error(`Unknown meta-type '${metaType}'`);\r\n    }\r\n}","import { Character } from \"./character\";\r\n\r\nexport function getModifier(character: Character, name: string): number {\r\n\tconst modifier = character.modifiers.find(m => m.name === name);\r\n\tif (modifier) {\r\n\t\treturn modifier.rating;\r\n\t}\r\n\treturn 0;\r\n}","import { MetaType, Character, isAwakened } from \"./character\";\r\nimport { getModifier } from \"./modifier\";\r\n\r\nexport function getBaseAttributeRating(character: Character, name: string): number {\r\n    const attribute = character.attributes.find(a => a.name === name);\r\n    if (!attribute) {\r\n        throw new Error(`Could not find attribute with name '${name}'`);\r\n    }\r\n    return attribute.rating\r\n}\r\n\r\nexport function getNaturalAttributeRating(character: Character, name: string): number {\r\n    const baseRating = getBaseAttributeRating(character, name);\r\n    const metaTypeModifier = getAttributeMetaTypeModifier(character.metaType, name);\r\n    \r\n    return baseRating + metaTypeModifier;\r\n}\r\n\r\nexport function getEffectiveAttributeRating(character: Character, name: string): number {\r\n    const naturalRating = getNaturalAttributeRating(character, name);\r\n    const modifier = getModifier(character, name);\r\n\r\n    return naturalRating + modifier;\r\n}\r\n\r\nexport function getAttributeMetaTypeModifier(metaType: MetaType, name: string): number {\r\n    switch (metaType) {\r\n        case MetaType.Dwarf:\r\n            switch (name) {\r\n                case \"Body\":\r\n                    return 1;\r\n                case \"Reaction\":\r\n                    return -1;\r\n                case \"Strength\":\r\n                    return 2;\r\n                case \"Willpower\":\r\n                    return 1;\r\n            }\r\n            break;\r\n        case MetaType.Elf:\r\n            switch (name) {\r\n                case \"Agility\":\r\n                    return 1;\r\n                case \"Charisma\":\r\n                    return 2;\r\n            }\r\n            break;\r\n        case MetaType.Human:\r\n            break;\r\n        case MetaType.Ork:\r\n            switch (name) {\r\n                case \"Body\":\r\n                    return 3;\r\n                case \"Strength\":\r\n                    return 2;\r\n                case \"Charisma\":\r\n                    return -1;\r\n                case \"Logic\":\r\n                    return -1;\r\n            }\r\n            break;\r\n        case MetaType.Troll:\r\n            switch (name) {\r\n                case \"Body\":\r\n                    return 4;\r\n                case \"Agility\":\r\n                    return -1;\r\n                case \"Strength\":\r\n                    return 4;\r\n                case \"Charisma\":\r\n                    return -2;\r\n                case \"Intuition\":\r\n                    return -1;\r\n                case \"Logic\":\r\n                    return -1;\r\n            }\r\n            break;\r\n    }\r\n    return 0;\r\n}\r\n\r\nexport function getAttributeCost(rating: number): number {\r\n    switch (rating) {\r\n        case 1:\r\n            return -25;\r\n        case 2:\r\n            return -15;\r\n        case 3:\r\n            return 0;\r\n        case 4:\r\n            return 20;\r\n        case 5:\r\n            return 45;\r\n        case 6:\r\n            return 75;\r\n        case 7:\r\n            return 110;\r\n        default:\r\n            throw new Error(`Unsupported attribute rating ${rating}`);\r\n    }\r\n}\r\n\r\nexport function getAttributesCost(character: Character): number {\r\n    const awakened = isAwakened(character);\r\n    let cost = 0;\r\n    for (const attribute of character.attributes) {\r\n        if (attribute.name === \"Magic\" && !awakened) {\r\n            // character could be awakened, have their Magic attribute, then be mundane\r\n            // ignore any Magic changes in this case\r\n            continue;\r\n        }\r\n        cost += getAttributeCost(attribute.rating);\r\n    }\r\n    return cost;\r\n}","import { getNaturalAttributeRating } from \"./attributes\";\r\nimport { Skill, Character } from \"./character\";\r\nimport { CustomItem } from \"./custom-item\";\r\n\r\nexport type Skills = {\r\n    active: CustomItem[];\r\n    knowledge: CustomItem[];\r\n    language: CustomItem[];\r\n};\r\n\r\nexport function getActiveSkillCost(rating: number): number {\r\n    switch (rating) {\r\n        case -1:\r\n            return 0;\r\n        case 1:\r\n            return 5;\r\n        case 3:\r\n            return 15;\r\n        case 5:\r\n            return 30;\r\n        case 7:\r\n            return 60;\r\n        default:\r\n            throw new Error(`Unsupported skill rating ${rating}`);\r\n    }\r\n}\r\n\r\nexport function getActiveSkillsCost(activeSkills: Skill[]): number {\r\n    return activeSkills.map(s => getActiveSkillCost(s.rating)).reduce((a, b) => a + b, 0);\r\n}\r\n\r\nexport function getKnowledgeSkillCost(rating: number): number {\r\n    switch (rating) {\r\n        case -1:\r\n            return 0;\r\n        case 1:\r\n            return 2;\r\n        case 3:\r\n            return 7;\r\n        case 5:\r\n            return 15;\r\n        case 7:\r\n            return 30;\r\n        default:\r\n            throw new Error(`Unsupported skill rating ${rating}`);\r\n    }\r\n}\r\n\r\nexport function getKnowledgeSkillsCost(knowledgeSkills: Skill[]): number {\r\n    return knowledgeSkills.map(s => getKnowledgeSkillCost(s.rating)).reduce((a, b) => a + b, 0);\r\n}\r\n\r\nexport function getFreeKnowledgeSkillPoints(character: Character): number {\r\n    const intuition = getNaturalAttributeRating(character, \"Intuition\");\r\n    const logic = getNaturalAttributeRating(character, \"Logic\");\r\n    return (intuition + logic) * 10;\r\n}\r\n\r\nexport function getSkillsCost(character: Character): number {\r\n    const activeSkillCost = getActiveSkillsCost(character.activeSkills);\r\n    const knowledgeSkillCost = getKnowledgeSkillsCost(character.knowledgeSkills);\r\n    // exclude native language\r\n    const languageSkillCost = getKnowledgeSkillsCost(character.languageSkills);\r\n    const freeKnowledgePoints = getFreeKnowledgeSkillPoints(character);\r\n    return activeSkillCost + Math.max(knowledgeSkillCost + languageSkillCost - freeKnowledgePoints, 0);\r\n}","import { CustomItem } from \"./custom-item\";\r\nimport { Item } from \"./item\";\r\nimport { Dictionary, transformAllItems, getItemCost } from \"./dictionary\";\r\nimport { Character } from \"./character\";\r\n\r\nexport type Quality = {\r\n    cost: string;\r\n} & Item;\r\n\r\nexport const qualitiesRoot = \"qualities\";\r\n\r\nexport function transformAllQualities(allData: any): Dictionary<Quality[]> {\r\n    const allQualities: Dictionary<Quality[]> = {};\r\n    transformAllItems(qualitiesRoot, allData, allQualities, transformQualityValues);\r\n    return allQualities;\r\n}\r\n\r\nfunction transformQualityValues(path: string, values: any[]): Quality[] {\r\n    const qualities: Quality[] = [];\r\n    for (const value of values) {\r\n        const name = value[\"Name\"];\r\n        const cost = value[\"Cost\"];\r\n        qualities.push({ path, name, cost });\r\n    }\r\n    return qualities;\r\n}\r\n\r\nexport type Qualities = {\r\n    positive: string[];\r\n    negative: string[]\r\n};\r\n\r\nexport type AllQualities = {\r\n    positive: CustomItem[];\r\n    negative: CustomItem[];\r\n}\r\n\r\nexport function getQualitiesCost(selectedQualities: string[], allQualities: CustomItem[]): number {\r\n    let cost = 0;\r\n    for (const selected of selectedQualities) {\r\n        const quality = allQualities.find(q => q.Name === selected);\r\n        if (!quality) {\r\n            throw new Error(`Could not find quality with name '${selected}' in list '${JSON.stringify(allQualities)}'`);\r\n        }\r\n        cost += parseInt(quality.Cost!);\r\n    }\r\n    return cost;\r\n}\r\n\r\nexport function getAllQualitiesCost(selectedQualities: { positive: string[], negative: string[] }, allQualities: AllQualities): number {\r\n    let cost = 0;\r\n    cost += getQualitiesCost(selectedQualities.positive, allQualities.positive);\r\n    cost += getQualitiesCost(selectedQualities.negative, allQualities.negative);\r\n    return cost;\r\n}\r\n\r\nexport function getCharacterQualitiesCost(character: Character, allQualities: Dictionary<Quality[]>): number {\r\n    let cost = 0;\r\n    for (const quality of character.qualities) {\r\n        cost += getItemCost(quality, allQualities);\r\n    }\r\n    return cost;\r\n}","import { getNaturalAttributeRating } from \"./attributes\";\r\nimport { Character } from \"./character\";\r\n\r\nexport type Contact = {\r\n\tname: string;\r\n\tconnection: number;\r\n\tloyalty: number;\r\n};\r\n\r\nexport function getContactRatingCost(rating: number): number {\r\n\tswitch (rating) {\r\n\t\tcase 1:\r\n\t\t\treturn 2;\r\n\t\tcase 3:\r\n\t\t\treturn 7;\r\n\t\tcase 5:\r\n\t\t\treturn 15;\r\n\t\tcase 7:\r\n\t\t\treturn 30;\r\n\t\tdefault:\r\n\t\t\tthrow new Error();\r\n\t}\r\n}\r\n\r\nexport function getContactCost(contact: Contact): number {\r\n\tlet cost = 0;\r\n\tcost += getContactRatingCost(contact.connection);\r\n\tcost += getContactRatingCost(contact.loyalty);\r\n\treturn cost;\r\n}\r\n\r\nexport function getFreeContactPoints(character: Character): number {\r\n    const charisma = getNaturalAttributeRating(character, \"Charisma\");\r\n    const willpower = getNaturalAttributeRating(character, \"Willpower\");\r\n    return (charisma + willpower) * 10;\r\n}\r\n\r\nexport function getAllContactsCost(character: Character): number {\r\n\treturn character.contacts.map(c => getContactCost(c)).reduce((a, b) => a + b, 0);\r\n}\r\n\r\nexport function getContactsCost(character: Character): number {\r\n\tconst allContactsCost = getAllContactsCost(character);\r\n\tconst freeContactPoints = getFreeContactPoints(character);\r\n\treturn Math.max(allContactsCost - freeContactPoints, 0);\r\n}","import { Character } from \"./character\";\r\nimport { Item } from \"./item\";\r\nimport { Dictionary, transformAllItems, getItemCost } from \"./dictionary\";\r\n\r\nexport type Spell = {\r\n\tcost: string;\r\n} & Item;\r\n\r\nexport type AdeptPower = {\r\n\tcost: string;\r\n\tlevels: string;\r\n} & Item;\r\n\r\nexport const spellsRoot = \"spells\";\r\n\r\nexport function transformAllSpells(allData: any): Dictionary<Spell[]> {\r\n\tconst allSpells: Dictionary<Spell[]> = {};\r\n\ttransformAllItems(spellsRoot, allData, allSpells, transformSpellValues);\r\n\treturn allSpells;\r\n}\r\n\r\nfunction transformSpellValues(path: string, values: any[]): Spell[] {\r\n\tconst spells: Spell[] = []\r\n\tfor (const value of values) {\r\n\t\tconst name = value[\"Name\"];\r\n\t\tspells.push({ path, name, cost: \"5\" });\r\n\t}\r\n\treturn spells;\r\n}\r\n\r\nexport function getSpellsCost(spells: Item[]): number {\r\n\treturn spells.length * 5;\r\n}\r\n\r\nexport function getCharacterSpellsCost(character: Character): number {\r\n\treturn getSpellsCost(character.spells);\r\n}\r\n\r\nexport const powersRoot = \"powers\";\r\n\r\nexport function transformAllPowers(allData: any): Dictionary<AdeptPower[]> {\r\n\tconst allPowers: Dictionary<AdeptPower[]> = {};\r\n\ttransformAllItems(powersRoot, allData, allPowers, transformPowerValues);\r\n\treturn allPowers;\r\n}\r\n\r\nfunction transformPowerValues(path: string, values: any[]): AdeptPower[] {\r\n\tconst powers: AdeptPower[] = [];\r\n\tfor (const value of values) {\r\n\t\tif (path === \"powers.adept-powers\") {\r\n\t\t\tconst name = value[\"Name\"];\r\n\t\t\tconst cost = value[\"Cost\"];\r\n\t\t\tconst levels = value[\"Levels\"];\r\n\t\t\tpowers.push({ path, name, cost, levels });\r\n\t\t} else if (path === \"powers.metamagic\") {\r\n\t\t\tconst name = value[\"Name\"];\r\n\t\t\tconst cost = \"10\";\r\n\t\t\tconst levels = \"\";\r\n\t\t\tpowers.push({ path, name, cost, levels });\r\n\t\t}\r\n\t}\r\n\treturn powers;\r\n}\r\n\r\nexport function computeAdeptPowerCost(item: Item, allPowers: Dictionary<Item[]>): number {\r\n\tconst baseCost = getItemCost(item, allPowers);\r\n\treturn baseCost;\r\n}\r\n\r\nconst powerHasLevelsMap = new Map<string,boolean>();\r\nexport function doesAdeptPowerHaveLevels(item: Item, allPowers: Dictionary<Item[]>): boolean {\r\n\tconst key = `${item.path}.${item.name}`;\r\n\tif (powerHasLevelsMap.has(key)) {\r\n\t\treturn powerHasLevelsMap.get(key)!;\r\n\t}\r\n\tconst powers = allPowers[\"powers.adept-powers\"];\r\n\tif (powers === undefined) {\r\n\t\tthrow new Error(`Could not find any powers under path 'powers.adept-powers'`);\r\n\t}\r\n\tconst foundPower = powers.find(p => p.name === item.name);\r\n\tif (!foundPower) {\r\n\t\tthrow new Error(`Could not find power with name '${item.name}' in list '${JSON.stringify(powers)}' under path '${item.path}'`);\r\n\t}\r\n\tconst hasLevels = foundPower.levels !== undefined && foundPower.levels !== \"-\";\r\n\tpowerHasLevelsMap.set(key, hasLevels);\r\n\treturn hasLevels;\r\n}\r\n\r\nexport function getInitiateGradeCost(rating: number): number {\r\n\tif (rating < 0 || rating > 6) {\r\n        throw new Error(`Initiate grade must be witin the range [1..6] - found ${rating}`);\r\n\t}\r\n\tif (rating === 0) {\r\n\t\treturn 0;\r\n\t}\r\n    const sum = rating * (rating + 1) / 2 + 1; // first grade costs 20 instead of 10\r\n    return sum * 10;\r\n}\r\n\r\nexport function getCharacterMagicCost(character: Character): number {\r\n\tlet cost = 0;\r\n\tcost += getCharacterSpellsCost(character);\r\n\tcost += getInitiateGradeCost(character.initiateGrade);\r\n\tcost += character.metaMagics.length * 10;\r\n\treturn cost;\r\n}","import { Reducer } from \"react\";\r\nimport { State } from \"./model/state\";\r\nimport { getDefaultCharacter, hasDefaultKey } from \"./data/default-character\";\r\nimport { Character, CharacterRef, upgradeCharacter } from \"./model/character\";\r\nimport { saveCharacter, clearCharacter, loadCharacter, saveCustomItem } from \"./persistance\";\r\nimport { getDefaultKarma, getCharacterKarma } from \"./model/karma\";\r\nimport { Quality } from \"./model/quality\";\r\nimport { Skills } from \"./model/skills\";\r\nimport { CustomItem } from \"./model/custom-item\";\r\nimport { AdeptPower, Spell } from \"./model/magic\";\r\nimport { Gear } from \"./model/gear\";\r\nimport { Dictionary } from \"./model/dictionary\";\r\nimport { DEFAULT_OPTIONS } from \"./data/default-create-options\";\r\nimport { CreateOptions } from \"./model/create-options\";\r\n\r\nexport enum ActionType {\r\n    UpdateCharacter = \"updateCharacter\",\r\n    ImportCharacter = \"importCharacter\",\r\n    ClearCharacter = \"clearCharacter\",\r\n    SelectCharacter = \"selectCharacter\",\r\n    LoadQualities = \"loadQualities\",\r\n    LoadSkills = \"loadSkills\",\r\n    LoadContacts = \"loadContacts\",\r\n    LoadSpells = \"loadSpells\",\r\n    LoadPowers = \"loadPowers\",\r\n    LoadGear = \"loadGear\",\r\n    LoadCustomItems = \"loadCustomItems\",\r\n    AddCustomItem = \"addCustomItem\",\r\n    UpdateCreateOptions = \"updateCreateOptions\"\r\n}\r\n\r\nexport type Action = {\r\n    type: ActionType;\r\n    data?: any;\r\n};\r\n\r\nexport type UpdateCharacterData = Character;\r\nexport type ImportCharacterData = Character;\r\nexport type SelectCharacterData = CharacterRef;\r\nexport type LoadQualitiesData = Dictionary<Quality[]>;\r\nexport type LoadSkillsData = Skills;\r\nexport type LoadContactsData = CustomItem[];\r\nexport type LoadSpellsData = Dictionary<Spell[]>;\r\nexport type LoadPowersData = Dictionary<AdeptPower[]>;\r\nexport type LoadGearData = Dictionary<Gear[]>;\r\nexport type LoadCustomItemsData = Dictionary<CustomItem>;\r\nexport type AddCustomItemData = { path: string, item: CustomItem };\r\nexport type UpdateCreateOptionsData = CreateOptions;\r\n\r\nexport const reducer: Reducer<State, Action> = (state: State, action: Action): State => {\r\n    switch (action.type) {\r\n        case ActionType.UpdateCharacter: {\r\n            const selectedCharacter = action.data as UpdateCharacterData;\r\n            const characters = handleCharacterUpdate(selectedCharacter, state);\r\n            const karma = getCharacterKarma(selectedCharacter, state);\r\n            // the list of characters is not saved separatly - it is constructed from all the available characters\r\n            saveCharacter(selectedCharacter);\r\n            return { ...state, selectedCharacter, characters, karma };\r\n        }\r\n        case ActionType.ImportCharacter: {\r\n            const selectedCharacter = action.data as ImportCharacterData;\r\n            saveCharacter(upgradeCharacter(selectedCharacter));\r\n            const characters = handleCharacterUpdate(selectedCharacter, state);\r\n            const karma = getCharacterKarma(selectedCharacter, state)\r\n            return { ...state, selectedCharacter, characters, karma };\r\n        }\r\n        case ActionType.ClearCharacter: {\r\n            clearCharacter(state.selectedCharacter);\r\n            const characters = state.characters\r\n                .filter(c => c.key !== state.selectedCharacter.key)\r\n                .map(({ key, name, streetName }) => ({ key, name, streetName }));\r\n            const selectedCharacter = getDefaultCharacter();\r\n            const karma = getDefaultKarma(selectedCharacter.options.karmaLevel);\r\n            return { ...state, characters, selectedCharacter, karma };\r\n        }\r\n        case ActionType.SelectCharacter: {\r\n            const characterRef = action.data as SelectCharacterData;\r\n            // Loading the app with a saved character can throw an error calculating karma cost, as the available data (qualities, etc) have not been loaded yet\r\n            // saveSelectedCharacter(characterRef.key);\r\n            const selectedCharacter = loadCharacter(characterRef.key);\r\n            if (!selectedCharacter) {\r\n                throw new Error(`Could not find saved character ${JSON.stringify(characterRef)}`);\r\n            }\r\n            const karma = getCharacterKarma(selectedCharacter, state);\r\n            return { ...state, selectedCharacter, karma};\r\n        }\r\n        case ActionType.LoadQualities: {\r\n            const allQualities = action.data as LoadQualitiesData;\r\n            return { ...state, allQualities };\r\n        }\r\n        case ActionType.LoadSkills: {\r\n            const allSkills = action.data as LoadSkillsData;\r\n            return { ...state, allSkills };\r\n        }\r\n        case ActionType.LoadContacts: {\r\n            const allContacts = action.data as LoadContactsData;\r\n            return { ...state, allContacts}\r\n        }\r\n        case ActionType.LoadGear: {\r\n            const allGear = action.data as LoadGearData;\r\n            return { ...state, allGear };\r\n        }\r\n        case ActionType.LoadSpells: {\r\n            const allSpells = action.data as LoadSpellsData;\r\n            return { ...state, allSpells };\r\n        }\r\n        case ActionType.LoadPowers: {\r\n            const allPowers = action.data as LoadPowersData;\r\n            return { ...state, allPowers };\r\n        }\r\n        case ActionType.LoadCustomItems: {\r\n            const customItems = action.data as LoadCustomItemsData;\r\n            return { ...state, customItems };\r\n        }\r\n        case ActionType.AddCustomItem: {\r\n            const newItem = action.data as AddCustomItemData;\r\n            // persist item in local storage for later\r\n            saveCustomItem(newItem.path, newItem.item);\r\n            const customItems = { ...state.customItems };\r\n            customItems[newItem.path] = newItem.item;\r\n            return { ...state, customItems };\r\n        }\r\n        case ActionType.UpdateCreateOptions: {\r\n            const newOptions = action.data as UpdateCreateOptionsData;\r\n            const selectedCharacter = { ...state.selectedCharacter, options: { ...newOptions } };\r\n            const karma = getCharacterKarma(selectedCharacter, state);\r\n            return { ...state, selectedCharacter, karma};\r\n        }\r\n    }\r\n    return { ...state };\r\n}\r\n\r\nexport const INITIAL_STATE: State = {\r\n    characters: [],\r\n    selectedCharacter: getDefaultCharacter(),\r\n    karma: getDefaultKarma(DEFAULT_OPTIONS.karmaLevel),\r\n    allQualities: { positive: [], negative: [] },\r\n    allSkills: { active: [], knowledge: [], language: [] },\r\n    allContacts: [],\r\n    allSpells: { combat: [], detection: [], health: [], illusion: [], manipulation: [] },\r\n    allPowers: { adeptPowers: [] },\r\n    allGear: {},\r\n    customItems: {}\r\n};\r\n\r\nfunction handleCharacterUpdate(character: Character, state: State): CharacterRef[] {\r\n    const characters = [...state.characters];\r\n    let index: number;\r\n    if (hasDefaultKey(character)) {\r\n        // character has not been saved yet\r\n        character.key = Date.now();\r\n        index = -1;\r\n    } else {\r\n        index = characters.findIndex(c => c.key === character.key);\r\n    }\r\n    const { key, name, streetName } = character;\r\n    if (index === -1) {\r\n        characters.push({ key, name, streetName });\r\n    } else {\r\n        characters[index] = { key, name, streetName };\r\n    }\r\n    return characters;\r\n}","import { Character, getProfessionalismCost } from \"./character\";\r\nimport { getMetaTypeCost } from \"./meta-type\";\r\nimport { getAttributesCost } from \"./attributes\";\r\nimport { getSkillsCost } from \"./skills\";\r\nimport { getCharacterQualitiesCost } from \"./quality\";\r\nimport { State } from \"./state\";\r\nimport { getCharacterGearKarmaCost, getCharacterGearNuyenCost } from \"./gear\";\r\nimport { getStartingKarma, Level } from \"./create-options\";\r\nimport { getContactsCost } from \"./contact\";\r\nimport { getCharacterMagicCost } from \"./magic\";\r\n\r\nexport type Karma = {\r\n    total: number;\r\n    spent: number;\r\n    available: number;\r\n};\r\n\r\nexport function getDefaultKarma(karmaLevel: Level): Karma {\r\n    let total: number;\r\n    switch (karmaLevel) {\r\n        case Level.Street:\r\n            total = 400;\r\n            break;\r\n        case Level.Normal:\r\n            total = 500;\r\n            break;\r\n        case Level.Elite:\r\n            total = 700;\r\n            break;\r\n    }\r\n    const spent = 0;\r\n    const available = total;\r\n    return {\r\n        total,\r\n        spent,\r\n        available\r\n    };\r\n}\r\n\r\nexport function getCharacterKarma(character: Character, state: State): Karma {\r\n    const total = getStartingKarma(character.options.karmaLevel);\r\n    let spent = 0;\r\n    spent += getMetaTypeCost(character.metaType);\r\n    spent += getCharacterQualitiesCost(character, state.allQualities);\r\n    spent += getAttributesCost(character);\r\n    spent += getSkillsCost(character);\r\n    spent += getContactsCost(character);\r\n    spent += getCharacterGearKarmaCost(getCharacterGearNuyenCost(character, state.allGear, character.options.gearLevel), character.options.nuyenLevel);\r\n    spent += getCharacterMagicCost(character);\r\n    spent += getProfessionalismCost(character.professionalism);\r\n    const available = total - spent;\r\n    return { total, spent, available };\r\n}","import { createContext, Dispatch, useContext } from \"react\";\r\nimport { State } from \"./model/state\";\r\nimport { Action, INITIAL_STATE } from \"./reducer\";\r\n\r\nexport const DispatchContext = createContext<Dispatch<Action>>(() => {});\r\n\r\nexport const useDispatch = (): Dispatch<Action> => {\r\n    return useContext(DispatchContext);\r\n}\r\n\r\nexport const StateContext = createContext<State>(INITIAL_STATE);\r\n\r\nexport const useGlobalState = <K extends keyof State>(property: K) => {\r\n    const state = useContext(StateContext);\r\n    return state[property];\r\n}","import React, { FC } from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { CharacterRef } from \"../model/character\";\r\n\r\n\r\ntype Props = {\r\n    character: CharacterRef;\r\n};\r\n\r\nconst CharacterName: FC<Props> = (props: Props) => {\r\n    const { character } = props;\r\n    const { name, streetName } = character;\r\n    if (!name && !streetName) {\r\n        return <Typography>= New Character =</Typography>;\r\n    }\r\n    if (!streetName) {\r\n        return <Typography>{name}</Typography>\r\n    }\r\n    if (!name) {\r\n        return <Typography>{streetName}</Typography>\r\n    }\r\n    return <Typography>{name} aka {streetName}</Typography>\r\n};\r\n\r\nexport default CharacterName;","import React, { FC } from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\r\nimport { useGlobalState, useDispatch } from \"../context\";\r\nimport CharacterName from \"./CharacterName\";\r\nimport { CharacterRef } from \"../model/character\";\r\nimport { ActionType, SelectCharacterData } from \"../reducer\";\r\n\r\nconst SelectCharacter: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const characters = useGlobalState(\"characters\");\r\n\r\n    const onCharacterClick = (character: CharacterRef) => {\r\n        const data: SelectCharacterData = character;\r\n        dispatch({ type: ActionType.SelectCharacter, data });\r\n    };\r\n    return (\r\n        <List subheader={\r\n            <ListSubheader>Characters</ListSubheader>\r\n            }\r\n            >\r\n            {\r\n                characters.map(c => (\r\n                    <ListItem key={c.key} onClick={() => onCharacterClick(c)}>\r\n                        <CharacterName character={c} />\r\n                    </ListItem>\r\n                ))\r\n            }\r\n        </List>\r\n    )\r\n};\r\n\r\nexport default SelectCharacter;","import { MetaType } from \"../model/character\";\r\n\r\nexport const ALL_META_TYPES: MetaType[] = [\r\n    MetaType.Human,\r\n    MetaType.Ork,\r\n    MetaType.Dwarf,\r\n    MetaType.Elf,\r\n    MetaType.Troll\r\n];\r\n","import React, { FC } from \"react\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport { makeStyles, Badge } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n\troot: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"row\",\r\n\t\tflexWrap: \"wrap\",\r\n\t\tjustifyContent: \"flex-start\"\r\n\t},\r\n\tchip: {\r\n\t\tmarginRight: 10,\r\n\t\tmarginBottom: 10,\r\n\t}\r\n});\r\n\r\ntype Props = {\r\n\tvalues: any[];\r\n\tcreateChipLabel: (value: any) => string;\r\n\tonDeleteValue: (value: any) => void;\r\n};\r\nconst ChipCollection: FC<Props> = (props: Props) => {\r\n\tconst { values, createChipLabel, onDeleteValue } = props;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\treturn (\r\n\t\t<div className={classes.root}>\r\n\t\t\t{\r\n\t\t\t\tvalues.map(v =>\r\n\t\t\t\t\t<Badge key={v.name} badgeContent={v.count} invisible={v.count===\"1\"} color=\"secondary\" max={99} anchorOrigin={{ vertical: \"top\", horizontal: \"left\" }}>\r\n\t\t\t\t\t\t<Chip\r\n\t\t\t\t\t\t\tclassName={classes.chip}\r\n\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\tlabel={createChipLabel(v)}\r\n\t\t\t\t\t\t\tonDelete={() => onDeleteValue(v)}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Badge>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ChipCollection;","import { Dictionary } from \"./dictionary\";\r\n\r\nexport type Item = {\r\n\tpath: string;\r\n\tname: string;\r\n} & Dictionary<string | undefined>;\r\n\r\nexport function getItemSubset(items: Item[], parentPath: string): Item[] {\r\n\tconst subItems: Item[] = [];\r\n\tfor (const item of items) {\r\n\t\tif (item.path === parentPath || item.path.startsWith(`${parentPath}.`)) {\r\n\t\t\tsubItems.push(item);\r\n\t\t}\r\n\t}\r\n\treturn subItems;\r\n}","import React, { FC } from \"react\";\r\nimport { Grade } from \"../model/gear\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n\troot: {\r\n\t\tminWidth: 78,\r\n\t\tmaxWidth: 78,\r\n\t\twidth: 78,\r\n\t},\r\n})\r\ntype Props = {\r\n\tdisabled: boolean;\r\n\tgrade: Grade;\r\n\tonUpdateGrade: (newGrade: Grade) => void;\r\n};\r\nconst GradeButton: FC<Props> = (props: Props) => {\r\n\tconst { disabled, grade, onUpdateGrade } = props;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\treturn (\r\n\t\t<Button\r\n\t\t\tclassName={classes.root}\r\n\t\t\tdisabled={disabled}\r\n\t\t\tvariant=\"outlined\"\r\n\t\t\tonClick={() => onUpdateGrade(nextGrade(grade))}\r\n\t\t>\r\n\t\t\t{grade}\r\n\t\t</Button>\r\n\t);\r\n};\r\n\r\nexport default GradeButton;\r\n\r\nfunction nextGrade(grade: Grade): Grade {\r\n\tswitch (grade)\t {\r\n\t\tcase Grade.Used:\r\n\t\t\treturn Grade.Alpha;\r\n\t\tcase Grade.Alpha:\r\n\t\t\treturn Grade.Beta;\r\n\t\tcase Grade.Beta:\r\n\t\t\treturn Grade.Delta;\r\n\t\tcase Grade.Delta:\r\n\t\t\treturn Grade.Used;\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown augmentation grade '${grade}'`);\r\n\t}\r\n}","import React, { FC } from \"react\";\r\nimport { Item } from \"../model/item\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { Grade, gearRoot, isItemAvailable } from \"../model/gear\";\r\nimport GradeButton from \"./GradeButton\";\r\nimport { useGlobalState } from \"../context\";\r\nimport { doesAdeptPowerHaveLevels, powersRoot } from \"../model/magic\";\r\n\r\nconst useStyles = makeStyles({\r\n\troot: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"row\",\r\n\t\tpadding: 10,\r\n\t\tmargin: 10,\r\n\t},\r\n\tname: {\r\n\t\twidth: 500,\r\n\t\ttextAlign: \"left\",\r\n\t},\r\n\tavailability: {\r\n\t\twidth: 100,\r\n\t\ttextAlign: \"center\",\r\n\t},\r\n\tcost: {\r\n\t\twidth: 200,\r\n\t\ttextAlign: \"center\",\r\n\t},\r\n\tbuttons: {\r\n\t\twidth: 200,\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"row\",\r\n\t\tjustifyContent: \"center\"\r\n\t}\r\n});\r\n\r\ntype Props = {\r\n\titem: Item;\r\n\tcreateCostLabel: (item: Item) => string;\r\n\tonUpdateItem: (newItem: Item) => void;\r\n};\r\nconst ItemPickerCard: FC<Props> = (props: Props) => {\r\n\tconst { item, createCostLabel, onUpdateItem } = props;\r\n\tconst allPowers = useGlobalState(\"allPowers\");\r\n\tconst options = useGlobalState(\"selectedCharacter\").options;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tconst count = parseInt(item.count!);\r\n\tconst costLabel = createCostLabel(item);\r\n\r\n\tconst hasAny = count > 0;\r\n\r\n\tlet allowMultiple: boolean;\r\n\tif (item.path.startsWith(gearRoot)) {\r\n\t\tallowMultiple = true;\r\n\t} else if (item.path.startsWith(`${powersRoot}.adept-powers`)) {\r\n\t\tallowMultiple = doesAdeptPowerHaveLevels(item, allPowers);\r\n\t} else {\r\n\t\tallowMultiple = false;\r\n\t}\r\n\t\r\n\tconst includeAvailability = item.path.startsWith(gearRoot);\r\n\tconst available = includeAvailability ? isItemAvailable(item.availability!, options.gearLevel) : true;\r\n\tconst includeGrade = item.path.startsWith(`${gearRoot}.augmentations`);\r\n\r\n\tconst grade = item.grade as Grade || Grade.Alpha;\r\n\r\n\tconst handleAdd = () => {\r\n\t\tonUpdateItem({ ...item, count: (count + 1).toString() });\r\n\t};\r\n\r\n\tconst handleRemove = () => {\r\n\t\tonUpdateItem({ ...item, count: Math.max(count - 1, 0).toString() });\r\n\t};\r\n\r\n\tconst handleGradeToggle = (newGrade: Grade) => {\r\n\t\tconst newItem: Item = { ...item, grade: newGrade };\r\n\t\t// alpha is the default for cyber/bio and we don't want to 'dirty' all gear items with unnecessary grade properties\r\n\t\t// if it is never toggled it will never get added in the first place, so do not need to consider grade in the add/remove handlers\r\n\t\tif (newGrade === Grade.Alpha) {\r\n\t\t\tdelete newItem.grade;\r\n\t\t}\r\n\t\tonUpdateItem(newItem);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Paper\r\n\t\t\tclassName={classes.root}\r\n\t\t\televation={3}\r\n\t\t>\r\n\t\t\t<Typography className={classes.name} style={{lineHeight: \"36px\"}}>{item.name}</Typography>\r\n\t\t\t{\r\n\t\t\t\tincludeAvailability ?\r\n\t\t\t\t<Typography className={classes.availability} style={{lineHeight: \"36px\"}}>{item.availability}</Typography>\r\n\t\t\t\t:\r\n\t\t\t\tnull\r\n\t\t\t}\r\n\t\t\t<span className={classes.cost}>\r\n\t\t\t\t<Badge badgeContent={count} color=\"secondary\">\r\n\t\t\t\t\t<Typography style={{lineHeight: \"36px\"}}>({costLabel})</Typography>\r\n\t\t\t\t</Badge>\r\n\t\t\t</span>\r\n\t\t\t<ButtonGroup className={classes.buttons}>\r\n\t\t\t\t{ allowMultiple || !hasAny ? <Button onClick={handleAdd} disabled={!available}><AddIcon /></Button> : null }\r\n\t\t\t\t{ allowMultiple || hasAny ? <Button onClick={handleRemove} disabled={!available}><RemoveIcon /></Button> : null }\r\n\t\t\t\t{ includeGrade ? <GradeButton disabled={count === 0} grade={grade} onUpdateGrade={handleGradeToggle} /> : null }\r\n\t\t\t</ButtonGroup>\r\n\t\t</Paper>\r\n\t);\r\n};\r\n\r\nexport default ItemPickerCard;","import React, { FC, Fragment } from \"react\";\r\nimport { Item } from \"../model/item\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport ItemPickerCard from \"./ItemPickerCard\";\r\n\r\nconst useStyles = makeStyles({\r\n\titems: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"column\",\r\n\t}\r\n});\r\n\r\ntype Props = {\r\n\tlabel: string;\r\n\titems: Item[];\r\n\tcreateCostLabel: (item: Item) => string;\r\n\tonUpdateItems: (newItems: Item[]) => void;\r\n};\r\nconst ItemPickerSection: FC<Props> = (props: Props) => {\r\n\tconst { items, createCostLabel, onUpdateItems } = props;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tconst handleUpdate = (item: Item) => {\r\n\t\tconst newItems = [...items];\r\n\t\tconst index = items.findIndex(i => i.name === item.name);\r\n\t\tnewItems[index] = item;\r\n\t\tonUpdateItems(newItems);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<Divider />\r\n\t\t\t<div className={classes.items}>\r\n\t\t\t\t{\r\n\t\t\t\t\titems\r\n\t\t\t\t\t?\r\n\t\t\t\t\titems.map(i =>\r\n\t\t\t\t\t\t<ItemPickerCard\r\n\t\t\t\t\t\t\titem={i}\r\n\t\t\t\t\t\t\tcreateCostLabel={createCostLabel}\r\n\t\t\t\t\t\t\tonUpdateItem={handleUpdate}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)\r\n\t\t\t\t\t:\r\n\t\t\t\t\t<div>No items</div>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default ItemPickerSection;","import React, { FC, useState, ChangeEvent } from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport { Item } from \"../model/item\";\r\nimport { Dictionary } from \"../model/dictionary\";\r\nimport { sentenceCase } from \"change-case\";\r\nimport ItemPickerSection from \"./ItemPickerSection\";\r\n\r\n\r\ntype Props = {\r\n\topen: boolean;\r\n\tonClose: () => void;\r\n\ttitle: string;\r\n\tallItems: Dictionary<Item[]>;\r\n\tcreateCostLabel: (item: Item) => string;\r\n\tonUpdateAllItems: (newItems: Dictionary<Item[]>) => void;\r\n};\r\nconst ItemPickerDialog: FC<Props> = (props: Props) => {\r\n\tconst { open, onClose, title, allItems, createCostLabel, onUpdateAllItems } = props;\r\n\r\n\tconst allPaths = Object.keys(allItems);\r\n\r\n\tconst paths = [...allPaths];\r\n\r\n\tconst pathToLabel = new Map<string,string>();\r\n\tfor (const path of paths) {\r\n\t\tconst components = path.split(\".\");\r\n\t\tconst finalComponent = components[components.length - 1];\r\n\t\tconst label = sentenceCase(finalComponent);\r\n\t\tpathToLabel.set(path, label);\r\n\t}\r\n\r\n\tconst [group, setGroup] = useState(paths[0]);\r\n\r\n\t// once the dialog is rendered the state is 'remembered' for next use which could be different data\r\n\tif (paths.find(p => p === group) === undefined) {\r\n\t\tsetGroup(paths[0]);\r\n\t}\r\n\r\n\tconst handleGroupChange = (event: ChangeEvent<any>) => {\r\n\t\tsetGroup(event.target.value);\r\n\t};\r\n\r\n\tconst handleUpdateItems = (subItems: Item[]) => {\r\n\t\tconst newAllItems: Dictionary<Item[]> = { ...allItems };\r\n\t\tnewAllItems[group] = subItems;\r\n\t\tonUpdateAllItems(newAllItems);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Dialog open={open} onClose={onClose}>\r\n\t\t\t<DialogTitle>{title}</DialogTitle>\r\n\t\t\t<DialogContent>\r\n\t\t\t\t{\r\n\t\t\t\t\tpaths.length > 1\r\n\t\t\t\t\t?\r\n\t\t\t\t\t<Select\r\n\t\t\t\t\t\tid=\"group\"\r\n\t\t\t\t\t\tvalue={group}\r\n\t\t\t\t\t\tdisplayEmpty\r\n\t\t\t\t\t\tonChange={handleGroupChange}\r\n\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpaths.map(p => (\r\n\t\t\t\t\t\t\t\t<MenuItem\r\n\t\t\t\t\t\t\t\t\tkey={p}\r\n\t\t\t\t\t\t\t\t\tvalue={p}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{pathToLabel.get(p)!}\r\n\t\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</Select>\r\n\t\t\t\t\t:\r\n\t\t\t\t\tnull\r\n\t\t\t\t}\r\n\t\t\t\t<ItemPickerSection\r\n\t\t\t\t\tlabel={pathToLabel.get(group)!}\r\n\t\t\t\t\titems={allItems[group]}\r\n\t\t\t\t\tcreateCostLabel={createCostLabel}\r\n\t\t\t\t\tonUpdateItems={handleUpdateItems}\r\n\t\t\t\t/>\r\n\t\t\t</DialogContent>\r\n\t\t</Dialog>\r\n\t);\r\n};\r\n\r\nexport default ItemPickerDialog;","import React, { FC, Fragment, useState } from \"react\";\r\nimport { Dictionary, getMatchingParents, getMaxPathDepth, getNextParentPaths } from \"../model/dictionary\";\r\nimport { Item, getItemSubset } from \"../model/item\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport ItemPickerDialog from \"./ItemPickerDialog\";\r\nimport { Menu, MenuItem } from \"@material-ui/core\";\r\nimport { createSavedItem } from \"../model/gear\";\r\nimport { getChildSet } from \"../model/dictionary\";\r\nimport { sentenceCase } from \"change-case\";\r\n\r\ntype Props = {\r\n\ttitle: string;\r\n\titems: Item[];\r\n\tallItems: Dictionary<Item[]>;\r\n\tcreateCostLabel: (item: Item) => string;\r\n\tonUpdateItems: (newItems: Item[]) => void;\r\n};\r\nconst ItemPickerButton: FC<Props> = (props: Props) => {\r\n\tconst { title, items, allItems, createCostLabel, onUpdateItems } = props;\r\n\r\n\tconst [open, setOpen] = useState(false);\r\n\tconst handleClose = () => setOpen(false);\r\n\r\n\tconst parentPathsToName = getNextParentPaths(allItems);\r\n\r\n\tconst parentPaths: string[] = [];\r\n\tfor (const parentPath of parentPathsToName.keys()) {\r\n\t\tparentPaths.push(parentPath);\r\n\t}\r\n\t\r\n\tconst [parentPath, setParentPath] = useState(parentPaths[0]);\r\n\t\r\n\tconst [menuAnchor, setMenuAnchor] = useState<HTMLButtonElement | null>(null);\r\n\r\n\tconst allChildItems = getChildSet(allItems, parentPath);\r\n\t\r\n\tconst allCountedItems: Dictionary<Item[]> = {};\r\n\tlet hasItems = false;\r\n\tfor (const path of Object.keys(allChildItems)) {\r\n\t\thasItems = true;\r\n\t\tconst localItems = [...allChildItems[path]];\r\n\t\tconst matchingItems = getItemSubset(items, parentPath);\r\n\t\tfor (const localItem of localItems) {\r\n\t\t\tconst matchingItem = matchingItems.find(i => i.name === localItem.name);\r\n\t\t\tif (matchingItem) {\r\n\t\t\t\tlocalItem.count = matchingItem.count;\r\n\t\t\t\tlocalItem.grade = matchingItem.grade;\r\n\t\t\t} else {\r\n\t\t\t\tlocalItem.count = \"0\";\r\n\t\t\t}\r\n\t\t}\r\n\t\tallCountedItems[path] = localItems;\r\n\t}\r\n\r\n\tconst handleUpdateAllItems = (newCountedItems: Dictionary<Item[]>) => {\r\n\t\tconst newItems: Item[] = [...items];\r\n\r\n\t\tfor (const path of Object.keys(newCountedItems)) {\r\n\t\t\tfor (const localItem of newCountedItems[path]) {\r\n\t\t\t\tconst includeItem = parseInt(localItem.count!) > 0;\r\n\t\t\t\tconst index = newItems.findIndex(i => i.path === path && i.name === localItem.name);\r\n\t\t\t\tif (index > -1) {\r\n\t\t\t\t\tif (includeItem) {\r\n\t\t\t\t\t\tnewItems[index] = createSavedItem(path, localItem);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnewItems.splice(index, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (includeItem) {\r\n\t\t\t\t\tnewItems.push(createSavedItem(path, localItem));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tonUpdateItems(newItems);\r\n\t};\r\n\r\n\tconst matchingParents = getMatchingParents(allItems);\r\n\tconst matchingParentPath = matchingParents.join(\".\");\r\n\tconst maxPathDepth = getMaxPathDepth(allItems);\r\n\tconst useMenu = matchingParents.length + 1 < maxPathDepth;\r\n\r\n\tconst handleMenuClick = (parentPath: string) => {\r\n\t\tsetParentPath(parentPath);\r\n\t\tsetMenuAnchor(null);\r\n\t\tsetOpen(true);\r\n\t};\r\n\r\n\tconst handleButtonClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n\t\tif (useMenu) {\r\n\t\t\tsetMenuAnchor(event.currentTarget);\r\n\t\t} else {\r\n\t\t\tsetParentPath(matchingParentPath);\r\n\t\t\tsetOpen(true);\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<IconButton\r\n\t\t\t\tonClick={handleButtonClick}\r\n\t\t\t\tcolor=\"secondary\"\r\n\t\t\t\tsize=\"medium\"\r\n\t\t\t\tdisableRipple\r\n\t\t\t>\r\n\t\t\t\t<EditIcon />\r\n\t\t\t</IconButton>\r\n\t\t\t{\r\n\t\t\t\tuseMenu ?\r\n\t\t\t\t<Menu\r\n\t\t\t\t\tanchorEl={menuAnchor}\r\n\t\t\t\t\topen={Boolean(menuAnchor)}\r\n\t\t\t\t\tonClose={() => setMenuAnchor(null)}\r\n\t\t\t\t>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tparentPaths.map(p => (\r\n\t\t\t\t\t\t\t<MenuItem key={p} onClick={() => {handleMenuClick(p)}}>\r\n\t\t\t\t\t\t\t\t{sentenceCase(parentPathsToName.get(p)!)}\r\n\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t))\r\n\t\t\t\t\t}\r\n\t\t\t\t</Menu>\r\n\t\t\t\t:\r\n\t\t\t\tnull\r\n\t\t\t}\r\n\t\t\t{\r\n\t\t\t\thasItems\r\n\t\t\t\t?\r\n\t\t\t\t<ItemPickerDialog\r\n\t\t\t\t\topen={open}\r\n\t\t\t\t\tonClose={handleClose}\r\n\t\t\t\t\ttitle={\r\n\t\t\t\t\t\tuseMenu ?\r\n\t\t\t\t\t\t`${title} - ${parentPathsToName.get(parentPath)!}`\r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\ttitle\r\n\t\t\t\t\t}\r\n\t\t\t\t\tallItems={allCountedItems}\r\n\t\t\t\t\tcreateCostLabel={createCostLabel}\r\n\t\t\t\t\tonUpdateAllItems={handleUpdateAllItems}\r\n\t\t\t\t/>\r\n\t\t\t\t:\r\n\t\t\t\tnull\r\n\t\t\t}\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default ItemPickerButton;","import React, { FC } from \"react\";\r\nimport ExpansionPanel from \"@material-ui/core/Accordion\";\r\nimport ExpansionPanelSummary from \"@material-ui/core/AccordionSummary\";\r\nimport ExpansionPanelDetails from \"@material-ui/core/AccordionDetails\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { Dictionary } from \"../model/dictionary\";\r\nimport { Item } from \"../model/item\";\r\nimport ChipCollection from \"./ChipCollection\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport ItemPickerButton from \"./ItemPickerButton\";\r\nimport { computeItemCost } from \"../model/gear\";\r\nimport { useGlobalState } from \"../context\";\r\n\r\nconst useStyles = makeStyles({\r\n    headerLabel: {\r\n        lineHeight: 3,\r\n        fontWeight: 700,\r\n    },\r\n});\r\n\r\n\r\ntype Props = {\r\n\tlabel: string;\r\n\titems: Item[];\r\n\tallItems: Dictionary<Item[]>;\r\n\tcreateItemLabel: (item: Item) => string;\r\n\tcreateItemCostLabel: (item: Item) => string;\r\n\tonUpdateItems: (newItems: Item[]) => void;\r\n};\r\nconst GroupContainer: FC<Props> = (props: Props) => {\r\n\tconst { label, items, allItems, createItemLabel, createItemCostLabel, onUpdateItems } = props;\r\n\tconst options = useGlobalState(\"selectedCharacter\").options;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tlet cost = 0;\r\n\tfor (const item of items) {\r\n\t\tcost += computeItemCost(item, allItems, options.gearLevel) * parseInt(item.count!);\r\n\t}\r\n\r\n\tconst flatItems: Item[] = [];\r\n\tfor (const path of Object.keys(allItems)) {\r\n\t\tflatItems.push(...allItems[path]);\r\n\t}\r\n\r\n\tconst handleDelete = (toDelete: Item) => {\r\n\t\tconst newItems = [...items];\r\n\t\tconst index = newItems.findIndex(i => i.name === toDelete.name);\r\n\t\tif (index < 0) {\r\n\t\t\tthrow new Error(`Could not find item '${toDelete.name}' to delete in list '${JSON.stringify(newItems)}'`);\r\n\t\t}\r\n\t\tnewItems.splice(index, 1);\r\n\t\tonUpdateItems(newItems);\r\n\t};\r\n\r\n\tconst handleUpdateItems = (newItems: Item[]) => {\r\n\t\tonUpdateItems(newItems);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<ExpansionPanel defaultExpanded={false}>\r\n\t\t\t<ExpansionPanelSummary expandIcon={<ExpandMoreIcon />} >\r\n\t\t\t\t<FormControlLabel\r\n\t\t\t\t\tonClick={(event) => event.stopPropagation()}\r\n\t\t\t\t\tonFocus={(event) => event.stopPropagation()}\r\n\t\t\t\t\tcontrol={<ItemPickerButton\r\n\t\t\t\t\t\ttitle={label}\r\n\t\t\t\t\t\titems={items}\r\n\t\t\t\t\t\tallItems={allItems}\r\n\t\t\t\t\t\tcreateCostLabel={createItemCostLabel}\r\n\t\t\t\t\t\tonUpdateItems={handleUpdateItems}\r\n\t\t\t\t\t/>}\r\n\t\t\t\t\tlabel=\"\"\r\n\t\t\t\t/>\r\n\t\t\t\t<Typography className={classes.headerLabel}>{label} ({cost})</Typography>\r\n\t\t\t</ExpansionPanelSummary>\r\n\t\t\t<ExpansionPanelDetails>\r\n\t\t\t\t<ChipCollection\r\n\t\t\t\t\tvalues={items}\r\n\t\t\t\t\tcreateChipLabel={createItemLabel}\r\n\t\t\t\t\tonDeleteValue={handleDelete}\r\n\t\t\t\t/>\r\n\t\t\t</ExpansionPanelDetails>\r\n\t\t</ExpansionPanel>\r\n\t);\r\n};\r\n\r\nexport default GroupContainer;","import React, { FC } from \"react\";\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport { Item } from \"../model/item\";\r\nimport { getItemCost } from \"../model/dictionary\";\r\nimport GroupContainer from \"./GroupContainer\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\n\r\nconst QualitiesSection: FC = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst character = useGlobalState(\"selectedCharacter\");\r\n\tconst { qualities } = character;\r\n\tconst allQualities = useGlobalState(\"allQualities\");\r\n\r\n\tconst createQualityCostLabel = (item: Item) => {\r\n\t\tconst cost = getItemCost(item, allQualities);\r\n\t\tif (cost > 0) {\r\n\t\t\treturn `+${cost}`;\r\n\t\t} else {\r\n\t\t\treturn `${cost}`;\r\n\t\t}\r\n\t}\r\n\r\n\tconst createQualityLabel = (item: Item) => {\r\n\t\tconst { name } = item;\r\n\t\tconst costLabel = createQualityCostLabel(item);\r\n\t\treturn `${name} (${costLabel})`;\r\n\t};\r\n\r\n\tconst handleUpdateQualities = (newQualities: Item[]) => {\r\n\t\tconst data: UpdateCharacterData = { ...character, qualities: newQualities };\r\n\t\tdispatch({ type: ActionType.UpdateCharacter, data });\r\n\t};\r\n\r\n\treturn (\r\n\t\t<GroupContainer\r\n\t\t\tlabel=\"Qualities\"\r\n\t\t\titems={qualities}\r\n\t\t\tallItems={allQualities}\r\n\t\t\tcreateItemLabel={createQualityLabel}\r\n\t\t\tcreateItemCostLabel={createQualityCostLabel}\r\n\t\t\tonUpdateItems={handleUpdateQualities}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport default QualitiesSection;","import React, { FC } from \"react\";\r\n\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { NamedProperty } from \"../model/character\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: \"flex\",\r\n        height: 50,\r\n    },\r\n    name: {\r\n        width: 200\r\n    },\r\n    slider: {\r\n        width: 300,\r\n        marginRight: 10,\r\n    },\r\n});\r\n\r\ntype Props = {\r\n    property: NamedProperty;\r\n    onUpdate: (property: NamedProperty) => void;\r\n    min: number;\r\n    max: number;\r\n    step: number;\r\n    formatDisplayValue: (rating: number) => string;\r\n    computeCost: (rating: number) => number;\r\n};\r\n\r\nconst Property: FC<Props> = (props: Props) => {\r\n    const { property, onUpdate, min, max, step, formatDisplayValue, computeCost } = props;\r\n    const { name, rating } = property;\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleChange = (e: React.ChangeEvent<any>, rating: number | number[]) => {\r\n        if (Array.isArray(rating)) {\r\n            throw new Error(`Property element '${e.target.id}' has an array of values instead of a single value: [${rating.join(\", \")}]`);\r\n        }\r\n        onUpdate({\r\n            name,\r\n            rating: rating\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Typography gutterBottom className={classes.name}>{name}</Typography>\r\n            <div className={classes.slider}>\r\n                <Slider\r\n                    step={step}\r\n                    min={min}\r\n                    max={max}\r\n                    value={rating}\r\n                    marks\r\n                    valueLabelDisplay=\"on\"\r\n                    onChange={handleChange}\r\n                    valueLabelFormat={(value: number, _index: number) => formatDisplayValue(value)}\r\n                />\r\n            </div>\r\n            <Typography gutterBottom>({computeCost(rating)})</Typography>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Property;","import { makeStyles } from \"@material-ui/core\";\r\nimport React, { FC } from \"react\";\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport { getProfessionalismCost, NamedProperty } from \"../model/character\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\nimport Property from \"./Property\";\r\n\r\nconst useStyles = makeStyles({\r\n\troot: {\r\n\t\tpaddingTop: 50,\r\n\t\tpaddingLeft: 16,\r\n\t},\r\n});\r\n\r\nconst Professionalism: FC = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst classes = useStyles();\r\n\tconst character = useGlobalState(\"selectedCharacter\");\r\n\tconst professionalism: NamedProperty = {\r\n\t\tname: \"Professionalism\",\r\n\t\trating: character.professionalism\r\n\t};\r\n\r\n\tconst formatDisplayValue = (rating: number): string => rating.toString();\r\n\r\n\tconst handleOnUpdate = (newProfessionalism: NamedProperty) => {\r\n\t\tconst data: UpdateCharacterData = { ...character };\r\n\t\tdata.professionalism = newProfessionalism.rating;\r\n\t\tdispatch({\r\n\t\t\ttype: ActionType.UpdateCharacter,\r\n\t\t\tdata\r\n\t\t});\r\n\t}\r\n\t\r\n\treturn (\r\n\t\t<div className={classes.root}>\r\n\t\t\t<Property\r\n\t\t\t\tproperty={professionalism}\r\n\t\t\t\tmin={0}\r\n\t\t\t\tmax={6}\r\n\t\t\t\tstep={1}\r\n\t\t\t\tformatDisplayValue={formatDisplayValue}\r\n\t\t\t\tcomputeCost={getProfessionalismCost}\r\n\t\t\t\tonUpdate={handleOnUpdate}\r\n\t\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Professionalism;","import React, { FC, Fragment } from \"react\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport { Character as CharacterData, MetaType } from \"../model/character\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\nimport { ALL_META_TYPES } from \"../data/meta-types\";\r\nimport { getMetaTypeCost } from \"../model/meta-type\";\r\nimport QualitiesSection from \"./QualitiesSection\";\r\nimport Professionalism from \"./Professionalism\";\r\n\r\nconst useStyles = makeStyles({\r\n    header: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        marginLeft: 5,\r\n        marginRight: 5,\r\n        marginBottom: 10,\r\n        alignItems: \"center\",\r\n    },\r\n    field: {\r\n        marginRight: 10,\r\n        marginTop: 20,\r\n    },\r\n    divider: {\r\n        margin: 5,\r\n    }\r\n});\r\n\r\nconst CharacterTab: FC = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const character = useGlobalState(\"selectedCharacter\");\r\n    const { name, streetName, metaType } = character;\r\n\r\n    const onCharacterUpdated = (updatedCharacter: CharacterData) => {\r\n        const data: UpdateCharacterData = updatedCharacter;\r\n        dispatch({ type: ActionType.UpdateCharacter, data });\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className={classes.header}>\r\n                <TextField id-=\"name\" label=\"Name\" value={name} onChange={e => onCharacterUpdated({ ...character, name: e.target.value})} className={classes.field} variant=\"outlined\" />\r\n                <TextField id-=\"street-name\" label=\"Street Name\" value={streetName} onChange={e => onCharacterUpdated({ ...character, streetName: e.target.value})} className={classes.field} variant=\"outlined\" />\r\n                <Select id=\"meta-type\" value={metaType} displayEmpty onChange={e => onCharacterUpdated({ ...character, metaType: e.target.value as MetaType})} className={classes.field} variant=\"outlined\">\r\n                    {ALL_META_TYPES.map(t => <MenuItem key={t} value={t}>{t} ({getMetaTypeCost(t)})</MenuItem>)}\r\n                </Select>\r\n                <Professionalism />\r\n            </div>\r\n            <QualitiesSection />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default CharacterTab;","import { Dictionary } from \"./dictionary\";\r\n\r\nexport type CustomItem = {\r\n    Name: string;\r\n    Availability?: string;\r\n    Cost?: string;\r\n};\r\n\r\nexport function getChildItems(customItems: Dictionary<CustomItem>, parentPath: string): CustomItem[] {\r\n\tconst items: CustomItem[] = [];\r\n\tfor (const path in customItems) {\r\n\t\tif (path.startsWith(parentPath)) {\r\n\t\t\titems.push(customItems[path]);\r\n\t\t}\r\n\t}\r\n\treturn items;\r\n}","import React, { FC, Fragment, useState } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { CustomItem } from \"../model/custom-item\";\r\n\r\nexport type SelectableItem = CustomItem & {\r\n\tselected: boolean;\r\n};\r\n\r\nconst useStyles = makeStyles(({\r\n\tcontent: {\r\n\t\twidth: \"100%\",\r\n\t},\r\n\theader: {\r\n\t\tdisplay: \"flex\",\r\n\t},\r\n\tname: {\r\n\t\tminWidth: 300,\r\n\t\tmaxWidth: 300,\r\n\t\ttextAlign: \"left\",\r\n\t},\r\n\tavailability: {\r\n\t\tminWidth: 100,\r\n\t\tmaxWidth: 100,\r\n\t\ttextAlign: \"center\",\r\n\t},\r\n\tcost: {\r\n\t\tminWidth: 100,\r\n\t\tmaxWidth: 100,\r\n\t\ttextAlign: \"right\",\r\n\t},\r\n\tul: {\r\n\t\tpadding: 0,\r\n\t},\r\n}));\r\n\r\ntype Props = {\r\n\topen: boolean;\r\n\tonClose: () => void;\r\n\ttitle: string;\r\n\titems: SelectableItem[];\r\n\tonItemSelectionChange: (item: SelectableItem) => void;\r\n\tincludeAvailability: boolean;\r\n\tincludeCost: boolean;\r\n\tallowNewItems: boolean;\r\n\tallowMultiSelection: boolean;\r\n};\r\nconst PickerDialog: FC<Props> = (props: Props) => {\r\n\tconst { open, onClose, title, items, onItemSelectionChange, includeAvailability, includeCost, allowNewItems, allowMultiSelection } = props;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tconst [newItemName, setNewItemName] = useState(\"\");\r\n\tconst [newItemAvailability, setNewItemAvailability] = useState(\"\");\r\n\tconst [newItemCost, setNewItemCost] = useState(\"\");\r\n\r\n\tconst onUpdateNewItem = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tconst value = event.target.value;\r\n\t\tswitch (event.target.id) {\r\n\t\t\tcase \"new-item-name\": {\r\n\t\t\t\tsetNewItemName(value);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase \"new-item-availability\": {\r\n\t\t\t\tsetNewItemAvailability(value);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase \"new-item-cost\": {\r\n\t\t\t\tsetNewItemCost(value);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tconst onCreateNewItem = () => {\r\n\t\tconst item: SelectableItem = { Name: newItemName, selected: true };\r\n\t\tif (includeAvailability) {\r\n\t\t\titem.Availability = newItemAvailability;\r\n\t\t}\r\n\t\tif (includeCost) {\r\n\t\t\titem.Cost = newItemCost;\r\n\t\t}\r\n\t\tonItemSelectionChange(item);\r\n\t\t// clear the new item fields after adding a new item (don't want fat-finger duplicates)\r\n\t\tsetNewItemName(\"\");\r\n\t\tsetNewItemAvailability(\"\");\r\n\t\tsetNewItemCost(\"\");\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Dialog open={open} onClose={onClose}>\r\n\t\t\t<DialogTitle>{title}</DialogTitle>\r\n\t\t\t<DialogContent className={classes.content}>\r\n\t\t\t\t<List>\r\n\t\t\t\t\t<ListItem key=\"header\" className={classes.header}>\r\n\t\t\t\t\t\t<Typography className={classes.name}>Name</Typography>\r\n\t\t\t\t\t\t{ includeAvailability ? <Typography className={classes.availability}>i.availability</Typography> : null }\r\n\t\t\t\t\t\t{ includeCost ? <Typography className={classes.cost}>Cost</Typography> : null }\r\n\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tallowNewItems ?\r\n\t\t\t\t\t\t<ListItem key=\"new-item\">\r\n\t\t\t\t\t\t\t<TextField id=\"new-item-name\" label=\"Custom\" value={newItemName} onChange={onUpdateNewItem} className={classes.name} variant=\"outlined\" />\r\n\t\t\t\t\t\t\t{ includeAvailability ? <TextField id=\"new-item-availability\" label=\"Availability\" value={newItemAvailability} onChange={onUpdateNewItem} className={classes.availability} variant=\"outlined\" /> : null }\r\n\t\t\t\t\t\t\t{ includeCost ? <TextField id=\"new-item-cost\" label=\"Cost\" value={newItemCost} onChange={onUpdateNewItem} className={classes.cost} variant=\"outlined\" /> : null }\r\n\t\t\t\t\t\t\t<IconButton aria-label=\"create\" onClick={onCreateNewItem} color=\"secondary\" size=\"small\">\r\n\t\t\t\t\t\t\t\t<AddIcon />\r\n\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\tnull\r\n\t\t\t\t\t}\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\titems.map(item => (\r\n\t\t\t\t\t\t\t<ListItem key={item.Name}>\r\n\t\t\t\t\t\t\t\t<ListItemText className={classes.name}>{item.Name}</ListItemText>\r\n\t\t\t\t\t\t\t\t{ includeAvailability ? <ListItemText className={classes.availability}>{item.Availability}</ListItemText> : null }\r\n\t\t\t\t\t\t\t\t{ includeCost ? <ListItemText className={classes.cost}>{item.Cost}</ListItemText> : null }\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tallowMultiSelection ?\r\n\t\t\t\t\t\t\t\t\t<Fragment>\r\n\t\t\t\t\t\t\t\t\t\t<IconButton aria-label=\"add\" onClick={() => onItemSelectionChange({ ...item, selected: true })} color=\"secondary\" size=\"small\">\r\n\t\t\t\t\t\t\t\t\t\t\t<AddIcon />\r\n\t\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t\t\t<IconButton aria-label=\"remove\" onClick={() => onItemSelectionChange({ ...item, selected: false })} disabled={!item.selected} color=\"secondary\" size=\"small\">\r\n\t\t\t\t\t\t\t\t\t\t\t<RemoveIcon />\r\n\t\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t\t</Fragment>\r\n\t\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t\t<IconButton aria-label={item.selected ? \"remove\" : \"add\"} onClick={() => onItemSelectionChange({ ...item, selected: !item.selected })} color=\"secondary\" size=\"small\">\r\n\t\t\t\t\t\t\t\t\t\t{ item.selected ? <RemoveIcon /> : <AddIcon /> }\r\n\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t\t))\r\n\t\t\t\t\t}\r\n\t\t\t\t</List>\r\n\t\t\t</DialogContent>\r\n\t\t</Dialog>\r\n\t);\r\n};\r\n\r\nexport default PickerDialog;","import React, { FC, Fragment, useState } from \"react\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PickerDialog, { SelectableItem } from \"./PickerDialog\";\r\n\r\nconst NAME_INDEX = 0;\r\nconst COST = \"Cost\";\r\nconst AVAILABILITY = \"Availability\";\r\n\r\nconst findName = (value: any): string => {\r\n\tconst nameProp = Object.keys(value)[NAME_INDEX];\r\n\tconst name = value[nameProp];\r\n\tif (name === undefined) {\r\n\t\tthrow new Error(`Could not find a name for value '${JSON.stringify(value)}'`);\r\n\t}\r\n\treturn name as string;\r\n};\r\n\r\nconst findCost = (value: any): string => {\r\n\tconst cost = value[COST];\r\n\tif (cost === undefined) {\r\n\t\t// throw new Error(`Could not find a cost for value '${JSON.stringify(value)}'`);\r\n\t\treturn \"0\";\r\n\t}\r\n\treturn cost;\r\n};\r\n\r\nconst findAvailability = (value: any): string => {\r\n\tconst availability = value[AVAILABILITY];\r\n\tif (availability === undefined) {\r\n\t\t// throw new Error(`Could not find an availability for value '${JSON.stringify(value)}'`);\r\n\t\treturn \"-\";\r\n\t}\r\n\treturn availability;\r\n};\r\n\r\nconst createSelectableItem = (value: any, selectedValueNames: string[], includeAvailability: boolean, includeCost: boolean): SelectableItem => {\r\n\tconst Name = findName(value);\r\n\tconst Availability = includeAvailability ? findAvailability(value) : undefined;\r\n\tconst Cost = includeCost ? findCost(value) : undefined;\r\n\tconst selected = selectedValueNames.find(n => n === Name) !== undefined;\r\n\treturn { Name, Cost, Availability, selected\t};\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n    editButton: {\r\n        paddingLeft: 10,\r\n    },\r\n});\r\n\r\ntype Props = {\r\n\tbreadcrums: string[];\r\n\tvalues: any[];\r\n\tselectedValueNames: string[];\r\n\taddValue: (name: string) => void;\r\n\tremoveValue: (name: string) => void;\r\n\tincludeAvailability?: boolean;\r\n\tincludeCost?: boolean;\r\n\tallowNewValues?: boolean;\r\n\tcreateValue?: (value: any) => void;\r\n\tallowMultiSelection?: boolean;\r\n};\r\nconst PickerButton: FC<Props> = (props: Props) => {\r\n\tconst { breadcrums, values, selectedValueNames, addValue, removeValue, includeAvailability=false, includeCost=false, allowNewValues: allowNewItems=false, createValue, allowMultiSelection=false } = props;\r\n\t\r\n\tconst classes = useStyles();\r\n\r\n\tconst [open, setOpen] = useState(false);\r\n\tconst onOpen = () => setOpen(true);\r\n\tconst onClose = () => setOpen(false);\r\n\r\n\tconst title = breadcrums.join(\" - \");\r\n\r\n\tconst items = values.map(v => createSelectableItem(v, selectedValueNames, includeAvailability, includeCost));\r\n\r\n\tconst onItemSelectionChange = (item: SelectableItem) => {\r\n\t\tconst { Name, Availability, Cost, selected } = item;\r\n\t\tif (selected) {\r\n\t\t\taddValue(Name);\r\n\t\t\tif (values.find(v => findName(v) === Name) === undefined) {\r\n\t\t\t\t// new item\r\n\t\t\t\tconst value = { Name, Availability, Cost };\r\n\t\t\t\tif (!createValue) {\r\n\t\t\t\t\tthrow new Error(`Attempting to create new item '${JSON.stringify(value)}' with no createValue prop`);\r\n\t\t\t\t}\r\n\t\t\t\tcreateValue(value);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tremoveValue(Name);\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<IconButton aria-label=\"add\" onClick={onOpen} color=\"secondary\" size=\"medium\" className={classes.editButton} disableRipple>\r\n\t\t\t\t<EditIcon />\r\n\t\t\t</IconButton>\r\n\t\t\t<PickerDialog\r\n\t\t\t\topen={open}\r\n\t\t\t\tonClose={onClose}\r\n\t\t\t\ttitle={title}\r\n\t\t\t\titems={items}\r\n\t\t\t\tonItemSelectionChange={onItemSelectionChange}\r\n\t\t\t\tincludeAvailability={includeAvailability}\r\n\t\t\t\tincludeCost={includeCost}\r\n\t\t\t\tallowNewItems={allowNewItems}\r\n\t\t\t\tallowMultiSelection={allowMultiSelection}\r\n\t\t\t/>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default PickerButton;","import React, { FC } from \"react\";\r\n\r\nimport { Skill as SkillData } from \"../model/character\";\r\nimport Property from \"./Property\";\r\n\r\ntype Props = {\r\n    skill: SkillData;\r\n\tonUpdate: (skill: SkillData) => void;\r\n\tcomputeCost: (rating: number) => number;\r\n};\r\n\r\nconst Skill: FC<Props> = (props: Props) => {\r\n    const { skill, onUpdate, computeCost } = props;\r\n\r\n    return (\r\n        <Property\r\n            property={skill}\r\n            onUpdate={onUpdate}\r\n            min={1}\r\n            max={7}\r\n            step={2}\r\n            formatDisplayValue={value => value.toString()}\r\n            computeCost={computeCost}\r\n            />\r\n    );\r\n}\r\n\r\nexport default Skill;","import React, { FC, Fragment } from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ExpansionPanel from \"@material-ui/core/Accordion\";\r\nimport ExpansionPanelSummary from \"@material-ui/core/AccordionSummary\";\r\nimport ExpansionPanelDetails from \"@material-ui/core/AccordionDetails\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { Skill as SkillData } from \"../model/character\";\r\nimport { CustomItem, getChildItems } from \"../model/custom-item\";\r\nimport { AddCustomItemData, ActionType } from \"../reducer\";\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport PickerButton from \"./PickerButton\";\r\nimport Skill from \"./Skill\";\r\n\r\nconst useStyles = makeStyles({\r\n    header: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        marginBottom: 20,\r\n        paddingLeft: 16,\r\n        paddingTop: 12,\r\n    },\r\n    headerLabel: {\r\n        lineHeight: 3,\r\n        fontWeight: 700,\r\n    },\r\n});\r\n\r\ntype Props = {\r\n    breadcrums: string[];\r\n\tskills: SkillData[];\r\n\tallSkills: CustomItem[];\r\n    headerLabel: string;\r\n    computeSkillCost: (rating: number) => number;\r\n\tonSkillsUpdated: (updatedSkills: SkillData[]) => void;\r\n};\r\nconst SkillList: FC<Props> = (props: Props) => {\r\n\tconst { breadcrums, skills, allSkills, headerLabel, computeSkillCost, onSkillsUpdated } = props;\r\n\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const customItems = useGlobalState(\"customItems\");\r\n\r\n    skills.sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n    const parentPath = breadcrums.join(\".\");\r\n    allSkills.push(...getChildItems(customItems, parentPath));\r\n    allSkills.sort((a, b) => a.Name.localeCompare(b.Name));\r\n\r\n    const onSkillUpdate = (skill: SkillData) => {\r\n        const newSkills = [ ...skills ];\r\n        const skillIndex = skills.findIndex(s => s.name === skill.name);\r\n        if (skillIndex > -1) {\r\n            if (skill.rating > 0) {\r\n                newSkills[skillIndex] = skill;\r\n            } else {\r\n                newSkills.splice(skillIndex, 1);\r\n            }\r\n        } else if (skill.rating > 0) {\r\n            newSkills.push(skill);\r\n        }\r\n        onSkillsUpdated(newSkills);\r\n    };\r\n    \r\n    const addSkill = (name: string) => {\r\n        onSkillUpdate({ name, rating: 1 });\r\n    };\r\n\r\n    const removeSkill = (name: string) => {\r\n        onSkillUpdate({ name, rating: -1 });\r\n    };\r\n\r\n    const createNewSkill = (item: CustomItem) => {\r\n        const path = `${parentPath}.${item.Name}`;\r\n        const data: AddCustomItemData = { path, item: item };\r\n        dispatch({ type: ActionType.AddCustomItem, data });\r\n    };\r\n\r\n\treturn (\r\n        <Fragment>\r\n            <ExpansionPanel defaultExpanded={false}>\r\n                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\r\n                    <FormControlLabel\r\n                        onClick={(event) => event.stopPropagation()}\r\n                        onFocus={(event) => event.stopPropagation()}\r\n                        control={<PickerButton\r\n                            breadcrums={breadcrums}\r\n                            values={allSkills}\r\n                            selectedValueNames={skills.map(s => s.name)}\r\n                            addValue={addSkill}\r\n                            removeValue={removeSkill}\r\n                            allowNewValues\r\n                            createValue={createNewSkill}\r\n                        />}\r\n                        label=\"\"\r\n                    />\r\n                    <Typography className={classes.headerLabel}>{headerLabel}</Typography>\r\n                </ExpansionPanelSummary>\r\n                <ExpansionPanelDetails>\r\n                    <List>\r\n                    {\r\n                        skills.map(s => (\r\n                            <ListItem key={s.name}>\r\n                                <Skill skill={s} onUpdate={onSkillUpdate} computeCost={computeSkillCost} />\r\n                            </ListItem>\r\n                        ))\r\n                    }\r\n                    </List>\r\n                </ExpansionPanelDetails>\r\n            </ExpansionPanel>\r\n        </Fragment>\r\n\t);\r\n};\r\n\r\nexport default SkillList;","import React, { FC } from \"react\";\r\nimport { useDispatch, useGlobalState } from \"../context\"\r\nimport { Skill as SkillData } from \"../model/character\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\nimport { getActiveSkillsCost, getActiveSkillCost } from \"../model/skills\";\r\nimport SkillList from \"./SkillList\";\r\n\r\nconst breadcrums = [\"Skills\", \"Active\"];\r\n\r\nconst ActiveSkillList: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const character = useGlobalState(\"selectedCharacter\");\r\n    const allSkills = useGlobalState(\"allSkills\");\r\n\r\n    const { activeSkills } = character;\r\n\r\n    const activeSkillsCost = getActiveSkillsCost(activeSkills);\r\n    const headerLabel = `Active Skills (${activeSkillsCost})`;\r\n\r\n    const allActiveSkills = [...allSkills.active];\r\n\r\n    const onSkillsUpdated = (activeSkills: SkillData[]) => {\r\n        const data: UpdateCharacterData = { ...character, activeSkills };\r\n        dispatch({ type: ActionType.UpdateCharacter, data });\r\n    }\r\n    return (\r\n        <SkillList\r\n            breadcrums={breadcrums}\r\n            skills={activeSkills}\r\n            allSkills={allActiveSkills}\r\n            headerLabel={headerLabel}\r\n            computeSkillCost={getActiveSkillCost}\r\n            onSkillsUpdated={onSkillsUpdated}\r\n        />\r\n    );\r\n}\r\n\r\nexport default ActiveSkillList;","import React, { FC } from \"react\";\r\nimport { useDispatch, useGlobalState } from \"../context\"\r\nimport { Skill as SkillData } from \"../model/character\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\nimport { getKnowledgeSkillsCost, getFreeKnowledgeSkillPoints, getKnowledgeSkillCost } from \"../model/skills\";\r\nimport SkillList from \"./SkillList\";\r\n\r\nconst breadcrums = [\"Skills\", \"Knowledge\"];\r\n\r\nconst KnowledgeSkillList: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const character = useGlobalState(\"selectedCharacter\");\r\n\tconst allSkills = useGlobalState(\"allSkills\");\r\n\r\n\tconst { knowledgeSkills } = character;\r\n\r\n\tconst knowledgeSkillsCost = getKnowledgeSkillsCost(knowledgeSkills);\r\n    const freeKnowledgeSkillPoints = getFreeKnowledgeSkillPoints(character);\r\n    const totalCost = knowledgeSkillsCost - freeKnowledgeSkillPoints;\r\n    const headerLabel = `Knowledge Skills (${knowledgeSkillsCost} - ${freeKnowledgeSkillPoints} = ${totalCost})`;\r\n\r\n    const allKnowledgeSkills = [...allSkills.knowledge];\r\n\r\n    const onSkillsUpdated = (knowledgeSkills: SkillData[]) => {\r\n        const data: UpdateCharacterData = { ...character, knowledgeSkills };\r\n        dispatch({ type: ActionType.UpdateCharacter, data });\r\n    };\r\n\r\n    return (\r\n        <SkillList\r\n            breadcrums={breadcrums}\r\n            skills={knowledgeSkills}\r\n            allSkills={allKnowledgeSkills}\r\n            headerLabel={headerLabel}\r\n            computeSkillCost={getKnowledgeSkillCost}\r\n            onSkillsUpdated={onSkillsUpdated}\r\n        />\r\n    );\r\n}\r\n\r\nexport default KnowledgeSkillList;","import React, { FC } from \"react\";\r\nimport { useDispatch, useGlobalState } from \"../context\"\r\nimport { Skill as SkillData } from \"../model/character\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\nimport { getKnowledgeSkillsCost, getKnowledgeSkillCost } from \"../model/skills\";\r\nimport SkillList from \"./SkillList\";\r\n\r\nconst breadcrums = [\"Skills\", \"Language\"];\r\n\r\nconst LanguageSkillList: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const character = useGlobalState(\"selectedCharacter\");\r\n\tconst allSkills = useGlobalState(\"allSkills\");\r\n\r\n\tconst { languageSkills } = character;\r\n\r\n\tconst languageSkillsCost = getKnowledgeSkillsCost(languageSkills);\r\n    const headerLabel = `Language Skills (${languageSkillsCost}) + Native`;\r\n\r\n    const allLanguageSkills = [...allSkills.language];\r\n\r\n    const onSkillsUpdated = (languageSkills: SkillData[]) => {\r\n        const data: UpdateCharacterData = { ...character, languageSkills };\r\n        dispatch({ type: ActionType.UpdateCharacter, data });\r\n    };\r\n\r\n    return (\r\n        <SkillList\r\n            breadcrums={breadcrums}\r\n            skills={languageSkills}\r\n            allSkills={allLanguageSkills}\r\n            headerLabel={headerLabel}\r\n            computeSkillCost={getKnowledgeSkillCost}\r\n            onSkillsUpdated={onSkillsUpdated}\r\n        />\r\n    );\r\n}\r\n\r\nexport default LanguageSkillList;","import React, { FC, Fragment } from \"react\";\r\nimport ActiveSkillList from \"./ActiveSkillList\";\r\nimport KnowledgeSkillList from \"./KnowledgeSkillList\";\r\nimport LanguageSkillList from \"./LanguageSkillList\";\r\n\r\nconst SkillsTab: FC = () => {\r\n    return (\r\n        <Fragment>\r\n            <ActiveSkillList />\r\n            <KnowledgeSkillList />\r\n            <LanguageSkillList />\r\n        </Fragment>\r\n    )\r\n};\r\n\r\nexport default SkillsTab;","import React, { FC } from \"react\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport ShoppingCartIcon from \"@material-ui/icons/ShoppingCart\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useGlobalState } from \"../context\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        paddingLeft: 20,\r\n        paddingRight: 20,\r\n    },\r\n    badge: {\r\n        marginLeft: 50,\r\n    },\r\n});\r\n\r\nconst Karma: FC = () => {\r\n    const classes = useStyles();\r\n    const karma = useGlobalState(\"karma\");\r\n    const { total, spent, available } = karma;\r\n    return (\r\n        <div className={classes.root}>\r\n            <Badge className={classes.badge} badgeContent={total} color=\"primary\" max={999} showZero>\r\n                <ShoppingCartIcon />\r\n            </Badge>\r\n            <Badge className={classes.badge} badgeContent={spent} color=\"secondary\" max={999} showZero>\r\n                <ShoppingCartIcon />\r\n            </Badge>\r\n            <Badge className={classes.badge} badgeContent={available} color=\"primary\" max={999} showZero>\r\n                <ShoppingCartIcon />\r\n            </Badge>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Karma;","import React, { FC } from \"react\";\r\n\r\nimport { Attribute as AttributeData, MetaType } from \"../model/character\";\r\nimport { getAttributeMetaTypeModifier, getAttributeCost } from \"../model/attributes\";\r\nimport Property from \"./Property\";\r\n\r\ntype Props = {\r\n    attribute: AttributeData;\r\n    metaType: MetaType;\r\n    onUpdate: (attribute: AttributeData) => void;\r\n};\r\n\r\nconst Attribute: FC<Props> = (props: Props) => {\r\n    const { attribute, metaType, onUpdate } = props;\r\n    const modifier = getAttributeMetaTypeModifier(metaType, attribute.name);\r\n\r\n    const formatDisplayValue = (rating: number): string => (rating + modifier).toString();\r\n\r\n    return (\r\n        <Property property={attribute}\r\n        onUpdate={onUpdate}\r\n        min={1}\r\n        max={7}\r\n        step={1}\r\n        formatDisplayValue={formatDisplayValue}\r\n        computeCost={getAttributeCost}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Attribute;","import React, { FC, Fragment } from \"react\";\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Attribute from \"./Attribute\";\r\nimport { Attribute as AttributeData, isAwakened } from \"../model/character\";\r\nimport { ActionType } from \"../reducer\";\r\nimport { getAttributesCost } from \"../model/attributes\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n    header: {\r\n        marginBottom: 20,\r\n        paddingLeft: 16,\r\n        paddingTop: 12,\r\n        fontWeight: 700,\r\n    }\r\n});\r\n\r\nconst AttributeList: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const character = useGlobalState(\"selectedCharacter\");\r\n    const classes = useStyles();\r\n\r\n    const { attributes, metaType } = character;\r\n\r\n    const filteredAttributes = attributes.filter(a => isAwakened(character) || a.name !== \"Magic\");\r\n\r\n    const attributesCost = getAttributesCost(character);\r\n\r\n    const onUpdate = (attribute: AttributeData) => {\r\n        const newAttributes = [ ...attributes ];\r\n        const attributeIndex = newAttributes.findIndex(a => a.name === attribute.name);\r\n        newAttributes[attributeIndex] = attribute;\r\n        dispatch({\r\n            type: ActionType.UpdateCharacter,\r\n            data: { ...character, attributes: newAttributes }\r\n        });\r\n    };\r\n    return (\r\n        <Fragment>\r\n            <Typography className={classes.header}>Attributes ({attributesCost})</Typography>\r\n            <List>\r\n                {\r\n                    filteredAttributes.map(a => (\r\n                        <ListItem key={a.name}>\r\n                            <Attribute attribute={a} metaType={metaType} onUpdate={onUpdate} />\r\n                        </ListItem>\r\n                    ))\r\n                }\r\n            </List>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default AttributeList;","import React, { FC } from \"react\";\r\nimport AttributeList from \"./AttributeList\";\r\n\r\nconst AttributesTab: FC = () => {\r\n\treturn (\r\n\t\t<AttributeList />\r\n\t);\r\n};\r\n\r\nexport default AttributesTab;","import React, { FC, Fragment } from \"react\";\r\nimport ExpansionPanel from \"@material-ui/core/Accordion\";\r\nimport ExpansionPanelSummary from \"@material-ui/core/AccordionSummary\";\r\nimport ExpansionPanelDetails from \"@material-ui/core/AccordionDetails\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { Contact as ContactData, getContactCost, getContactRatingCost } from \"../model/contact\";\r\nimport Property from \"./Property\";\r\nimport { NamedProperty } from \"../model/character\";\r\nimport { useGlobalState } from \"../context\";\r\nimport { getMaxConnection } from \"../model/create-options\";\r\n\r\nconst useStyles = makeStyles({\r\n\theaderLabel: {\r\n\t\tfontWeight: 700,\r\n\t},\r\n\tdetails: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"column\",\r\n\t},\r\n\trating: {\r\n\t\tmarginTop: 30,\r\n\t}\r\n});\r\n\r\ntype Props = {\r\n\tcontact: ContactData;\r\n\tonUpdate: (contact: ContactData) => void;\r\n};\r\nconst Contact: FC<Props> = (props: Props) => {\r\n\tconst { contact, onUpdate } = props;\r\n\r\n\tconst options = useGlobalState(\"selectedCharacter\").options;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tconst contactCost = getContactCost(contact);\r\n\r\n\tconst connection: NamedProperty = { name: \"Connection\", rating: contact.connection };\r\n\tconst onUpdateConnection = (updatedConnection: NamedProperty) => {\r\n\t\tconst updatedContact = { ...contact, connection: updatedConnection.rating };\r\n\t\tonUpdate(updatedContact);\r\n\t};\r\n\tconst loyalty: NamedProperty = { name: \"Loyalty\", rating: contact.loyalty };\r\n\tconst onUpdateLoyalty = (updatedLoyalty: NamedProperty) => {\r\n\t\tconst updatedContact = { ...contact, loyalty: updatedLoyalty.rating };\r\n\t\tonUpdate(updatedContact);\r\n\t};\r\n\r\n\tconst maxConnection = getMaxConnection(options.connectionLevel);\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<ExpansionPanel defaultExpanded={false}>\r\n\t\t\t\t<ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\r\n\t\t\t\t\t<Typography className={classes.headerLabel}>{contact.name} ({contactCost})</Typography>\r\n\t\t\t\t</ExpansionPanelSummary>\r\n\t\t\t\t<ExpansionPanelDetails>\r\n\t\t\t\t\t<div className={classes.details}>\r\n\t\t\t\t\t\t<div className={classes.rating}>\r\n\t\t\t\t\t\t\t<Property\r\n\t\t\t\t\t\t\t\tproperty={connection}\r\n\t\t\t\t\t\t\t\tonUpdate={onUpdateConnection}\r\n\t\t\t\t\t\t\t\tmin={1}\r\n\t\t\t\t\t\t\t\tmax={maxConnection}\r\n\t\t\t\t\t\t\t\tstep={2}\r\n\t\t\t\t\t\t\t\tformatDisplayValue={(value => value.toString())}\r\n\t\t\t\t\t\t\t\tcomputeCost={getContactRatingCost}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className={classes.rating}>\r\n\t\t\t\t\t\t\t<Property\r\n\t\t\t\t\t\t\t\tproperty={loyalty}\r\n\t\t\t\t\t\t\t\tonUpdate={onUpdateLoyalty}\r\n\t\t\t\t\t\t\t\tmin={1}\r\n\t\t\t\t\t\t\t\tmax={5}\r\n\t\t\t\t\t\t\t\tstep={2}\r\n\t\t\t\t\t\t\t\tformatDisplayValue={(value => value.toString())}\r\n\t\t\t\t\t\t\t\tcomputeCost={getContactRatingCost}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</ExpansionPanelDetails>\r\n\t\t\t</ExpansionPanel>\r\n\t\t</Fragment>\r\n\t);\r\n}\r\n\r\nexport default Contact;","import React, { FC, Fragment } from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport PickerButton from \"./PickerButton\";\r\nimport Contact from \"./Contact\";\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport { Contact as ContactData, getAllContactsCost, getFreeContactPoints } from \"../model/contact\";\r\nimport { UpdateCharacterData, ActionType, AddCustomItemData } from \"../reducer\";\r\nimport { getChildItems, CustomItem } from \"../model/custom-item\";\r\n\r\nconst useStyles = makeStyles({\r\n\theader: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"row\",\r\n\t},\r\n\theaderLabel: {\r\n\t\tlineHeight: 3,\r\n\t\tfontWeight: 700,\r\n\t},\r\n});\r\n\r\nconst breadcrums = [\"Contacts\"];\r\nconst parentPath = breadcrums.join(\".\");\r\n\r\nconst ContactList: FC = () => {\r\n\tconst classes = useStyles();\r\n\tconst dispatch = useDispatch();\r\n\tconst character = useGlobalState(\"selectedCharacter\");\r\n\tconst allContacts = useGlobalState(\"allContacts\");\r\n\tconst customItems = useGlobalState(\"customItems\");\r\n\tconst { contacts: selectedContacts } = character;\r\n\r\n\tselectedContacts.sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n\tconst contactsCost = getAllContactsCost(character);\r\n\tconst freeContactPoints = getFreeContactPoints(character);\r\n    const totalCost = Math.max(contactsCost - freeContactPoints, 0);\r\n\tconst headerLabel = `Contacts (${contactsCost} - ${freeContactPoints} = ${totalCost})`;\r\n\t\r\n\tallContacts.push(...getChildItems(customItems, parentPath));\r\n    allContacts.sort((a, b) => a.Name.localeCompare(b.Name));\r\n\r\n\tconst onContactUpdate = (contact: ContactData) => {\r\n\t\tconst newContacts = [...selectedContacts];\r\n\t\tconst contactIndex = selectedContacts.findIndex(s => s.name === contact.name);\r\n\t\tif (contactIndex > -1) {\r\n\t\t\tif (contact.connection > 0 && contact.loyalty > 0) {\r\n\t\t\t\tnewContacts[contactIndex] = contact;\r\n\t\t\t} else {\r\n\t\t\t\tnewContacts.splice(contactIndex, 1);\r\n\t\t\t}\r\n\t\t} else if (contact.connection > 0 && contact.loyalty > 0) {\r\n\t\t\tnewContacts.push(contact);\r\n\t\t}\r\n\t\tconst data: UpdateCharacterData = { ...character, contacts: newContacts };\r\n\t\tdispatch({ type: ActionType.UpdateCharacter, data });\r\n\t};\r\n\r\n\tconst addContact = (name: string) => {\r\n\t\tonContactUpdate({ name, connection: 1, loyalty: 1 });\r\n\t};\r\n\r\n\tconst removeContact = (name: string) => {\r\n\t\tonContactUpdate({ name, connection: -1, loyalty: -1 });\r\n\t};\r\n\r\n\tconst createNewContact = (item: CustomItem) => {\r\n        const path = `${parentPath}.${item.Name}`;\r\n        const data: AddCustomItemData = { path, item: item };\r\n        dispatch({ type: ActionType.AddCustomItem, data });\r\n    };\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<div className={classes.header}>\r\n\t\t\t\t<PickerButton\r\n\t\t\t\t\tbreadcrums={breadcrums}\r\n\t\t\t\t\tvalues={allContacts}\r\n\t\t\t\t\tselectedValueNames={selectedContacts.map(s => s.name)}\r\n\t\t\t\t\taddValue={addContact}\r\n\t\t\t\t\tremoveValue={removeContact}\r\n\t\t\t\t\tallowNewValues\r\n\t\t\t\t\tcreateValue={createNewContact}\r\n\t\t\t\t/>\r\n\t\t\t\t<Typography className={classes.headerLabel}>{headerLabel}</Typography>\r\n\t\t\t</div>\r\n\t\t\t<List>\r\n\t\t\t\t{\r\n\t\t\t\t\tselectedContacts.map(c => (\r\n\t\t\t\t\t\t<Contact key={c.name} contact={c} onUpdate={onContactUpdate} />\r\n\t\t\t\t\t))\r\n\t\t\t\t}\r\n\t\t\t\t</List>\r\n\t\t</Fragment>\r\n\t);\r\n}\r\n\r\nexport default ContactList;","import React, { FC } from \"react\";\r\nimport ContactList from \"./ContactList\";\r\n\r\nconst ContactsTab: FC = () => {\r\n\treturn (\r\n\t\t<ContactList />\r\n\t);\r\n}\r\n\r\nexport default ContactsTab;","import { makeStyles } from \"@material-ui/core\";\r\nimport React, { FC } from \"react\";\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport { NamedProperty } from \"../model/character\";\r\nimport { getInitiateGradeCost } from \"../model/magic\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\nimport Property from \"./Property\";\r\n\r\nconst useStyles = makeStyles({\r\n\troot: {\r\n\t\tpaddingTop: 50,\r\n\t\tpaddingLeft: 16,\r\n\t},\r\n});\r\n\r\nconst InitiateGrade: FC = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst classes = useStyles();\r\n\tconst character = useGlobalState(\"selectedCharacter\");\r\n\tconst initiateGrade: NamedProperty = {\r\n\t\tname: \"Initiate Grade\",\r\n\t\trating: character.initiateGrade\r\n\t};\r\n\r\n\tconst formatDisplayValue = (rating: number): string => `${rating}`;\r\n\r\n\tconst handleOnUpdate = (newInitiateGrade: NamedProperty) => {\r\n\t\tconst data: UpdateCharacterData = { ...character };\r\n\t\tdata.initiateGrade = newInitiateGrade.rating;\r\n\t\tdispatch({\r\n\t\t\ttype: ActionType.UpdateCharacter,\r\n\t\t\tdata\r\n\t\t});\r\n\t}\r\n\t\r\n\treturn (\r\n\t\t<div className={classes.root}>\r\n\t\t\t<Property\r\n\t\t\t\tproperty={initiateGrade}\r\n\t\t\t\tmin={0}\r\n\t\t\t\tmax={6}\r\n\t\t\t\tstep={1}\r\n\t\t\t\tformatDisplayValue={formatDisplayValue}\r\n\t\t\t\tcomputeCost={getInitiateGradeCost}\r\n\t\t\t\tonUpdate={handleOnUpdate}\r\n\t\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default InitiateGrade;","import React, { FC, Fragment } from \"react\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { useGlobalState, useDispatch } from \"../context\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\nimport { Item } from \"../model/item\";\r\nimport GroupContainer from \"./GroupContainer\";\r\nimport { AdeptPower, computeAdeptPowerCost } from \"../model/magic\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport InitiateGrade from \"./InitiateGrade\";\r\nimport { Dictionary } from \"../model/dictionary\";\r\n\r\nconst useStyles = makeStyles({\r\n\theader: {\r\n\t\tmarginTop: 10,\r\n\t\tmarginLeft: 5,\r\n\t},\r\n\tsection: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"row\",\r\n\t\tmarginBottom: 10,\r\n\t},\r\n});\r\n\r\nconst MagicTab: FC = () => {\r\n\tconst classes = useStyles();\r\n\tconst dispatch = useDispatch();\r\n\tconst character = useGlobalState(\"selectedCharacter\");\r\n\tconst { spells, powers, metaMagics } = character;\r\n\tconst allSpells = useGlobalState(\"allSpells\");\r\n\tconst allPowers = useGlobalState(\"allPowers\");\r\n\r\n\tconst allAdeptPowers: Dictionary<AdeptPower[]> = {};\r\n\tconst allMetaMagics: Dictionary<AdeptPower[]> = {};\r\n\tfor (const path in allPowers) {\r\n\t\tif (path === \"powers.adept-powers\") {\r\n\t\t\tallAdeptPowers[path] = [...allPowers[path]];\r\n\t\t} else if (path === \"powers.metamagic\") {\r\n\t\t\tallMetaMagics[path] = [...allPowers[path]];\r\n\t\t} else {\r\n\t\t\tthrow new Error(`Unknown group of powers '${path}'`);\r\n\t\t}\r\n\t}\r\n\r\n\tconst isMagician = character.qualities.find(q => q.name === \"Magician\");\r\n\tconst isAdept = character.qualities.find(q => q.name === \"Adept\");\r\n\r\n\tconst createSpellCostLabel = (_item: Item) => {\r\n\t\treturn \"5\";\r\n\t};\r\n\r\n\tconst createSpellLabel = (item: Item) => {\r\n\t\tconst { name } = item;\r\n\t\treturn `${name} (5)`;\r\n\t};\r\n\r\n\tconst handleUpdateSpells = (newSpells: Item[]) => {\r\n\t\tconst data: UpdateCharacterData = { ...character, spells: newSpells };\r\n\t\tdispatch({ type: ActionType.UpdateCharacter, data });\r\n\t};\r\n\r\n\tconst createPowerCostLabel = (item: Item) => {\r\n\t\tconst cost = computeAdeptPowerCost(item, allPowers);\r\n\t\treturn `${cost}`;\r\n\t};\r\n\r\n\tconst createPowerLabel = (item: Item) => {\r\n\t\tconst { name } = item;\r\n\t\tconst cost = createPowerCostLabel(item);\r\n\t\treturn `${name} (${cost})`;\r\n\t};\r\n\r\n\tconst handleUpdatePowers = (newPowers: Item[]) => {\r\n\t\tconst data: UpdateCharacterData = { ...character, powers: newPowers };\r\n\t\tdispatch({ type: ActionType.UpdateCharacter, data });\r\n\t};\r\n\r\n\tconst createMetaMagicCostLabel = (_item: Item) => {\r\n\t\treturn \"10\";\r\n\t};\r\n\r\n\tconst createMetaMagicLabel = (item: Item) => {\r\n\t\tconst { name } = item;\r\n\t\treturn `${name} (10)`;\r\n\t};\r\n\r\n\tconst handleUpdateMetaMagic = (newMetaMagics: Item[]) => {\r\n\t\tconst data: UpdateCharacterData = { ...character, metaMagics: newMetaMagics };\r\n\t\tdispatch({ type: ActionType.UpdateCharacter, data });\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t{\r\n\t\t\t\tisMagician ?\r\n\t\t\t\t<GroupContainer\r\n\t\t\t\t\tlabel=\"Spells\"\r\n\t\t\t\t\titems={spells}\r\n\t\t\t\t\tallItems={allSpells}\r\n\t\t\t\t\tcreateItemLabel={createSpellLabel}\r\n\t\t\t\t\tcreateItemCostLabel={createSpellCostLabel}\r\n\t\t\t\t\tonUpdateItems={handleUpdateSpells}\r\n\t\t\t\t/>\r\n\t\t\t\t:\r\n\t\t\t\tnull\r\n\t\t\t}\r\n\t\t\t{\r\n\t\t\t\tisAdept ?\r\n\t\t\t\t<GroupContainer\r\n\t\t\t\t\tlabel=\"Powers\"\r\n\t\t\t\t\titems={powers}\r\n\t\t\t\t\tallItems={allAdeptPowers}\r\n\t\t\t\t\tcreateItemLabel={createPowerLabel}\r\n\t\t\t\t\tcreateItemCostLabel={createPowerCostLabel}\r\n\t\t\t\t\tonUpdateItems={handleUpdatePowers}\r\n\t\t\t\t/>\r\n\t\t\t\t:\r\n\t\t\t\tnull\r\n\t\t\t}\r\n\t\t\t<Typography className={classes.header}>Initiation</Typography>\r\n\t\t\t<Divider />\r\n\t\t\t<InitiateGrade />\r\n\t\t\t<GroupContainer\r\n\t\t\t\tlabel=\"Metamagics\"\r\n\t\t\t\titems={metaMagics}\r\n\t\t\t\tallItems={allMetaMagics}\r\n\t\t\t\tcreateItemLabel={createMetaMagicLabel}\r\n\t\t\t\tcreateItemCostLabel={createMetaMagicCostLabel}\r\n\t\t\t\tonUpdateItems={handleUpdateMetaMagic}\r\n\t\t\t/>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default MagicTab;","import React, { FC, Fragment } from \"react\";\r\nimport { useGlobalState, useDispatch } from \"../context\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\nimport { getChildNames, getChildSet } from \"../model/dictionary\";\r\nimport GroupContainer from \"./GroupContainer\";\r\nimport { Item, getItemSubset } from \"../model/item\";\r\nimport { sentenceCase } from \"change-case\";\r\nimport { gearRoot, computeItemCost, Grade } from \"../model/gear\";\r\n\r\nconst GearTab: FC = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst character = useGlobalState(\"selectedCharacter\");\r\n\tconst options = character.options;\r\n\tconst { gear } = character;\r\n\tconst allGear = useGlobalState(\"allGear\");\r\n\r\n\tconst createGearCostLabel = (item: Item) => {\r\n\t\tconst cost = computeItemCost(item, allGear, options.gearLevel);\r\n\t\treturn `¥${cost}`;\r\n\t};\r\n\r\n\tconst createGearLabel= (item: Item) => {\r\n\t\tconst { name } = item;\r\n\t\tconst costLabel = createGearCostLabel(item);\r\n\t\tlet label = `${name} (${costLabel})`;\r\n\t\tconst augmentation = item.path.startsWith(`${gearRoot}.augmentations`);\r\n\t\tif (augmentation) {\r\n\t\t\tlabel += ` [${item.grade || Grade.Alpha}: ${item.essence || 0}E]`;\r\n\t\t}\r\n\t\treturn label;\r\n\t};\r\n\r\n\tconst handleUpdateGear = (name: string, newSubGear: Item[]) => {\r\n\t\tconst newGear = gear.filter(g => !g.path.startsWith(`${gearRoot}.${name}`));\r\n\t\tnewGear.push(...newSubGear);\r\n\t\tconst data: UpdateCharacterData = { ...character, gear: newGear };\r\n\t\tdispatch({ type: ActionType.UpdateCharacter, data });\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t{\r\n\t\t\t\tgetChildNames(allGear, gearRoot).map(name =>\r\n\t\t\t\t\t<GroupContainer\r\n\t\t\t\t\t\tkey={name}\r\n\t\t\t\t\t\tlabel={sentenceCase(name)}\r\n\t\t\t\t\t\titems={getItemSubset(gear, `${gearRoot}.${name}`)}\r\n\t\t\t\t\t\tallItems={getChildSet(allGear, `${gearRoot}.${name}`)}\r\n\t\t\t\t\t\tcreateItemLabel={createGearLabel}\r\n\t\t\t\t\t\tcreateItemCostLabel={createGearCostLabel}\r\n\t\t\t\t\t\tonUpdateItems={newItems => handleUpdateGear(name, newItems)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default GearTab;","import React, { FC } from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n\troot: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"row\",\r\n\t\tmarginLeft: 10,\r\n\t\tmarginTop: 10,\r\n\t},\r\n\tname: {\r\n\t\tlineHeight: \"40px\"\r\n\t},\r\n\tvalue: {\r\n\t\tmarginLeft: 5,\r\n\t\tcolor: theme.palette.getContrastText(theme.palette.primary.main),\r\n\t\tbackgroundColor: theme.palette.primary.main,\r\n\t}\r\n}));\r\n\r\ntype Props = {\r\n\tname: string;\r\n\tvalue: number;\r\n}\r\nconst ReadOnlyProperty: FC<Props> = (props: Props) => {\r\n\tconst { name, value } = props;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\treturn (\r\n\t\t<div className={classes.root}>\r\n\t\t\t<Typography className={classes.name}>{name}</Typography>\r\n\t\t\t<Avatar className={classes.value}>{value}</Avatar>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ReadOnlyProperty;","import React, { FC } from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport { Button, ButtonGroup, makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n\troot: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"row\",\r\n\t\tmarginLeft: 10,\r\n\t\tmarginTop: 10,\r\n\t\talignItems: \"center\",\r\n\t\tmarginRight: 5\r\n\t},\r\n\tlabel: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"column\"\r\n\t},\r\n\tname: {\r\n\t\tlineHeight: \"40px\"\r\n\t},\r\n\tvalue: {\r\n\t\tmarginLeft: 5,\r\n\t\tcolor: theme.palette.getContrastText(theme.palette.primary.main),\r\n\t\tbackgroundColor: theme.palette.primary.main,\r\n\t},\r\n\tbutton: {\r\n\t\tpadding: 0,\r\n\t\tmarginLeft: 5,\r\n\t\tlineHeight: 1.2\r\n\t},\r\n}));\r\n\r\ntype Props = {\r\n\tname: string;\r\n\tvalue: number;\r\n\tmodifier: number;\r\n\tupdateModifier: (newValue: number) => void;\r\n}\r\nconst ModifiableProperty: FC<Props> = (props: Props) => {\r\n\tconst { name, value, modifier, updateModifier } = props;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tconst onClickPlus = () => {\r\n\t\tupdateModifier(modifier + 1);\r\n\t};\r\n\tconst onClickMinus = () => {\r\n\t\tupdateModifier(modifier - 1);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className={classes.root}>\r\n\t\t\t<Typography className={classes.name}>{name}</Typography>\r\n\t\t\t<Badge badgeContent={modifier} color=\"secondary\" max={9}>\r\n\t\t\t\t<Avatar className={classes.value}>{value + modifier}</Avatar>\r\n\t\t\t</Badge>\r\n\t\t\t<ButtonGroup orientation=\"vertical\">\r\n\t\t\t\t<Button className={classes.button} onClick={onClickPlus}>+</Button>\r\n\t\t\t\t<Button className={classes.button} onClick={onClickMinus}>-</Button>\r\n\t\t\t</ButtonGroup>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ModifiableProperty;","import React, { FC, Fragment } from \"react\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport { getEffectiveAttributeRating, getNaturalAttributeRating } from \"../model/attributes\";\r\nimport ReadOnlyProperty from \"./ReadOnlyProperty\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { isAwakened, MetaType } from \"../model/character\";\r\nimport { getModifier } from \"../model/modifier\";\r\nimport ModifiableProperty from \"./ModifiableProperty\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\n\r\nconst useStyles = makeStyles({\r\n\theader: {\r\n\t\tmarginTop: 10,\r\n\t\tmarginLeft: 5,\r\n\t},\r\n\tsection: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"row\",\r\n\t\tmarginBottom: 10,\r\n\t},\r\n});\r\n\r\nconst StatsTab: FC = () => {\r\n\r\n\tconst classes = useStyles();\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst character = useGlobalState(\"selectedCharacter\");\r\n\r\n\tconst body = getNaturalAttributeRating(character, \"Body\");\r\n\tconst agility = getNaturalAttributeRating(character, \"Agility\");\r\n\tconst reaction = getNaturalAttributeRating(character, \"Reaction\");\r\n\tconst strength = getNaturalAttributeRating(character, \"Strength\");\r\n\tconst charisma = getNaturalAttributeRating(character, \"Charisma\");\r\n\tconst intuition = getNaturalAttributeRating(character, \"Intuition\");\r\n\tconst logic = getNaturalAttributeRating(character, \"Logic\");\r\n\tconst willpower = getNaturalAttributeRating(character, \"Willpower\");\r\n\r\n\tlet essence = 6;\r\n\r\n\tfor (const item of character.gear) {\r\n\t\tif (item.essence !== undefined) {\r\n\t\t\tessence -= parseFloat(item.essence);\r\n\t\t}\r\n\t}\r\n\r\n\tconst awakened = isAwakened(character);\r\n\tlet magic = getNaturalAttributeRating(character, \"Magic\");\r\n\tconst essenceLost = Math.ceil(6 - essence);\r\n\tmagic -= essenceLost;\r\n\r\n\tconst athletics = character.activeSkills.find(s => s.name === \"Athletics\")?.rating || 0;\r\n\r\n\tconst initiative = getEffectiveAttributeRating(character, \"Reaction\") + getEffectiveAttributeRating(character, \"Intuition\");\r\n\tconst initiativePasses = 1;\r\n\r\n\tconst physicalBoxes = 8 + Math.ceil(getEffectiveAttributeRating(character, \"Body\") / 2);\r\n\tconst stunBoxes = 8 + Math.ceil(getEffectiveAttributeRating(character, \"Willpower\") / 2);\r\n\r\n\tlet sneaking = agility;\r\n\tif (character.metaType !== MetaType.Dwarf) {\r\n\t\tsneaking += 1;\r\n\t}\r\n\r\n\tlet walking = sneaking + athletics;\r\n\tif (character.metaType !== MetaType.Dwarf) {\r\n\t\twalking += 2;\r\n\t}\r\n\r\n\tconst running = walking * 2;\r\n\r\n\tconst ModifierProperty = (props: { name: string, value: number} ) => {\r\n\t\tconst {name, value} = props;\r\n\t\tconst modifier = getModifier(character, name);\r\n\t\tconst updateModifier = (newValue: number) => {\r\n\t\t\tconst newModifiers = [...character.modifiers]\r\n\t\t\tconst modifierIndex = newModifiers.findIndex(m => m.name === name);\r\n\t\t\tif (modifierIndex > -1) {\r\n\t\t\t\tnewModifiers.splice(modifierIndex, 1);\r\n\t\t\t}\r\n\t\t\tnewModifiers.push({\r\n\t\t\t\tname,\r\n\t\t\t\trating: newValue\r\n\t\t\t});\r\n\t\t\tconst data: UpdateCharacterData = { ...character, modifiers: newModifiers };\r\n\t\t\tdispatch({ type: ActionType.UpdateCharacter, data });\r\n\t\t};\r\n\t\treturn (\r\n\t\t\t<ModifiableProperty\r\n\t\t\t\tname={name}\r\n\t\t\t\tvalue={value}\r\n\t\t\t\tmodifier={modifier}\r\n\t\t\t\tupdateModifier={updateModifier}\r\n\t\t\t\t/>\r\n\t\t);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<Typography className={classes.header}>Attributes</Typography>\r\n\t\t\t<Divider />\r\n\t\t\t<div className={classes.section}>\r\n\t\t\t\t<ModifierProperty name=\"Body\" value={body} />\r\n\t\t\t\t<ModifierProperty name=\"Agility\" value={agility} />\r\n\t\t\t\t<ModifierProperty name=\"Reaction\" value={reaction} />\r\n\t\t\t\t<ModifierProperty name=\"Strength\" value={strength} />\r\n\t\t\t</div>\r\n\t\t\t<div className={classes.section}>\r\n\t\t\t\t<ModifierProperty name=\"Charisma\" value={charisma} />\r\n\t\t\t\t<ModifierProperty name=\"Intuition\" value={intuition} />\r\n\t\t\t\t<ModifierProperty name=\"Logic\" value={logic} />\r\n\t\t\t\t<ModifierProperty name=\"Willpower\" value={willpower} />\r\n\t\t\t</div>\r\n\t\t\t<div className={classes.section}>\r\n\t\t\t\t<ReadOnlyProperty name=\"Essence\" value={essence} />\r\n\t\t\t\t{\r\n\t\t\t\t\tawakened ?\r\n\t\t\t\t\t<ReadOnlyProperty name=\"Magic\" value={magic} />\r\n\t\t\t\t\t:\r\n\t\t\t\t\tnull\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t\t<Typography className={classes.header}>Initiative</Typography>\r\n\t\t\t<Divider />\r\n\t\t\t<div className={classes.section}>\r\n\t\t\t\t<ModifierProperty name=\"Initiative\" value={initiative} />\r\n\t\t\t\t<ModifierProperty name=\"Initiative Passes\" value={initiativePasses} />\r\n\t\t\t</div>\r\n\t\t\t<Typography className={classes.header}>Condition Monitor</Typography>\r\n\t\t\t<Divider />\r\n\t\t\t<div className={classes.section}>\r\n\t\t\t\t<ReadOnlyProperty name=\"Physical Boxes\" value={physicalBoxes} />\r\n\t\t\t\t<ReadOnlyProperty name=\"Stun Boxes\" value={stunBoxes} />\r\n\t\t\t</div>\r\n\t\t\t<Typography className={classes.header}>Movement</Typography>\r\n\t\t\t<Divider />\r\n\t\t\t<div className={classes.section}>\r\n\t\t\t\t<ReadOnlyProperty name=\"Sneaking\" value={sneaking} />\r\n\t\t\t\t<ReadOnlyProperty name=\"Walking\" value={walking} />\r\n\t\t\t\t<ReadOnlyProperty name=\"Running\" value={running} />\r\n\t\t\t</div>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default StatsTab;","export function createPublicUrl(relativeUrl: string): string {\r\n    return `${process.env.PUBLIC_URL}/${relativeUrl}`;\r\n}","import React, { FC } from \"react\";\r\nimport { Dialog, DialogContent, DialogActions, DialogContentText, Button } from \"@material-ui/core\";\r\n\r\ntype Props = {\r\n\topen: boolean;\r\n\tonChoice: (accept: boolean) => void;\r\n\tcontent: string;\r\n};\r\nconst ConfirmationDialog: FC<Props> = (props: Props) => {\r\n\tconst { open, onChoice, content } = props;\r\n\r\n\tconst handleYes = () => {\r\n\t\tonChoice(true);\r\n\t};\r\n\r\n\tconst handleNo = () => {\r\n\t\tonChoice(false);\r\n\t};\r\n\treturn (\r\n\t\t<Dialog\r\n\t\t\topen={open}\r\n\t\t\tonClose={handleNo}\r\n\t\t>\r\n\t\t\t<DialogContent>\r\n\t\t\t\t<DialogContentText>\r\n\t\t\t\t\t{content}\r\n\t\t\t\t</DialogContentText>\r\n\t\t\t</DialogContent>\r\n\t\t\t<DialogActions>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tonClick={handleYes}\r\n\t\t\t\t\tcolor=\"secondary\"\r\n\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t>\r\n\t\t\t\t\tYes\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tonClick={handleNo}\r\n\t\t\t\t\tcolor=\"secondary\"\r\n\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\tautoFocus\r\n\t\t\t\t>\r\n\t\t\t\t\tNo\r\n\t\t\t\t</Button>\r\n\t\t\t</DialogActions>\r\n\t\t</Dialog>\r\n\t);\r\n};\r\n\r\nexport default ConfirmationDialog;","import React, { Fragment, FC, ChangeEvent } from \"react\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport GetAppIcon from \"@material-ui/icons/GetApp\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\ntype Props = {\r\n\tsaveData: (data: string) => void;\r\n};\r\nconst ImportButton: FC<Props> = (props: Props) =>{\r\n\tconst { saveData } = props;\r\n\r\n\tconst handleFileChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n\t\tconst files = event.target.files;\r\n\t\tif (!files || files.length === 0) {\r\n\t\t\tconsole.log(`No files selected`);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst file = files[0];\r\n\t\tconst reader = new FileReader();\r\n\t\treader.onload = e => {\r\n\t\t\tif (!e.target) {\r\n\t\t\t\tthrow new Error(`Failed to load data from file '${file.name}'`);\r\n\t\t\t}\r\n\t\t\tconst data = e.target.result;\r\n\t\t\tif (!data) {\r\n\t\t\t\tthrow new Error(`File '${file.name}' has no data`);\r\n\t\t\t}\r\n\t\t\tsaveData(data as string);\r\n\t\t};\r\n\t\treader.readAsText(file);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<input\r\n\t\t\t\taccept=\"application/json\"\r\n\t\t\t\thidden\r\n\t\t\t\tid=\"import-file\"\r\n\t\t\t\ttype=\"file\"\r\n\t\t\t\tonChange={handleFileChange}\r\n\t\t\t/>\r\n\t\t\t<label htmlFor=\"import-file\">\r\n\t\t\t\t<Tooltip title=\"Import Character\">\r\n\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\tcolor=\"secondary\"\r\n\t\t\t\t\t\tcomponent=\"span\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<GetAppIcon />\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t</Tooltip>\r\n\t\t\t</label> \r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default ImportButton;","import React, { FC } from \"react\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport PublishIcon from \"@material-ui/icons/Publish\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\ntype Props = {\r\n\tfilename: string;\r\n\tgenerateData: () => string;\r\n};\r\nconst ExportButton: FC<Props> = (props: Props) => {\r\n\tconst { filename, generateData } = props;\r\n\r\n\tconst handleClick = () => {\r\n\t\tconst data = generateData();\r\n\t\tconst element = document.createElement('a');\r\n\t\telement.setAttribute('href', 'data:application/json;charset=utf-8,' + encodeURIComponent(data));\r\n\t\telement.setAttribute('download', filename);\r\n\t\r\n\t\telement.style.display = 'none';\r\n\t\tdocument.body.appendChild(element);\r\n\t\r\n\t\telement.click();\r\n\t\r\n\t\tdocument.body.removeChild(element);\r\n\t};\r\n\treturn (\r\n\t\t<Tooltip title=\"Export Character\">\r\n\t\t\t<IconButton\r\n\t\t\t\tonClick={handleClick}\r\n\t\t\t\tcolor=\"secondary\"\r\n\t\t\t>\r\n\t\t\t\t<PublishIcon />\r\n\t\t\t</IconButton>\r\n\t\t</Tooltip>\r\n\t);\r\n};\r\n\r\nexport default ExportButton;","import React, { FC } from \"react\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { ALL_LEVELS, Level } from \"../model/create-options\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n    control: {\r\n\t\tmargin: 8,\r\n\t\tminWidth: 100,\r\n\t},\r\n\tlabel: {\r\n\t\tpadding: 4,\r\n\t},\r\n});\r\n\r\ntype Props = {\r\n\tid: string;\r\n\tlabel: string;\r\n\tvalue: Level;\r\n\tupdateValue: (newValue: Level) => void;\r\n}\r\nconst LevelSelect: FC<Props> = (props: Props) => {\r\n\tconst { id, label, value, updateValue } = props;\r\n\tconst selectId = `${id}-level-select`;\r\n\tconst labelId = `${selectId}-label`;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tconst handleOnChange = (event: React.ChangeEvent<{ name?: string; value: unknown }>, child: React.ReactNode) => {\r\n\t\tupdateValue(event.target.value as Level);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<FormControl className={classes.control}>\r\n\t\t\t<InputLabel id={labelId} className={classes.label}>{label}</InputLabel>\r\n\t\t\t<Select\r\n\t\t\t\tlabelId={labelId}\r\n\t\t\t\tid={selectId}\r\n\t\t\t\tvalue={value}\r\n\t\t\t\tonChange={handleOnChange}\r\n\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tALL_LEVELS.map(l => <MenuItem key={l} value={l}>{l}</MenuItem>)\r\n\t\t\t\t\t}\r\n\t\t\t</Select>\r\n\t\t</FormControl>\r\n\t);\r\n};\r\n\r\nexport default LevelSelect;","import React, { FC } from \"react\";\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport { ActionType, UpdateCreateOptionsData } from \"../reducer\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport LevelSelect from \"./LevelSelect\";\r\nimport { CreateOptions } from \"../model/create-options\";\r\n\r\nconst useStyles = makeStyles({\r\n\troot: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"row\",\r\n\t},\r\n});\r\n\r\nconst CreateOptionsPanel: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const character = useGlobalState(\"selectedCharacter\");\r\n    const options = character.options;\r\n    const { karmaLevel, connectionLevel, nuyenLevel, gearLevel } = options;\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleOnOptionsChange = (newOptions: CreateOptions) => {\r\n        const data: UpdateCreateOptionsData = newOptions;\r\n        dispatch({ type: ActionType.UpdateCreateOptions, data });\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <LevelSelect id=\"karma\" label=\"Karma\" value={karmaLevel} updateValue={(newValue) => handleOnOptionsChange({...options, karmaLevel: newValue})} />\r\n            <LevelSelect id=\"connection\" label=\"Connection\" value={connectionLevel} updateValue={(newValue) => handleOnOptionsChange({...options, connectionLevel: newValue})} />\r\n            <LevelSelect id=\"nuyen\" label=\"Nuyen\" value={nuyenLevel} updateValue={(newValue) => handleOnOptionsChange({...options, nuyenLevel: newValue})} />\r\n            <LevelSelect id=\"gear\" label=\"Gear\" value={gearLevel} updateValue={(newValue) => handleOnOptionsChange({...options, gearLevel: newValue})} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreateOptionsPanel;","import React, { FC, useState, useEffect } from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SelectCharacter from \"./SelectCharacter\";\r\nimport CharacterName from \"./CharacterName\";\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport { ActionType, LoadSkillsData, LoadContactsData, LoadQualitiesData, LoadSpellsData, LoadGearData, ImportCharacterData, LoadPowersData } from \"../reducer\";\r\nimport CharacterTab from \"./CharacterTab\";\r\nimport SkillsTab from \"./SkillsTab\";\r\nimport Karma from \"./Karma\";\r\nimport AttributesTab from \"./AttributesTab\";\r\nimport ContactsTab from \"./ContactsTab\";\r\nimport { getProfessionalismCost, isAwakened } from \"../model/character\";\r\nimport MagicTab from \"./MagicTab\";\r\nimport GearTab from \"./GearTab\";\r\nimport { transformAllGear, getCharacterGearNuyenCost, getCharacterGearKarmaCost } from \"../model/gear\";\r\nimport { getMetaTypeCost } from \"../model/meta-type\";\r\nimport { transformAllQualities, getCharacterQualitiesCost } from \"../model/quality\";\r\nimport { getAllContactsCost } from \"../model/contact\";\r\nimport { getCharacterMagicCost, transformAllPowers, transformAllSpells } from \"../model/magic\";\r\nimport { getSkillsCost } from \"../model/skills\";\r\nimport { getAttributesCost } from \"../model/attributes\";\r\nimport StatsTab from \"./StatsTab\";\r\nimport { createPublicUrl } from \"../request\";\r\nimport ConfirmationDialog from \"./ConfirmationDialog\";\r\nimport ImportButton from \"./ImportButton\";\r\nimport ExportButton from \"./ExportButton\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport CreateOptionsPanel from \"./CreateOptionsPanel\";\r\n\r\nconst useStyles = makeStyles({\r\n    bar: {\r\n        flexGrow: 1,\r\n        display: \"flex\",\r\n        alignItems: \"center\"\r\n    }\r\n});\r\n\r\nconst CharacterCreator: FC = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const selectedCharacter = useGlobalState(\"selectedCharacter\");\r\n    const allQualities = useGlobalState(\"allQualities\");\r\n    const allGear = useGlobalState(\"allGear\");\r\n    const options = selectedCharacter.options;\r\n\r\n    const [drawerOpen, setDrawerOpen] = useState(false);\r\n    const [selectedTab, setSelectedTab] = useState(0);\r\n\r\n    useEffect(() => {\r\n        fetch(createPublicUrl(\"data/qualities.json\"))\r\n            .then(response => response.json())\r\n            .then(qualities => {\r\n                const data = transformAllQualities(qualities) as LoadQualitiesData;\r\n                dispatch({ type: ActionType.LoadQualities, data });\r\n            })\r\n            .catch(error => {\r\n                console.error(`Error occured loading qualities: ${error.message}\\n${error.stack}`);\r\n            });\r\n        fetch(createPublicUrl(\"data/skills.json\"))\r\n            .then(response => response.json())\r\n            .then(skills => {\r\n                const data = skills as LoadSkillsData;\r\n                dispatch({ type: ActionType.LoadSkills, data });\r\n            })\r\n            .catch(error => {\r\n                console.error(`Error occured loading skills: ${error.message}\\n${error.stack}`);\r\n            });\r\n        fetch(createPublicUrl(\"data/contacts.json\"))\r\n            .then(response => response.json())\r\n            .then(contacts => {\r\n                const data = contacts.all as LoadContactsData;\r\n                dispatch({ type: ActionType.LoadContacts, data });\r\n            })\r\n            .catch(error => {\r\n                console.error(`Error occured loading contacts: ${error.message}\\n${error.stack}`);\r\n            });\r\n        fetch(createPublicUrl(\"data/magic.json\"))\r\n            .then(response => response.json())\r\n            .then(magic => {\r\n                const spellData = transformAllSpells(magic.spells) as LoadSpellsData;\r\n                dispatch({ type: ActionType.LoadSpells, data: spellData });\r\n                const powersData = transformAllPowers(magic.powers) as LoadPowersData;\r\n                dispatch({ type: ActionType.LoadPowers, data: powersData });\r\n            })\r\n            .catch(error => {\r\n                console.error(`Error occured loading magic: ${error.message}\\n${error.stack}`);\r\n            });\r\n        fetch(createPublicUrl(\"data/gear.json\"))\r\n            .then(response => response.json())\r\n            .then(gear => {\r\n                const gearData = transformAllGear(gear) as LoadGearData;\r\n                dispatch({ type: ActionType.LoadGear, data: gearData });\r\n            })\r\n            .catch(error => {\r\n                console.error(`Error occured loading gear: ${error.message}\\n${error.stack}`);\r\n            });\r\n    }, [dispatch]);\r\n\r\n    const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\r\n\r\n    const handleDelete = () =>{\r\n        setShowDeleteConfirmation(true);\r\n    };\r\n\r\n    const handleDeleteChoice = (accept: boolean) => {\r\n        if (accept) {\r\n            dispatch({ type: ActionType.ClearCharacter });\r\n        }\r\n        setShowDeleteConfirmation(false);\r\n    };\r\n\r\n    const characterCost = getMetaTypeCost(selectedCharacter.metaType) + getCharacterQualitiesCost(selectedCharacter, allQualities) + getProfessionalismCost(selectedCharacter.professionalism);\r\n    const attributesCost = getAttributesCost(selectedCharacter);\r\n    const skillsCost = getSkillsCost(selectedCharacter);\r\n    const contactsCost = getAllContactsCost(selectedCharacter);\r\n    const magicCost = getCharacterMagicCost(selectedCharacter);\r\n    const gearNuyenCost = getCharacterGearNuyenCost(selectedCharacter, allGear, options.gearLevel);\r\n    const getGearKarmaCost = getCharacterGearKarmaCost(gearNuyenCost, selectedCharacter.options.nuyenLevel);\r\n\r\n    let gearNuyenCostLabel: string;\r\n    if (gearNuyenCost < 1000) {\r\n        gearNuyenCostLabel = `¥${gearNuyenCost}`;\r\n    } else if (gearNuyenCost < 1000000) {\r\n        gearNuyenCostLabel = `¥${Math.round(gearNuyenCost / 100) / 10}K`;\r\n    } else {\r\n        gearNuyenCostLabel = `¥${Math.round(gearNuyenCost / 100000) / 10}M`;\r\n    }\r\n\r\n    const onTabChange = (_event: React.ChangeEvent<{}>, newValue: number) => {\r\n        setSelectedTab(newValue);\r\n    };\r\n\r\n    const awakened = isAwakened(selectedCharacter);\r\n\r\n    let selectedTabPanel: JSX.Element | null;\r\n    switch (selectedTab) {\r\n        case 0:\r\n            selectedTabPanel = <CharacterTab />;\r\n            break;\r\n        case 1:\r\n            selectedTabPanel = <AttributesTab />;\r\n            break;\r\n        case 2:\r\n            selectedTabPanel = <SkillsTab />;\r\n            break;\r\n        case 3:\r\n            selectedTabPanel = <ContactsTab />;\r\n            break;\r\n        case 4: {\r\n            selectedTabPanel = <GearTab />;\r\n            break;\r\n        }\r\n        case 5: {\r\n            selectedTabPanel = <MagicTab />;\r\n            break;\r\n        }\r\n        case 6: {\r\n            selectedTabPanel = <StatsTab />;\r\n            break;\r\n        }\r\n        default:\r\n            throw new Error(`Unknown tab index ${selectedTab}`);\r\n    }\r\n\r\n    const handleShowCharacters = () => {\r\n        setDrawerOpen(true);\r\n    }\r\n    const handleCloseCharacters = () => {\r\n        setDrawerOpen(false);\r\n    }\r\n\r\n    const importCharacterData = (rawData: string) => {\r\n        const data: ImportCharacterData = JSON.parse(rawData);\r\n        dispatch({ type: ActionType.ImportCharacter, data });\r\n    };\r\n\r\n    let name: string\r\n    if (selectedCharacter.streetName.length > 0) {\r\n        name = selectedCharacter.streetName;\r\n    } else if (selectedCharacter.name.length > 0) {\r\n        name = selectedCharacter.name;\r\n    } else {\r\n        name = \"[New Character]\";\r\n    }\r\n\r\n    const exportFileName = `${name}.json`;\r\n    const generateCharacterData = () => {\r\n        return JSON.stringify(selectedCharacter);\r\n    };\r\n    \r\n    return (\r\n        <div>\r\n            <AppBar position=\"sticky\" color=\"default\">\r\n                <Toolbar>\r\n                    <Tooltip title=\"Characters\">\r\n                        <IconButton edge=\"start\" onClick={handleShowCharacters} aria-label=\"characters\">\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <div className={classes.bar}>\r\n                        <CharacterName character={selectedCharacter} />\r\n                        <Karma />\r\n                        <CreateOptionsPanel />\r\n                    </div>\r\n                    <ImportButton saveData={importCharacterData} />\r\n                    <ExportButton filename={exportFileName} generateData={generateCharacterData} />\r\n                    <IconButton aria-label=\"clear\" onClick={handleDelete} color=\"secondary\">\r\n                        <ClearIcon />\r\n                    </IconButton>\r\n                </Toolbar>\r\n                <Tabs value={selectedTab} onChange={onTabChange} variant=\"scrollable\">\r\n                    <Tab\r\n                        label={\r\n                            <Badge badgeContent={characterCost} color=\"default\" showZero max={999}>\r\n                                Character\r\n                            </Badge>\r\n                        }\r\n                    />\r\n                    <Tab\r\n                        label={\r\n                            <Badge badgeContent={attributesCost} color=\"default\" showZero max={999}>\r\n                                Attributes\r\n                            </Badge>\r\n                        }\r\n                    />\r\n                    <Tab\r\n                        label={\r\n                            <Badge badgeContent={skillsCost} color=\"default\" showZero max={999}>\r\n                                Skills\r\n                            </Badge>\r\n                        }\r\n                    />\r\n                    <Tab\r\n                        label={\r\n                            <Badge badgeContent={contactsCost} color=\"default\" showZero max={999}>\r\n                                Contacts\r\n                            </Badge>\r\n                        }\r\n                    />\r\n                    <Tab\r\n                        label={\r\n                            <Badge badgeContent={gearNuyenCostLabel} color=\"default\" showZero max={1000000} anchorOrigin={{ vertical: \"top\", horizontal: \"left\" }}>\r\n                                <Badge badgeContent={getGearKarmaCost} color=\"default\" showZero max={999} anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}>\r\n                                    Gear\r\n                                </Badge>\r\n                            </Badge>\r\n                        }\r\n                    />\r\n                    <Tab\r\n                        disabled={!awakened}\r\n                        label={\r\n                            <Badge badgeContent={magicCost} color=\"default\" showZero max={999}>\r\n                                Magic\r\n                            </Badge>\r\n                        }\r\n                    />\r\n                    <Tab label=\"Stats\" />\r\n                </Tabs>\r\n            </AppBar>\r\n            {\r\n                selectedTabPanel\r\n            }\r\n            <Drawer open={drawerOpen} onClose={handleCloseCharacters}>\r\n                <SelectCharacter />\r\n            </Drawer>\r\n            <ConfirmationDialog\r\n                open={showDeleteConfirmation}\r\n                onChoice={handleDeleteChoice}\r\n                content=\"Are you sure you want to delete this character? All data will be lost forever.\"\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CharacterCreator;","import React, { FC, useReducer } from \"react\";\r\nimport { DispatchContext, StateContext } from \"./context\";\r\nimport { reducer, INITIAL_STATE } from \"./reducer\";\r\nimport { State } from \"./model/state\";\r\nimport { loadCharacter, loadCharacters, loadSelectedCharacter } from \"./persistance\";\r\nimport CharacterCreator from \"./component/CharacterCreator\";\r\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        type: \"dark\"\r\n    }\r\n});\r\n\r\nconst App: FC = () => {\r\n    const [state, dispatch] = useReducer(reducer, INITIAL_STATE, (s: State): State => {\r\n        const characters = loadCharacters();\r\n        const selectedCharacterKey = loadSelectedCharacter();\r\n        let selectedCharacter = s.selectedCharacter;\r\n        if (selectedCharacterKey > -1) {\r\n            const selectedCharacterRef = characters.find(c => c.key === selectedCharacterKey);\r\n            if (selectedCharacterRef) {\r\n                const loadedCharacter = loadCharacter(selectedCharacterRef.key);\r\n                if (loadedCharacter) {\r\n                    selectedCharacter = loadedCharacter;\r\n                }\r\n            }\r\n        }\r\n        return { ...s, characters, selectedCharacter };\r\n    });\r\n\r\n    return (\r\n        <DispatchContext.Provider value={dispatch}>\r\n            <StateContext.Provider value={state}>\r\n                <ThemeProvider theme={theme}>\r\n                    <CssBaseline />\r\n                    <CharacterCreator />\r\n                </ThemeProvider>\r\n            </StateContext.Provider>\r\n        </DispatchContext.Provider>\r\n    );\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}