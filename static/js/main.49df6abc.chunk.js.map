{"version":3,"sources":["model/character.ts","data/default-character.ts","persistance.ts","model/meta-type.ts","model/attributes.ts","model/skills.ts","model/dictionary.ts","model/quality.ts","model/gear.ts","model/karma.ts","reducer.ts","context.ts","component/CharacterName.tsx","component/SelectCharacter.tsx","data/meta-types.ts","component/ChipCollection.tsx","model/item.ts","component/GradeButton.tsx","component/ItemPickerCard.tsx","component/ItemPickerSection.tsx","component/ItemPickerDialog.tsx","component/ItemPickerButton.tsx","component/GroupContainer.tsx","component/QualitiesSection.tsx","component/CharacterTab.tsx","model/custom-item.ts","component/PickerDialog.tsx","component/PickerButton.tsx","component/Property.tsx","component/Skill.tsx","component/SkillList.tsx","component/ActiveSkillList.tsx","component/KnowledgeSkillList.tsx","component/LanguageSkillList.tsx","component/SkillsTab.tsx","component/Karma.tsx","component/Attribute.tsx","component/AttributeList.tsx","component/AttributesTab.tsx","model/contact.ts","component/Contact.tsx","component/ContactList.tsx","component/ContactsTab.tsx","component/PropertyLeafNode.tsx","component/PropertyNode.tsx","component/PropertyTree.tsx","model/magic.ts","component/MagicTab.tsx","component/GearTab.tsx","component/ReadOnlyProperty.tsx","component/CombatTab.tsx","component/CharacterCreator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MetaType","isAwakened","character","undefined","qualities","find","q","name","DEFAULT_KEY","DEFAULT_CHARACTER","key","streetName","metaType","Human","attributes","rating","activeSkills","knowledgeSkills","languageSkills","contacts","spells","combat","detection","health","illusion","manipulation","gear","getDefaultCharacter","CHARACTER_KEY","createCharacterKey","loadCharacter","localStorage","getItem","JSON","parse","SELECTED_CHARACTER_KEY","CUSTOM_ITEM_KEY","createCustomItemKey","path","getMetaTypeCost","Ork","Dwarf","Elf","Troll","Error","getEffectiveAttributeRating","attribute","a","getAttributeModifier","getAttributeCost","getAttributesCost","awakened","cost","getActiveSkillCost","getActiveSkillsCost","map","s","reduce","b","getKnowledgeSkillCost","getKnowledgeSkillsCost","getFreeKnowledgeSkillPoints","intuition","logic","getSkillsCost","activeSkillCost","knowledgeSkillCost","languageSkillCost","freeKnowledgePoints","Math","max","transformAllItems","parentPath","parentData","allItems","transformValues","Object","keys","childName","childPath","childData","isArray","itemCostMap","Map","getItemCost","item","has","get","items","foundItem","g","stringify","parseInt","set","getChildSet","values","subset","findChildPaths","childPaths","parents","split","components","length","match","i","push","qualitiesRoot","transformQualityValues","value","getCharacterQualitiesCost","allQualities","Grade","gearRoot","transformGearValues","v","data","availability","costLabel","propName","propValue","transformGearItem","test","splitGearItems","finalizeGearItem","itemVersions","groupResult","exec","namePrefix","nameSuffixes","r","trim","itemCount","itemVersion","splitValues","costResult","isNaN","computeItemCost","allGear","grade","Alpha","Used","Beta","Delta","getGradeCostMultipler","createSavedItem","count","savedItem","getCharacterGearNuyenCost","nuyen","getCharacterGearKarmaCost","ceil","ActionType","STARTING_KARMA","getDefaultKarma","total","spent","available","getCharacterKarma","karma","state","reducer","action","type","UpdateCharacter","selectedCharacter","SaveCharacter","isDefaultCharacter","Date","now","characters","setItem","saveCharacter","ClearCharacter","removeItem","clearCharacter","filter","c","SelectCharacter","characterRef","LoadQualities","LoadSkills","allSkills","LoadContacts","allContacts","LoadGear","LoadSpells","allSpells","LoadCustomItems","customItems","AddCustomItem","newItem","Name","saveCustomItem","INITIAL_STATE","positive","negative","active","knowledge","language","DispatchContext","createContext","useDispatch","useContext","StateContext","useGlobalState","property","CharacterName","props","Typography","dispatch","List","subheader","ListSubheader","ListItem","onClick","onCharacterClick","ALL_META_TYPES","useStyles","makeStyles","root","display","flexDirection","flexWrap","justifyContent","chip","marginRight","marginBottom","ChipCollection","createChipLabel","onDeleteValue","classes","className","Chip","color","label","onDelete","getItemSubset","subItems","startsWith","minWidth","maxWidth","width","GradeButton","disabled","onUpdateGrade","Button","variant","nextGrade","padding","margin","textAlign","ItemPickerCard","createCostLabel","onUpdateItem","includeGrade","Paper","elevation","style","lineHeight","Badge","badgeContent","ButtonGroup","toString","newGrade","ItemPickerSection","onUpdateItems","handleUpdate","newItems","findIndex","Divider","ItemPickerDialog","open","onClose","title","onUpdateAllItems","allPaths","paths","pathToLabel","finalComponent","sentenceCase","useState","group","setGroup","p","Dialog","DialogTitle","DialogContent","Select","id","displayEmpty","onChange","event","target","MenuItem","newAllItems","ItemPickerButton","setOpen","parentPathsToName","parentPathToName","differenceFound","componentIndex","pathIndex","slice","join","getNextParentPaths","parentPaths","setParentPath","menuAnchor","setMenuAnchor","allChildItems","allCountedItems","hasItems","localItems","matchingItems","localItem","matchingItem","IconButton","currentTarget","size","disableRipple","anchorEl","Boolean","handleMenuClick","newCountedItems","includeItem","index","splice","headerLabel","fontWeight","GroupContainer","createItemLabel","createItemCostLabel","flatItems","ExpansionPanel","defaultExpanded","ExpansionPanelSummary","expandIcon","FormControlLabel","stopPropagation","onFocus","control","ExpansionPanelDetails","toDelete","QualitiesSection","createQualityCostLabel","newQualities","header","marginLeft","field","marginTop","divider","CharacterTab","onCharacterUpdated","updatedCharacter","TextField","id-","e","t","getChildItems","content","ul","PickerDialog","onItemSelectionChange","includeAvailability","includeCost","allowNewItems","allowMultiSelection","newItemName","setNewItemName","newItemAvailability","setNewItemAvailability","newItemCost","setNewItemCost","onUpdateNewItem","aria-label","selected","Availability","Cost","ListItemText","findName","editButton","paddingLeft","PickerButton","breadcrums","selectedValueNames","addValue","removeValue","allowNewValues","createValue","findAvailability","findCost","n","createSelectableItem","height","slider","Property","onUpdate","min","step","formatDisplayValue","computeCost","gutterBottom","Slider","marks","valueLabelDisplay","Array","valueLabelFormat","_index","Skill","skill","paddingTop","SkillList","skills","computeSkillCost","onSkillsUpdated","sort","localeCompare","onSkillUpdate","newSkills","skillIndex","ActiveSkillList","activeSkillsCost","allActiveSkills","KnowledgeSkillList","knowledgeSkillsCost","freeKnowledgeSkillPoints","totalCost","allKnowledgeSkills","LanguageSkillList","languageSkillsCost","allLanguageSkills","SkillsTab","badge","Karma","showZero","Attribute","modifier","AttributeList","filteredAttributes","attributesCost","newAttributes","attributeIndex","AttributesTab","getContactRatingCost","getContactCost","contact","connection","loyalty","getAllContactsCost","details","Contact","contactCost","updatedConnection","updatedContact","updatedLoyalty","ContactList","selectedContacts","contactsCost","freeContactPoints","charisma","willpower","getFreeContactPoints","onContactUpdate","newContacts","contactIndex","ContactsTab","PropertyLeafNode","names","allValues","onNamesUpdated","newValues","getCost","fontWeights","PropertyNode","rootCost","all","onValueUpdated","getBreadcrums","updatedNames","isRoot","children","childAll","defaultValue","childValue","updatedChildValue","updatedValue","PropertyTree","rootName","rootValue","rootAll","onRootUpdated","getSpellsCost","getCharacterSpellsCost","MagicTab","updatedSpells","GearTab","createGearCostLabel","createGearLabel","childNames","Set","add","from","getChildNames","newSubGear","newGear","handleUpdateGear","theme","palette","getContrastText","primary","main","backgroundColor","ReadOnlyProperty","Avatar","section","CombatTab","body","agility","reaction","athletics","initiative","physicalBoxes","stunBoxes","sneaking","walking","running","bar","flexGrow","CharacterCreator","useEffect","fetch","then","response","json","allData","transformAllQualities","catch","error","console","message","stack","magic","spellData","gearData","transformAllGear","selectedTabPanel","characterCost","skillsCost","magicCost","gearNuyenCost","getGearKarmaCost","selectedTab","setSelectedTab","drawerOpen","setDrawerOpen","AppBar","position","Toolbar","edge","Tabs","_event","newValue","Tab","anchorOrigin","vertical","horizontal","Drawer","createMuiTheme","App","useReducer","characterJSON","loadCharacters","selectedCharacterKey","loadSelectedCharacter","selectedCharacterRef","loadedCharacter","Provider","ThemeProvider","CssBaseline","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.49df6abc.chunk.js","sourcesContent":["import { Contact } from \"./contact\";\r\nimport { Spells } from \"./magic\";\r\nimport { Item } from \"./item\";\r\n\r\nexport enum MetaType {\r\n    Dwarf = \"Dwarf\",\r\n    Elf = \"Elf\",\r\n    Human = \"Human\",\r\n    Ork = \"Ork\",\r\n    Troll = \"Troll\",\r\n}\r\n\r\nexport type NamedProperty = {\r\n    name: string;\r\n    rating: number;\r\n};\r\n\r\nexport type Attribute = NamedProperty;\r\n\r\nexport type Skill = NamedProperty;\r\n\r\nexport type CharacterRef = {\r\n    key: number;\r\n    name: string;\r\n    streetName: string;\r\n};\r\n\r\nexport type Character = CharacterRef & {\r\n    metaType: MetaType;\r\n    attributes: Attribute[];\r\n    qualities: Item[];\r\n    activeSkills: Skill[];\r\n    knowledgeSkills: Skill[];\r\n    languageSkills: Skill[];\r\n    contacts: Contact[];\r\n    spells: Spells;\r\n    // gear: any;\r\n    gear: Item[];\r\n};\r\n\r\nexport function isAwakened(character: Character): boolean {\r\n    return character.qualities.find(q => q.name === \"Adept\" || q.name === \"Magician\") !== undefined;\r\n}","import { Character, MetaType } from \"../model/character\";\r\n\r\nconst DEFAULT_KEY = -1;\r\nconst DEFAULT_CHARACTER: Character = {\r\n    key: DEFAULT_KEY,\r\n    name: \"\",\r\n    streetName: \"\",\r\n    metaType: MetaType.Human,\r\n    attributes: [\r\n        { name: \"Body\", rating: 3 },\r\n        { name: \"Agility\", rating: 3 },\r\n        { name: \"Reaction\", rating: 3 },\r\n        { name: \"Strength\", rating: 3 },\r\n        { name: \"Charisma\", rating: 3 },\r\n        { name: \"Intuition\", rating: 3 },\r\n        { name: \"Logic\", rating: 3 },\r\n        { name: \"Willpower\", rating: 3 },\r\n        { name: \"Edge\", rating: 3 },\r\n        { name: \"Magic\", rating: 3 },\r\n    ],\r\n    qualities: [],\r\n    activeSkills: [],\r\n    knowledgeSkills: [],\r\n    languageSkills: [],\r\n    contacts: [],\r\n    spells: {\r\n        combat: [],\r\n        detection: [],\r\n        health: [],\r\n        illusion: [],\r\n        manipulation: [],\r\n    },\r\n    gear: [],\r\n    // gear: {\r\n    //     weapons: {\r\n    //         meleeWeapons: {\r\n    //             unarmed: [],\r\n    //             clubs: [],\r\n    //             clades: [],\r\n    //             exoticMeleeWeapons: [],\r\n    //         },\r\n    //         projectileAndThrowingWeapons: {\r\n    //             throwingWeapons: [],\r\n    //             bows: [],\r\n    //             crossbows: [],\r\n    //             arrowheads: [],\r\n    //         },\r\n    //         lessThanLethal: {\r\n    //             tasers: [],\r\n    //             specialRangedWeapons: [],\r\n    //         },\r\n    //         firearms: {\r\n    //             holdOutPistols: [],\r\n    //             lightPistols: [],\r\n    //             heavyPistols: [],\r\n    //             subMachineguns: [],\r\n    //             shotguns: [],\r\n    //             assaultRifles: [],\r\n    //             sportRifles: [],\r\n    //             sniperRifles: [],\r\n    //             assaultCannons: [],\r\n    //             lightMachineguns: [],\r\n    //             mediumMachineguns: [],\r\n    //             heavyMachineguns: [],\r\n    //             ammunitionTypes: [],\r\n    //             firearmAccessories: [],\r\n    //         },\r\n    //         grenadesAndRockets: {\r\n    //             grenades: [],\r\n    //             grenadeLaunchers: [],\r\n    //             rockets: [],\r\n    //             rocketLaunchers: []\r\n    //         },\r\n    //     },\r\n    //     clothingAndArmor: {\r\n    //         clothing: [],\r\n    //         armor: [],\r\n    //         armorModifications: [],\r\n    //         helmetsAndShields: [],\r\n    //     },\r\n    //     augmentations: {\r\n    //         cyberAndBiowareGrades: [],\r\n    //         headware: [],\r\n    //         eyeware: [],\r\n    //         earware: [],\r\n    //         bodyware: [],\r\n    //         cyberlimbs: [],\r\n    //         cyberlimbEnhancements: [],\r\n    //         cyberlimbAccessories: [],\r\n    //         cyberMeleeWeapons: [],\r\n    //         basicBioware: [],\r\n    //         culturedBioware: [],\r\n    //     },\r\n    //     tech: {\r\n    //         electronics: {\r\n    //             commlink: [],\r\n    //             coomlinkUpgrades: [],\r\n    //             commlinkAccessories: [],\r\n    //         },\r\n    //         surveillance: {\r\n    //             imagingDevicies: [],\r\n    //             imagingEnhancements: [],\r\n    //             audioDevices: [],\r\n    //             audioEnhancements: [],\r\n    //             sensorPackages: [],\r\n    //             sensorFunctions: [],\r\n    //         },\r\n    //         security: {\r\n    //             locks: [],\r\n    //             restraints: [],\r\n    //             breakingAndEnteringTools: [],\r\n    //             disguises: [],\r\n    //         },\r\n    //         datachipsAndSoftware: {\r\n    //             matrixPrograms: [],\r\n    //             skillsoftPrograms: [],\r\n    //             dataPrograms: [],\r\n    //             simsemse: [],\r\n    //             areprograms: [],\r\n    //         },\r\n    //         tools: [],\r\n    //         survivalGear: [],\r\n    //         grapplegun: [],\r\n    //     },\r\n    //     medicalEquipment: {\r\n    //         biotech: [],\r\n    //         slapPatches: [],\r\n    //         docwagonContracts: [],\r\n    //     },\r\n    //     chemicals: {\r\n    //         drugs: [],\r\n    //         toxins: [],\r\n    //         compounds: [],\r\n    //     },\r\n    //     explosives: {\r\n    //         explosives: [],\r\n    //         detonators: [],\r\n    //     },\r\n    //     magicalEquipment: {\r\n    //         spellFormulae: [],\r\n    //         spellFetish: [],\r\n    //         foci: [],\r\n    //         magicalSupplies: [],\r\n    //     },\r\n    //     vehiclesAndDrones: {\r\n    //         bikes: [],\r\n    //         cars: [],\r\n    //         trucks: [],\r\n    //         securityVehicles: [],\r\n    //         microDroens: [],\r\n    //         miniDrones: [],\r\n    //         smallDrones: [],\r\n    //         mediumDrones: [],\r\n    //         largeDrones: [],\r\n    //         vehicleModifications: [],\r\n    //     },\r\n    // }\r\n};\r\n\r\nexport function getDefaultCharacter(): Character {\r\n    return { ...DEFAULT_CHARACTER };\r\n}\r\n\r\nexport function isDefaultCharacter(character: Character): boolean {\r\n    return JSON.stringify(DEFAULT_CHARACTER) === JSON.stringify(character);\r\n}\r\n\r\nexport function hasDefaultKey(character: Character): boolean {\r\n    return character.key === DEFAULT_KEY;\r\n}","import { Character, CharacterRef } from \"./model/character\";\r\nimport { CustomItem } from \"./model/custom-item\";\r\nimport { getDefaultCharacter } from \"./data/default-character\";\r\nimport { Dictionary } from \"./model/dictionary\";\r\n\r\nconst CHARACTER_KEY = \"character\";\r\n\r\nfunction createCharacterKey(key: number): string {\r\n    return `${CHARACTER_KEY}:${key}`;\r\n}\r\n\r\nexport function loadCharacters(): CharacterRef[] {\r\n    const characters: CharacterRef[] = [getDefaultCharacter()];\r\n    for (let i = 0; i < localStorage.length; i++) {\r\n        const key = localStorage.key(i);\r\n        if (key === null) {\r\n            continue;\r\n        }\r\n        // charater:1337\r\n        if (/^character:\\d+$/i.test(key)) {\r\n            const characterJSON = localStorage.getItem(key);\r\n            if (characterJSON) {\r\n                const { key, name, streetName } = JSON.parse(characterJSON);\r\n                characters.push({ key, name, streetName });\r\n            }\r\n        }\r\n    }\r\n    characters.sort((a, b) => a.key - b.key);\r\n    return characters;\r\n}\r\n\r\nexport function loadCharacter(key: number): Character | undefined {\r\n    if (key === -1) {\r\n        return getDefaultCharacter();\r\n    }\r\n    const character = localStorage.getItem(createCharacterKey(key));\r\n    if (character) {\r\n        return JSON.parse(character);\r\n    } else {\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport function saveCharacter(character: Character) {\r\n    localStorage.setItem(createCharacterKey(character.key), JSON.stringify(character));\r\n}\r\n\r\nexport function clearCharacter(character: Character) {\r\n    localStorage.removeItem(createCharacterKey(character.key));\r\n}\r\n\r\nconst SELECTED_CHARACTER_KEY = \"selected-character\";\r\n\r\nexport function loadSelectedCharacter(): number {\r\n    const selectedCharacter = localStorage.getItem(SELECTED_CHARACTER_KEY);\r\n    if (selectedCharacter) {\r\n        return parseInt(selectedCharacter);\r\n    } else {\r\n        return -1;\r\n    }\r\n}\r\n\r\nexport function saveSelectedCharacter(key: number) {\r\n    localStorage.setItem(SELECTED_CHARACTER_KEY, key.toString());\r\n}\r\n\r\nexport function clearSelectedCharacter() {\r\n    localStorage.removeItem(SELECTED_CHARACTER_KEY);\r\n}\r\n\r\nconst CUSTOM_ITEM_KEY = \"custom-item\";\r\n\r\nfunction createCustomItemKey(path: string, name: string): string {\r\n    return `${CUSTOM_ITEM_KEY}:${path}.${name}}`;\r\n}\r\n\r\nexport function loadCustomItems(): Dictionary<CustomItem> {\r\n    const customItems: Dictionary<CustomItem> = {};\r\n    for (let i = 0; i < localStorage.length; i++) {\r\n        const key = localStorage.key(i);\r\n        if (key === null) {\r\n            // not a custom item\r\n            continue;\r\n        }\r\n        /*\r\n        custom-item:category.group.name => [\r\n            \"custom-item:category.group.name\",\r\n            \"category.group\",\r\n            \"name\"\r\n        ]\r\n        */\r\n        const result = /^custom-item:(?:((?:(?:\\w+)(?:\\.)?)*)\\.)?(\\w+)$/i.exec(key);\r\n        if (result) {\r\n            const path = result[1];\r\n            const itemJSON = localStorage.getItem(key);\r\n            if (itemJSON) {\r\n                const item = JSON.parse(itemJSON);\r\n                customItems[path] = item;\r\n            }\r\n        }\r\n    }\r\n    return customItems;\r\n}\r\n\r\nexport function saveCustomItem(path: string, item: CustomItem) {\r\n    const key = createCustomItemKey(path, item.Name);\r\n    localStorage.setItem(key, JSON.stringify(item));\r\n}\r\n\r\nexport function clearCustomItem(path: string, item: CustomItem) {\r\n    const key = createCustomItemKey(path, item.Name);\r\n    localStorage.removeItem(key);\r\n}","import { MetaType } from \"./character\";\r\n\r\nexport function getMetaTypeCost(metaType: MetaType): number {\r\n    switch (metaType) {\r\n        case MetaType.Human:\r\n            return 0;\r\n        case MetaType.Ork:\r\n            return 40;\r\n        case MetaType.Dwarf:\r\n            return 50;\r\n        case MetaType.Elf:\r\n            return 60;\r\n        case MetaType.Troll:\r\n            return 80;\r\n        default:\r\n            throw new Error(`Unknown meta-type '${metaType}'`);\r\n    }\r\n}","import { MetaType, Attribute, Character, isAwakened } from \"./character\";\r\n\r\nexport function getEffectiveAttributeRating(character: Character, name: string): number {\r\n    const attribute = character.attributes.find(a => a.name === name);\r\n    if (!attribute) {\r\n        throw new Error(`Could not find attribute with name '${name}'`);\r\n    }\r\n    return attribute.rating + getAttributeModifier(character.metaType, attribute);\r\n}\r\n\r\nexport function getAttributeModifier(metaType: MetaType, attribute: Attribute): number {\r\n    switch (metaType) {\r\n        case MetaType.Dwarf:\r\n            switch (attribute.name) {\r\n                case \"Body\":\r\n                    return 1;\r\n                case \"Reaction\":\r\n                    return -1;\r\n                case \"Strength\":\r\n                    return 2;\r\n                case \"Willpower\":\r\n                    return 1;\r\n            }\r\n            break;\r\n        case MetaType.Elf:\r\n            switch (attribute.name) {\r\n                case \"Agility\":\r\n                    return 1;\r\n                case \"Charisma\":\r\n                    return 2;\r\n            }\r\n            break;\r\n        case MetaType.Human:\r\n            switch (attribute.name) {\r\n                case \"Edge\":\r\n                    return 1;\r\n            }\r\n            break;\r\n        case MetaType.Ork:\r\n            switch (attribute.name) {\r\n                case \"Body\":\r\n                    return 3;\r\n                case \"Strength\":\r\n                    return 2;\r\n                case \"Charisma\":\r\n                    return -1;\r\n                case \"Logic\":\r\n                    return -1;\r\n            }\r\n            break;\r\n        case MetaType.Troll:\r\n            switch (attribute.name) {\r\n                case \"Body\":\r\n                    return 4;\r\n                case \"Agility\":\r\n                    return -1;\r\n                case \"Strength\":\r\n                    return 4;\r\n                case \"Charisma\":\r\n                    return -2;\r\n                case \"Intuition\":\r\n                    return -1;\r\n                case \"Logic\":\r\n                    return -1;\r\n            }\r\n            break;\r\n    }\r\n    return 0;\r\n}\r\n\r\nexport function getAttributeCost(rating: number): number {\r\n    switch (rating) {\r\n        case 1:\r\n            return -25;\r\n        case 2:\r\n            return -15;\r\n        case 3:\r\n            return 0;\r\n        case 4:\r\n            return 20;\r\n        case 5:\r\n            return 45;\r\n        case 6:\r\n            return 75;\r\n        case 7:\r\n            return 110;\r\n        default:\r\n            throw new Error(`Unsupported attribute rating ${rating}`);\r\n    }\r\n}\r\n\r\nexport function getAttributesCost(character: Character): number {\r\n    const awakened = isAwakened(character);\r\n    let cost = 0;\r\n    for (const attribute of character.attributes) {\r\n        if (attribute.name === \"Magic\" && !awakened) {\r\n            // character could be awakened, have their Magic attribute, then be mundane\r\n            // ignore any Magic changes in this case\r\n            continue;\r\n        }\r\n        cost += getAttributeCost(attribute.rating);\r\n    }\r\n    return cost;\r\n}","import { Skill, Character } from \"./character\";\r\nimport { CustomItem } from \"./custom-item\";\r\n\r\nexport type Skills = {\r\n    active: CustomItem[];\r\n    knowledge: CustomItem[];\r\n    language: CustomItem[];\r\n};\r\n\r\nexport function getActiveSkillCost(rating: number): number {\r\n    switch (rating) {\r\n        case -1:\r\n            return 0;\r\n        case 1:\r\n            return 5;\r\n        case 3:\r\n            return 15;\r\n        case 5:\r\n            return 30;\r\n        default:\r\n            throw new Error(`Unsupported skill rating ${rating}`);\r\n    }\r\n}\r\n\r\nexport function getActiveSkillsCost(activeSkills: Skill[]): number {\r\n    return activeSkills.map(s => getActiveSkillCost(s.rating)).reduce((a, b) => a + b, 0);\r\n}\r\n\r\nexport function getKnowledgeSkillCost(rating: number): number {\r\n    switch (rating) {\r\n        case 1:\r\n            return 2;\r\n        case 3:\r\n            return 7;\r\n        case 5:\r\n            return 15;\r\n        default:\r\n            throw new Error(`Unsupported skill rating ${rating}`);\r\n    }\r\n}\r\n\r\nexport function getKnowledgeSkillsCost(knowledgeSkills: Skill[]): number {\r\n    return knowledgeSkills.map(s => getKnowledgeSkillCost(s.rating)).reduce((a, b) => a + b, 0);\r\n}\r\n\r\nexport function getFreeKnowledgeSkillPoints(character: Character): number {\r\n    const intuition = character.attributes.find(a => a.name === \"Intuition\");\r\n    if (intuition === undefined) {\r\n        throw new Error(`Character '${character.streetName}' has no attribute 'Intuition'`);\r\n    }\r\n    const logic = character.attributes.find(a => a.name === \"Logic\");\r\n    if (logic === undefined) {\r\n        throw new Error(`Character '${character.streetName}' has no attribute 'Logic'`);\r\n    }\r\n    return (intuition.rating + logic.rating) * 10;\r\n}\r\n\r\nexport function getSkillsCost(character: Character): number {\r\n    const activeSkillCost = getActiveSkillsCost(character.activeSkills);\r\n    const knowledgeSkillCost = getKnowledgeSkillsCost(character.knowledgeSkills);\r\n    // exclude native language\r\n    const languageSkillCost = getKnowledgeSkillsCost(character.languageSkills);\r\n    const freeKnowledgePoints = getFreeKnowledgeSkillPoints(character);\r\n    return activeSkillCost + Math.max(knowledgeSkillCost + languageSkillCost - freeKnowledgePoints, 0);\r\n}","import { sentenceCase } from \"change-case\";\r\nimport { isArray } from \"util\";\r\nimport { Item } from \"./item\";\r\n\r\nexport type Dictionary<T> = { [key: string]: T };\r\n\r\nexport function transformAllItems<T>(parentPath: string, parentData: any, allItems: Dictionary<T[]>, transformValues: (childpath: string, childValues: any[]) => T[]) {\r\n\tfor (const childName of Object.keys(parentData)) {\r\n\t\tconst childPath = `${parentPath}.${childName}`;\r\n\t\tconst childData = parentData[childName];\r\n\t\tif (isArray(childData)) {\r\n\t\t\tallItems[childPath] = transformValues(childPath, childData as any[]);\r\n\t\t} else {\r\n\t\t\ttransformAllItems(childPath, childData, allItems, transformValues);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nconst itemCostMap = new Map<string,number>();\r\nexport function getItemCost<T extends Item>(item: Item, allItems: Dictionary<T[]>): number {\r\n\tconst key = `${item.path}.${item.name}`;\r\n\tif (itemCostMap.has(key)) {\r\n\t\treturn itemCostMap.get(key)!;\r\n\t}\r\n\tconst items = allItems[item.path];\r\n\tconst foundItem = items.find(g => g.name === item.name);\r\n\tif (!foundItem) {\r\n\t\tthrow new Error(`Could not find item with name '${item.name}' in list '${JSON.stringify(items)}' under path '${item.path}'`);\r\n\t}\r\n\r\n\tconst cost = parseInt(foundItem.cost);\r\n\titemCostMap.set(key, cost);\r\n\treturn cost;\r\n}\r\n\r\nexport function getNextParentPaths<T>(values: Dictionary<T>): Map<string,string> {\r\n\tconst parentPathToName = new Map<string,string>();\r\n\tconst paths = Object.keys(values).map(p => p.split(\".\"));\r\n\tlet differenceFound = false;\r\n\tlet componentIndex = 0;\r\n\twhile (!differenceFound) {\r\n\t\tif (componentIndex >= paths[0].length) {\r\n\t\t\tthrow new Error(`Searched through all path components and found no differences`);\r\n\t\t}\r\n\t\tfor (let pathIndex = 1; pathIndex < paths.length; pathIndex++) {\r\n\t\t\tif (paths[0][componentIndex] !== paths[pathIndex][componentIndex]) {\r\n\t\t\t\tdifferenceFound = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcomponentIndex++;\r\n\t}\r\n\tfor (const path of paths) {\r\n\t\tconst parentPath = path.slice(0, componentIndex).join(\".\");\r\n\t\tconst name = path[componentIndex - 1];\r\n\t\tparentPathToName.set(parentPath, sentenceCase(name));\r\n\t}\r\n\treturn parentPathToName;\r\n}\r\n\r\nexport function getChildNames<T>(values: Dictionary<T>, parentPath: string): string[] {\r\n\tconst childNames = new Set<string>();\r\n\tconst parents = parentPath.split(\".\");\r\n\tfor (const path of findChildPaths(values, parentPath)) {\r\n\t\tconst components = path.split(\".\");\r\n\t\tchildNames.add(components[parents.length]);\r\n\t}\r\n\treturn Array.from(childNames);\r\n}\r\n\r\nexport function getChildValues<T>(values: Dictionary<T[]>, parentPath: string): T[] {\r\n\tconst childValues: T[] = [];\r\n\tfor (const path of findChildPaths(values, parentPath)) {\r\n\t\tchildValues.push(...values[path]);\r\n\t}\r\n\treturn childValues;\r\n}\r\n\r\nexport function getChildSet<T>(values: Dictionary<T[]>, parentPath: string): Dictionary<T[]> {\r\n\tconst subset: Dictionary<T[]> = {};\r\n\tfor (const path of findChildPaths(values, parentPath)) {\r\n\t\tsubset[path] = values[path];\r\n\t}\r\n\treturn subset;\r\n}\r\n\r\nfunction findChildPaths<T>(values: Dictionary<T>, parentPath: string): string[] {\r\n\tconst childPaths: string[] = [];\r\n\tconst parents = parentPath.split(\".\");\r\n\tfor (const path of Object.keys(values)) {\r\n\t\tconst components = path.split(\".\");\r\n\t\tif (components.length < parents.length) {\r\n\t\t\tthrow new Error(`Child paths '${path}' must be longer than parent paths '${parentPath}'`);\r\n\t\t}\r\n\t\tlet match = true;\r\n\t\tfor (let i = 0; i < parents.length; i++) {\r\n\t\t\tif (parents[i] !== components[i]) {\r\n\t\t\t\tmatch = false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (match) {\r\n\t\t\tchildPaths.push(path);\r\n\t\t}\r\n\t}\r\n\treturn childPaths;\r\n}","import { CustomItem } from \"./custom-item\";\r\nimport { Item } from \"./item\";\r\nimport { Dictionary, transformAllItems, getItemCost } from \"./dictionary\";\r\nimport { Character } from \"./character\";\r\n\r\nexport type Quality = {\r\n    cost: string;\r\n} & Item;\r\n\r\nexport const qualitiesRoot = \"qualities\";\r\n\r\nexport function transformAllQualities(allData: any): Dictionary<Quality[]> {\r\n    const allQualities: Dictionary<Quality[]> = {};\r\n    transformAllItems(qualitiesRoot, allData, allQualities, transformQualityValues);\r\n    return allQualities;\r\n}\r\n\r\nfunction transformQualityValues(path: string, values: any[]): Quality[] {\r\n    const qualities: Quality[] = [];\r\n    for (const value of values) {\r\n        const name = value[\"Name\"];\r\n        const cost = value[\"Cost\"];\r\n        qualities.push({ path, name, cost });\r\n    }\r\n    return qualities;\r\n}\r\n\r\nexport type Qualities = {\r\n    positive: string[];\r\n    negative: string[]\r\n};\r\n\r\nexport type AllQualities = {\r\n    positive: CustomItem[];\r\n    negative: CustomItem[];\r\n}\r\n\r\nexport function getQualitiesCost(selectedQualities: string[], allQualities: CustomItem[]): number {\r\n    let cost = 0;\r\n    for (const selected of selectedQualities) {\r\n        const quality = allQualities.find(q => q.Name === selected);\r\n        if (!quality) {\r\n            throw new Error(`Could not find quality with name '${selected}' in list '${JSON.stringify(allQualities)}'`);\r\n        }\r\n        cost += parseInt(quality.Cost!);\r\n    }\r\n    return cost;\r\n}\r\n\r\nexport function getAllQualitiesCost(selectedQualities: { positive: string[], negative: string[] }, allQualities: AllQualities): number {\r\n    let cost = 0;\r\n    cost += getQualitiesCost(selectedQualities.positive, allQualities.positive);\r\n    cost += getQualitiesCost(selectedQualities.negative, allQualities.negative);\r\n    return cost;\r\n}\r\n\r\nexport function getCharacterQualitiesCost(character: Character, allQualities: Dictionary<Quality[]>): number {\r\n    let cost = 0;\r\n    for (const quality of character.qualities) {\r\n        cost += getItemCost(quality, allQualities);\r\n    }\r\n    return cost;\r\n}","import { Dictionary, transformAllItems, getItemCost } from \"./dictionary\";\r\nimport { Item } from \"./item\";\r\nimport { Character } from \"./character\";\r\n\r\nexport type Gear = {\r\n\tavailability: string;\r\n\tcost: string;\r\n\tcostLabel: string;\r\n} & Item;\r\n\r\nexport const gearRoot = \"gear\";\r\n\r\nexport function transformAllGear(allData: any): Dictionary<Gear[]> {\r\n\tconst allGear: Dictionary<Gear[]> = {};\r\n\ttransformAllItems(gearRoot, allData, allGear, transformGearValues);\r\n\treturn allGear;\r\n}\r\n\r\nfunction transformGearValues(path: string, values: any[]): Gear[] {\r\n\tconst items: Gear[] = [];\r\n\tfor (const item of values.map(v => transformGearItem(path, v))) {\r\n\t\t// gear with multiple versions need to be split into separate items\r\n\t\tif (/^([\\w-\\s]+)\\s+\\(([\\w-\\s]+(,\\s*)?)+\\)$/i.test(item.name)) {\r\n\t\t\titems.push(...splitGearItems(path, item));\r\n\t\t} else {\r\n\t\t\titems.push(item);\r\n\t\t}\r\n\t}\r\n\tfor (const item of items) {\r\n\t\tfinalizeGearItem(item);\r\n\t}\r\n\treturn items;\r\n}\r\n\r\nfunction transformGearItem(path: string, data: any): Gear {\r\n\tconst item: Gear = {\r\n\t\tpath,\r\n\t\tname: \"[NAME]\",\r\n\t\tavailability: \"[AVAILABILITY]\",\r\n\t\tcost: \"[COST]\",\r\n\t\tcostLabel: \"[COST]\"\r\n\t};\r\n\tfor (const propName of Object.keys(data)) {\r\n\t\tconst propValue = data[propName];\r\n\t\tif (propName === \"Name\") {\r\n\t\t\titem.name = propValue as string;\r\n\t\t} else if (propName === \"Availability\") {\r\n\t\t\titem.availability = propValue as string;\r\n\t\t} else if (propName === \"Cost\") {\r\n\t\t\titem.costLabel = propValue as string;\r\n\t\t} else {\r\n\t\t\t// assume a string (not that it actually matters)\r\n\t\t\titem[propName] = propValue as string;\r\n\t\t}\r\n\t}\r\n\treturn item;\r\n}\r\n\r\nfunction splitGearItems(path: string, item: Gear): Gear[] {\r\n\tconst itemVersions: Gear[] = [];\r\n\t/*\r\n\t\"Some Thingy (1, 2, 3)\" => [\r\n\t\t\"Some Thingy (A, B, C)\"\r\n\t\t\"Some Thingy\",\r\n\t\t\"A, B, C\"\r\n\t]\r\n\t*/\r\n\tconst groupResult = /^([\\w-\\s]+)\\s+\\(((?:(?:[\\w-\\s]+)(?:,\\s*)?)+)\\)$/i.exec(item.name);\r\n\tif (groupResult === null) {\r\n\t\tthrow new Error(`Gear item's name '${item.name}' does not contain multiple ratings`);\r\n\t}\r\n\tconst namePrefix = groupResult[1];\r\n\tconst nameSuffixes = groupResult[2].split(\",\").map(r => r.trim());\r\n\tconst itemCount = nameSuffixes.length;\r\n\tfor (let i = 0; i < itemCount; i++) {\r\n\t\tconst itemVersion: Gear = {\r\n\t\t\tpath,\r\n\t\t\tname: `${namePrefix} - ${nameSuffixes[i]}`,\r\n\t\t\tavailability: \"[AVAILABILITY]\",\r\n\t\t\tcost: \"[COST]\",\r\n\t\t\tcostLabel: \"[COST]\"\r\n\t\t};\r\n\t\tfor (const propName of Object.keys(item)) {\r\n\t\t\t// use lower-case names as this is the Gear object, not the raw object from the JSON file\r\n\t\t\tif (propName === \"name\") {\r\n\t\t\t\t// skip name - it is already set\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif (propName === \"cost\") {\r\n\t\t\t\t// skip cost - it is determined in the finalize step, after splitting\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// all other properties are strings\r\n\t\t\tconst propValue = item[propName] as string;\r\n\t\t\tconst splitValues = propValue.split(\",\").map(v => v.trim());\r\n\t\t\tif (splitValues.length === 1) {\r\n\t\t\t\t// same value for all versions\r\n\t\t\t\titemVersion[propName] = propValue;\r\n\t\t\t} else if (splitValues.length === itemCount) {\r\n\t\t\t\titemVersion[propName] = splitValues[i];\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error(`Properties should have a single value or the same amount as there are version names ${itemCount} - found ${splitValues.length}`);\r\n\t\t\t}\r\n\t\t}\r\n\t\titemVersions.push(itemVersion);\r\n\t}\r\n\treturn itemVersions;\r\n}\r\n\r\nfunction finalizeGearItem(item: Gear) {\r\n\t/*\r\n\t1000\r\n\t+500\r\n\tx2\r\n\t50 (per dose)\r\n\t*/\r\n\tconst costResult = /^(?:x|\\+)?(\\d+)\\s*(?:\\(([\\w\\s]+)\\))?$/i.exec(item.costLabel);\r\n\tif (costResult) {\r\n\t\titem.cost = costResult[1];\r\n\t\tif (isNaN(parseInt(item.cost))) {\r\n\t\t\tthrow new Error(`Gear item '${item.name}' has unsupported cost label '${item.costLabel}'`);\r\n\t\t}\r\n\t} else {\r\n\t\titem.cost = \"0\";\r\n\t}\r\n}\r\n\r\nexport function computeItemCost(item: Item, allGear: Dictionary<Gear[]>): number {\r\n\tconst baseCost = getItemCost(item, allGear);\r\n\treturn baseCost * getGradeCostMultipler(item.grade as Grade);\r\n}\r\n\r\nexport function createSavedItem(path: string, item: Item): Item {\r\n\tconst { name, count, grade } = item;\r\n\tconst savedItem = { path, name, count, grade };\r\n\t// do not want to save optional properties\r\n\t// grade (used, alpha, beta, delta) only applies to augmentations\r\n\tif (grade === undefined) {\r\n\t\tdelete savedItem.grade;\r\n\t}\r\n\treturn savedItem;\r\n}\r\n\r\nexport enum Grade {\r\n\tUsed = \"Used\",\r\n\tAlpha = \"Alpha\",\r\n\tBeta = \"Beta\",\r\n\tDelta = \"Delta\"\r\n}\r\n\r\nexport function getGradeCostMultipler(grade: Grade = Grade.Alpha): number {\r\n\tswitch (grade) {\r\n\t\tcase Grade.Used:\r\n\t\t\treturn 0.5;\r\n\t\tcase Grade.Alpha:\r\n\t\t\treturn 1;\r\n\t\tcase Grade.Beta:\r\n\t\t\treturn 5;\r\n\t\tcase Grade.Delta:\r\n\t\t\treturn 15;\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown augmentation grade '${grade}'`);\r\n\t}\r\n}\r\n\r\nexport function getGradeEssenseMultiplier(grade: Grade = Grade.Alpha): number {\r\n\tswitch (grade) {\r\n\t\tcase Grade.Used:\r\n\t\t\treturn 1.2;\r\n\t\tcase Grade.Alpha:\r\n\t\t\treturn 1;\r\n\t\tcase Grade.Beta:\r\n\t\t\treturn 0.7;\r\n\t\tcase Grade.Delta:\r\n\t\t\treturn 0.5;\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown augmentation grade '${grade}'`);\r\n\t}\r\n}\r\n\r\nexport function getCharacterGearNuyenCost(character: Character, allGear: Dictionary<Gear[]>): number {\r\n\tlet nuyen = 0;\r\n\tfor (const item of character.gear) {\r\n\t\tnuyen += computeItemCost(item, allGear) * parseInt(item.count);\r\n\t}\r\n\treturn nuyen;\r\n}\r\n\r\nexport function getCharacterGearKarmaCost(nuyen: number): number {\r\n\t// Nuyen is bought at a rate of 5 Karma for 10000¥\r\n\t// All unspent nuyen is lost so round up\r\n\treturn Math.ceil(nuyen / 10000) * 5;\r\n}","import { Character } from \"./character\";\r\nimport { getMetaTypeCost } from \"./meta-type\";\r\nimport { getAttributesCost } from \"./attributes\";\r\nimport { getSkillsCost } from \"./skills\";\r\nimport { getCharacterQualitiesCost } from \"./quality\";\r\nimport { State } from \"./state\";\r\nimport { getCharacterGearKarmaCost, getCharacterGearNuyenCost } from \"./gear\";\r\n\r\nexport type Karma = {\r\n    total: number;\r\n    spent: number;\r\n    available: number;\r\n};\r\n\r\nconst STARTING_KARMA = 500;\r\n\r\nexport function getDefaultKarma(): Karma {\r\n    return {\r\n        total: STARTING_KARMA,\r\n        spent: 0,\r\n        available: STARTING_KARMA\r\n    };\r\n}\r\n\r\nexport function getCharacterKarma(karma: Karma, character: Character, state: State): Karma {\r\n    const { total } = karma;\r\n    let spent = 0;\r\n    spent += getMetaTypeCost(character.metaType);\r\n    spent += getCharacterQualitiesCost(character, state.allQualities);\r\n    spent += getAttributesCost(character);\r\n    spent += getSkillsCost(character);\r\n    spent += getCharacterGearKarmaCost(getCharacterGearNuyenCost(character, state.allGear));\r\n    const available = total - spent;\r\n    return { total, spent, available };\r\n}","import { Reducer } from \"react\";\r\nimport { State } from \"./model/state\";\r\nimport { getDefaultCharacter, isDefaultCharacter, hasDefaultKey } from \"./data/default-character\";\r\nimport { Character, CharacterRef } from \"./model/character\";\r\nimport { saveCharacter, clearCharacter, loadCharacter, saveCustomItem } from \"./persistance\";\r\nimport { getDefaultKarma, getCharacterKarma } from \"./model/karma\";\r\nimport { Quality } from \"./model/quality\";\r\nimport { Skills } from \"./model/skills\";\r\nimport { CustomItem } from \"./model/custom-item\";\r\nimport { Spells } from \"./model/magic\";\r\nimport { Gear } from \"./model/gear\";\r\nimport { Dictionary } from \"./model/dictionary\";\r\n\r\nexport enum ActionType {\r\n    UpdateCharacter = \"updateCharacter\",\r\n    SaveCharacter = \"saveCharacter\",\r\n    ClearCharacter = \"clearCharacter\",\r\n    SelectCharacter = \"selectCharacter\",\r\n    LoadQualities = \"loadQualities\",\r\n    LoadSkills = \"loadSkills\",\r\n    LoadContacts = \"loadContacts\",\r\n    LoadSpells = \"loadSpells\",\r\n    LoadGear = \"loadGear\",\r\n    LoadCustomItems = \"loadCustomItems\",\r\n    AddCustomItem = \"addCustomItem\"\r\n}\r\n\r\nexport type Action = {\r\n    type: ActionType;\r\n    data?: any;\r\n};\r\n\r\nexport type UpdateCharacterData = Character;\r\nexport type SelectCharacterData = CharacterRef;\r\nexport type LoadQualitiesData = Dictionary<Quality[]>;\r\nexport type LoadSkillsData = Skills;\r\nexport type LoadContactsData = CustomItem[];\r\nexport type LoadSpellsData = Spells;\r\nexport type LoadGearData = Dictionary<Gear[]>;\r\nexport type LoadCustomItemsData = Dictionary<CustomItem>;\r\nexport type AddCustomItemData = { path: string, item: CustomItem };\r\n\r\nexport const reducer: Reducer<State, Action> = (state: State, action: Action): State => {\r\n    switch (action.type) {\r\n        case ActionType.UpdateCharacter: {\r\n            const selectedCharacter = action.data as UpdateCharacterData;\r\n            const karma = getCharacterKarma(state.karma, selectedCharacter, state);\r\n            return { ...state, selectedCharacter, karma };\r\n        }\r\n        case ActionType.SaveCharacter: {\r\n            if (hasDefaultKey(state.selectedCharacter)) {\r\n                // character has not been saved yet\r\n                if (isDefaultCharacter(state.selectedCharacter)) {\r\n                    // don't save copies of the empty character\r\n                    break;\r\n                }\r\n                state.selectedCharacter.key = Date.now();\r\n                const { key, name, streetName } = state.selectedCharacter;\r\n                state.characters.push({ key, name, streetName });\r\n            }\r\n            // the list of characters is not saved separatly - it is constructed from all the available characters\r\n            saveCharacter(state.selectedCharacter);\r\n            return { ...state};\r\n        }\r\n        case ActionType.ClearCharacter: {\r\n            clearCharacter(state.selectedCharacter);\r\n            const characters = state.characters\r\n                .filter(c => c.key !== state.selectedCharacter.key)\r\n                .map(({ key, name, streetName }) => ({ key, name, streetName }));\r\n            return { ...state, characters, selectedCharacter: getDefaultCharacter(), karma: getDefaultKarma() };\r\n        }\r\n        case ActionType.SelectCharacter: {\r\n            const characterRef = action.data as SelectCharacterData;\r\n            // Loading the app with a saved character can throw an error calculating karma cost, as the available data (qualities, etc) have not been loaded yet\r\n            // saveSelectedCharacter(characterRef.key);\r\n            const selectedCharacter = loadCharacter(characterRef.key);\r\n            if (!selectedCharacter) {\r\n                throw new Error(`Could not find saved character ${JSON.stringify(characterRef)}`);\r\n            }\r\n            const karma = getCharacterKarma(state.karma, selectedCharacter, state);\r\n            return { ...state, selectedCharacter, karma};\r\n        }\r\n        case ActionType.LoadQualities: {\r\n            const allQualities = action.data as LoadQualitiesData;\r\n            return { ...state, allQualities };\r\n        }\r\n        case ActionType.LoadSkills: {\r\n            const allSkills = action.data as LoadSkillsData;\r\n            return { ...state, allSkills };\r\n        }\r\n        case ActionType.LoadContacts: {\r\n            const allContacts = action.data as LoadContactsData;\r\n            return { ...state, allContacts}\r\n        }\r\n        case ActionType.LoadGear: {\r\n            const allGear = action.data as LoadGearData;\r\n            return { ...state, allGear };\r\n        }\r\n        case ActionType.LoadSpells: {\r\n            const allSpells = action.data as LoadSpellsData;\r\n            return { ...state, allSpells };\r\n        }\r\n        case ActionType.LoadCustomItems: {\r\n            const customItems = action.data as LoadCustomItemsData;\r\n            return { ...state, customItems };\r\n        }\r\n        case ActionType.AddCustomItem: {\r\n            const newItem = action.data as AddCustomItemData;\r\n            // persist item in local storage for later\r\n            saveCustomItem(newItem.path, newItem.item);\r\n            const customItems = { ...state.customItems };\r\n            customItems[newItem.path] = newItem.item;\r\n            return { ...state, customItems };\r\n        }\r\n    }\r\n    return { ...state };\r\n}\r\n\r\nexport const INITIAL_STATE: State = {\r\n    characters: [],\r\n    selectedCharacter: getDefaultCharacter(),\r\n    karma: getDefaultKarma(),\r\n    allQualities: { positive: [], negative: [] },\r\n    allSkills: { active: [], knowledge: [], language: [] },\r\n    allContacts: [],\r\n    allSpells: { combat: [], detection: [], health: [], illusion: [], manipulation: [] },\r\n    allGear: {},\r\n    customItems: {},\r\n};","import { createContext, Dispatch, useContext } from \"react\";\r\nimport { State } from \"./model/state\";\r\nimport { Action, INITIAL_STATE } from \"./reducer\";\r\n\r\nexport const DispatchContext = createContext<Dispatch<Action>>(() => {});\r\n\r\nexport const useDispatch = (): Dispatch<Action> => {\r\n    return useContext(DispatchContext);\r\n}\r\n\r\nexport const StateContext = createContext<State>(INITIAL_STATE);\r\n\r\nexport const useGlobalState = <K extends keyof State>(property: K) => {\r\n    const state = useContext(StateContext);\r\n    return state[property];\r\n}","import React, { FC } from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { CharacterRef } from \"../model/character\";\r\n\r\n\r\ntype Props = {\r\n    character: CharacterRef;\r\n};\r\n\r\nconst CharacterName: FC<Props> = (props: Props) => {\r\n    const { character } = props;\r\n    const { name, streetName } = character;\r\n    if (!name && !streetName) {\r\n        return <Typography>= New Character =</Typography>;\r\n    }\r\n    if (!streetName) {\r\n        return <Typography>{name}</Typography>\r\n    }\r\n    if (!name) {\r\n        return <Typography>{streetName}</Typography>\r\n    }\r\n    return <Typography>{name} aka {streetName}</Typography>\r\n};\r\n\r\nexport default CharacterName;","import React, { FC } from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\r\nimport { useGlobalState, useDispatch } from \"../context\";\r\nimport CharacterName from \"./CharacterName\";\r\nimport { CharacterRef } from \"../model/character\";\r\nimport { ActionType, SelectCharacterData } from \"../reducer\";\r\n\r\nconst SelectCharacter: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const characters = useGlobalState(\"characters\");\r\n\r\n    const onCharacterClick = (character: CharacterRef) => {\r\n        const data: SelectCharacterData = character;\r\n        dispatch({ type: ActionType.SelectCharacter, data });\r\n    };\r\n    return (\r\n        <List subheader={\r\n            <ListSubheader>Characters</ListSubheader>\r\n            }\r\n            >\r\n            {\r\n                characters.map(c => (\r\n                    <ListItem key={c.key} onClick={() => onCharacterClick(c)}>\r\n                        <CharacterName character={c} />\r\n                    </ListItem>\r\n                ))\r\n            }\r\n        </List>\r\n    )\r\n};\r\n\r\nexport default SelectCharacter;","import { MetaType } from \"../model/character\";\r\n\r\nexport const ALL_META_TYPES: MetaType[] = [\r\n    MetaType.Human,\r\n    MetaType.Ork,\r\n    MetaType.Dwarf,\r\n    MetaType.Elf,\r\n    MetaType.Troll\r\n];\r\n","import React, { FC } from \"react\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n\troot: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"row\",\r\n\t\tflexWrap: \"wrap\",\r\n\t\tjustifyContent: \"flex-start\"\r\n\t},\r\n\tchip: {\r\n\t\tmarginRight: 10,\r\n\t\tmarginBottom: 10,\r\n\t}\r\n});\r\n\r\ntype Props = {\r\n\tvalues: any[];\r\n\tcreateChipLabel: (value: any) => string;\r\n\tonDeleteValue: (value: any) => void;\r\n};\r\nconst ChipCollection: FC<Props> = (props: Props) => {\r\n\tconst { values, createChipLabel, onDeleteValue } = props;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\treturn (\r\n\t\t<div className={classes.root}>\r\n\t\t\t{\r\n\t\t\t\tvalues.map(v =>\r\n\t\t\t\t\t<Chip\r\n\t\t\t\t\t\tclassName={classes.chip}\r\n\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\tlabel={createChipLabel(v)}\r\n\t\t\t\t\t\tonDelete={() => onDeleteValue(v)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ChipCollection;","import { Dictionary } from \"./dictionary\";\r\n\r\nexport type Item = {\r\n\tpath: string;\r\n\tname: string;\r\n} & Dictionary<string>;\r\n\r\nexport function getItemSubset(items: Item[], parentPath: string): Item[] {\r\n\tconst subItems: Item[] = [];\r\n\tfor (const item of items) {\r\n\t\tif (item.path === parentPath || item.path.startsWith(`${parentPath}.`)) {\r\n\t\t\tsubItems.push(item);\r\n\t\t}\r\n\t}\r\n\treturn subItems;\r\n}","import React, { FC } from \"react\";\r\nimport { Grade } from \"../model/gear\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n\troot: {\r\n\t\tminWidth: 78,\r\n\t\tmaxWidth: 78,\r\n\t\twidth: 78,\r\n\t},\r\n})\r\ntype Props = {\r\n\tdisabled: boolean;\r\n\tgrade: Grade;\r\n\tonUpdateGrade: (newGrade: Grade) => void;\r\n};\r\nconst GradeButton: FC<Props> = (props: Props) => {\r\n\tconst { disabled, grade, onUpdateGrade } = props;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\treturn (\r\n\t\t<Button\r\n\t\t\tclassName={classes.root}\r\n\t\t\tdisabled={disabled}\r\n\t\t\tvariant=\"outlined\"\r\n\t\t\tonClick={() => onUpdateGrade(nextGrade(grade))}\r\n\t\t>\r\n\t\t\t{grade}\r\n\t\t</Button>\r\n\t);\r\n};\r\n\r\nexport default GradeButton;\r\n\r\nfunction nextGrade(grade: Grade): Grade {\r\n\tswitch (grade)\t {\r\n\t\tcase Grade.Used:\r\n\t\t\treturn Grade.Alpha;\r\n\t\tcase Grade.Alpha:\r\n\t\t\treturn Grade.Beta;\r\n\t\tcase Grade.Beta:\r\n\t\t\treturn Grade.Delta;\r\n\t\tcase Grade.Delta:\r\n\t\t\treturn Grade.Used;\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown augmentation grade '${grade}'`);\r\n\t}\r\n}","import React, { FC } from \"react\";\r\nimport { Item } from \"../model/item\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { Grade, gearRoot } from \"../model/gear\";\r\nimport GradeButton from \"./GradeButton\";\r\n\r\nconst useStyles = makeStyles({\r\n\troot: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"row\",\r\n\t\tpadding: 10,\r\n\t\tmargin: 10,\r\n\t},\r\n\tname: {\r\n\t\twidth: 400,\r\n\t\ttextAlign: \"left\",\r\n\t},\r\n\tcost: {\r\n\t\twidth: 150,\r\n\t},\r\n});\r\n\r\ntype Props = {\r\n\titem: Item;\r\n\tcreateCostLabel: (item: Item) => string;\r\n\tonUpdateItem: (newItem: Item) => void;\r\n};\r\nconst ItemPickerCard: FC<Props> = (props: Props) => {\r\n\tconst { item, createCostLabel, onUpdateItem } = props;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tconst count = parseInt(item.count);\r\n\tconst costLabel = createCostLabel(item);\r\n\r\n\tconst includeGrade = item.path.startsWith(`${gearRoot}.augmentations`);\r\n\r\n\tconst grade = item.grade as Grade || Grade.Alpha;\r\n\r\n\tconst handleAdd = () => {\r\n\t\tonUpdateItem({ ...item, count: (count + 1).toString() });\r\n\t};\r\n\r\n\tconst handleRemove = () => {\r\n\t\tonUpdateItem({ ...item, count: Math.max(count - 1, 0).toString() });\r\n\t};\r\n\r\n\tconst handleGradeToggle = (newGrade: Grade) => {\r\n\t\tconst newItem = { ...item, grade: newGrade };\r\n\t\t// alpha is the default for cyber/bio and we don't want to 'dirty' all gear items with unnecessary grade properties\r\n\t\t// if it is never toggled it will never get added in the first place, so do not need to consider grade in the add/remove handlers\r\n\t\tif (newGrade === Grade.Alpha) {\r\n\t\t\tdelete newItem.grade;\r\n\t\t}\r\n\t\tonUpdateItem(newItem);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Paper\r\n\t\t\tclassName={classes.root}\r\n\t\t\televation={3}\r\n\t\t>\r\n\t\t\t<Typography className={classes.name} style={{lineHeight: \"36px\"}}>{item.name}</Typography>\r\n\t\t\t<span className={classes.cost}>\r\n\t\t\t\t<Badge badgeContent={count} color=\"secondary\">\r\n\t\t\t\t\t<Typography style={{lineHeight: \"36px\"}}>({costLabel})</Typography>\r\n\t\t\t\t</Badge>\r\n\t\t\t</span>\r\n\t\t\t<ButtonGroup>\r\n\t\t\t\t<Button onClick={handleAdd}>\r\n\t\t\t\t\t<AddIcon />\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Button onClick={handleRemove}>\r\n\t\t\t\t\t<RemoveIcon />\r\n\t\t\t\t</Button>\r\n\t\t\t\t{\r\n\t\t\t\t\tincludeGrade ? <GradeButton disabled={count === 0} grade={grade} onUpdateGrade={handleGradeToggle} /> : null\r\n\t\t\t\t}\r\n\t\t\t</ButtonGroup>\r\n\t\t</Paper>\r\n\t);\r\n};\r\n\r\nexport default ItemPickerCard;","import React, { FC, Fragment } from \"react\";\r\nimport { Item } from \"../model/item\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport ItemPickerCard from \"./ItemPickerCard\";\r\n\r\nconst useStyles = makeStyles({\r\n\titems: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"column\",\r\n\t}\r\n});\r\n\r\ntype Props = {\r\n\tlabel: string;\r\n\titems: Item[];\r\n\tcreateCostLabel: (item: Item) => string;\r\n\tonUpdateItems: (newItems: Item[]) => void;\r\n};\r\nconst ItemPickerSection: FC<Props> = (props: Props) => {\r\n\tconst { items, createCostLabel, onUpdateItems } = props;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tconst handleUpdate = (item: Item) => {\r\n\t\tconst newItems = [...items];\r\n\t\tconst index = items.findIndex(i => i.name === item.name);\r\n\t\tnewItems[index] = item;\r\n\t\tonUpdateItems(newItems);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<Divider />\r\n\t\t\t<div className={classes.items}>\r\n\t\t\t\t{\r\n\t\t\t\t\titems\r\n\t\t\t\t\t?\r\n\t\t\t\t\titems.map(i =>\r\n\t\t\t\t\t\t<ItemPickerCard\r\n\t\t\t\t\t\t\titem={i}\r\n\t\t\t\t\t\t\tcreateCostLabel={createCostLabel}\r\n\t\t\t\t\t\t\tonUpdateItem={handleUpdate}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)\r\n\t\t\t\t\t:\r\n\t\t\t\t\t<div>No items</div>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default ItemPickerSection;","import React, { FC, useState, ChangeEvent } from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport { Item } from \"../model/item\";\r\nimport { Dictionary } from \"../model/dictionary\";\r\nimport { sentenceCase } from \"change-case\";\r\nimport ItemPickerSection from \"./ItemPickerSection\";\r\n\r\n\r\ntype Props = {\r\n\topen: boolean;\r\n\tonClose: () => void;\r\n\ttitle: string;\r\n\tallItems: Dictionary<Item[]>;\r\n\tcreateCostLabel: (item: Item) => string;\r\n\tonUpdateAllItems: (newItems: Dictionary<Item[]>) => void;\r\n};\r\nconst ItemPickerDialog: FC<Props> = (props: Props) => {\r\n\tconst { open, onClose, title, allItems, createCostLabel, onUpdateAllItems } = props;\r\n\r\n\tconst allPaths = Object.keys(allItems);\r\n\r\n\tconst paths = [...allPaths];\r\n\r\n\tconst pathToLabel = new Map<string,string>();\r\n\tfor (const path of paths) {\r\n\t\tconst components = path.split(\".\");\r\n\t\tconst finalComponent = components[components.length - 1];\r\n\t\tconst label = sentenceCase(finalComponent);\r\n\t\tpathToLabel.set(path, label);\r\n\t}\r\n\r\n\tconst [group, setGroup] = useState(paths[0]);\r\n\r\n\t// once the dialog is rendered the state is 'remembered' for next use which could be different data\r\n\tif (paths.find(p => p === group) === undefined) {\r\n\t\tsetGroup(paths[0]);\r\n\t}\r\n\r\n\tconst handleGroupChange = (event: ChangeEvent<any>) => {\r\n\t\tsetGroup(event.target.value);\r\n\t};\r\n\r\n\tconst handleUpdateItems = (subItems: Item[]) => {\r\n\t\tconst newAllItems: Dictionary<Item[]> = { ...allItems };\r\n\t\tnewAllItems[group] = subItems;\r\n\t\tonUpdateAllItems(newAllItems);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Dialog open={open} onClose={onClose}>\r\n\t\t\t<DialogTitle>{title}</DialogTitle>\r\n\t\t\t<DialogContent>\r\n\t\t\t\t{\r\n\t\t\t\t\tpaths.length > 1\r\n\t\t\t\t\t?\r\n\t\t\t\t\t<Select\r\n\t\t\t\t\t\tid=\"group\"\r\n\t\t\t\t\t\tvalue={group}\r\n\t\t\t\t\t\tdisplayEmpty\r\n\t\t\t\t\t\tonChange={handleGroupChange}\r\n\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpaths.map(p => (\r\n\t\t\t\t\t\t\t\t<MenuItem\r\n\t\t\t\t\t\t\t\t\tkey={p}\r\n\t\t\t\t\t\t\t\t\tvalue={p}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{pathToLabel.get(p)!}\r\n\t\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</Select>\r\n\t\t\t\t\t:\r\n\t\t\t\t\tnull\r\n\t\t\t\t}\r\n\t\t\t\t<ItemPickerSection\r\n\t\t\t\t\tlabel={pathToLabel.get(group)!}\r\n\t\t\t\t\titems={allItems[group]}\r\n\t\t\t\t\tcreateCostLabel={createCostLabel}\r\n\t\t\t\t\tonUpdateItems={handleUpdateItems}\r\n\t\t\t\t/>\r\n\t\t\t</DialogContent>\r\n\t\t</Dialog>\r\n\t);\r\n};\r\n\r\nexport default ItemPickerDialog;","import React, { FC, Fragment, useState } from \"react\";\r\nimport { Dictionary, getNextParentPaths } from \"../model/dictionary\";\r\nimport { Item, getItemSubset } from \"../model/item\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport ItemPickerDialog from \"./ItemPickerDialog\";\r\nimport { Menu, MenuItem } from \"@material-ui/core\";\r\nimport { createSavedItem } from \"../model/gear\";\r\nimport { getChildSet } from \"../model/dictionary\";\r\nimport { sentenceCase } from \"change-case\";\r\n\r\ntype Props = {\r\n\ttitle: string;\r\n\titems: Item[];\r\n\tallItems: Dictionary<Item[]>;\r\n\tcreateCostLabel: (item: Item) => string;\r\n\tonUpdateItems: (newItems: Item[]) => void;\r\n};\r\nconst ItemPickerButton: FC<Props> = (props: Props) => {\r\n\tconst { title, items, allItems, createCostLabel, onUpdateItems } = props;\r\n\r\n\tconst [open, setOpen] = useState(false);\r\n\tconst handleClose = () => setOpen(false);\r\n\r\n\tconst parentPathsToName = getNextParentPaths(allItems);\r\n\r\n\tconst parentPaths: string[] = [];\r\n\tfor (const parentPath of parentPathsToName.keys()) {\r\n\t\tparentPaths.push(parentPath);\r\n\t}\r\n\r\n\tconst [parentPath, setParentPath] = useState(parentPaths[0]);\r\n\r\n\tconst [menuAnchor, setMenuAnchor] = useState<HTMLButtonElement | null>(null);\r\n\r\n\tconst handleMenuClick = (parentPath: string) => {\r\n\t\tsetParentPath(parentPath);\r\n\t\tsetMenuAnchor(null);\r\n\t\tsetOpen(true);\r\n\t};\r\n\r\n\tconst allChildItems = getChildSet(allItems, parentPath);\r\n\r\n\tconst allCountedItems: Dictionary<Item[]> = {};\r\n\tlet hasItems = false;\r\n\tfor (const path of Object.keys(allChildItems)) {\r\n\t\thasItems = true;\r\n\t\tconst localItems = [...allChildItems[path]];\r\n\t\tconst matchingItems = getItemSubset(items, parentPath);\r\n\t\tfor (const localItem of localItems) {\r\n\t\t\tconst matchingItem = matchingItems.find(i => i.name === localItem.name);\r\n\t\t\tif (matchingItem) {\r\n\t\t\t\tlocalItem.count = matchingItem.count;\r\n\t\t\t\tlocalItem.grade = matchingItem.grade;\r\n\t\t\t} else {\r\n\t\t\t\tlocalItem.count = \"0\";\r\n\t\t\t}\r\n\t\t}\r\n\t\tallCountedItems[path] = localItems;\r\n\t}\r\n\r\n\tconst handleUpdateAllItems = (newCountedItems: Dictionary<Item[]>) => {\r\n\t\tconst newItems: Item[] = [...items];\r\n\r\n\t\tfor (const path of Object.keys(newCountedItems)) {\r\n\t\t\tfor (const localItem of newCountedItems[path]) {\r\n\t\t\t\tconst includeItem = parseInt(localItem.count) > 0;\r\n\t\t\t\tconst index = newItems.findIndex(i => i.path === path && i.name === localItem.name);\r\n\t\t\t\tif (index > -1) {\r\n\t\t\t\t\tif (includeItem) {\r\n\t\t\t\t\t\tnewItems[index] = createSavedItem(path, localItem);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnewItems.splice(index, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (includeItem) {\r\n\t\t\t\t\tnewItems.push(createSavedItem(path, localItem));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tonUpdateItems(newItems);\r\n\t};\r\n\t\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<IconButton\r\n\t\t\t\tonClick={event => setMenuAnchor(event.currentTarget)}\r\n\t\t\t\tcolor=\"secondary\"\r\n\t\t\t\tsize=\"medium\"\r\n\t\t\t\tdisableRipple\r\n\t\t\t>\r\n\t\t\t\t<EditIcon />\r\n\t\t\t</IconButton>\r\n\t\t\t<Menu\r\n\t\t\t\tanchorEl={menuAnchor}\r\n\t\t\t\topen={Boolean(menuAnchor)}\r\n\t\t\t\tonClose={() => setMenuAnchor(null)}\r\n\t\t\t>\r\n\t\t\t\t{\r\n\t\t\t\t\tparentPaths.map(p => (\r\n\t\t\t\t\t\t<MenuItem key={p} onClick={() => {handleMenuClick(p)}}>\r\n\t\t\t\t\t\t\t{sentenceCase(parentPathsToName.get(p)!)}\r\n\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t))\r\n\t\t\t\t}\r\n\t\t\t</Menu>\r\n\t\t\t{\r\n\t\t\t\thasItems\r\n\t\t\t\t?\r\n\t\t\t\t<ItemPickerDialog\r\n\t\t\t\t\topen={open}\r\n\t\t\t\t\tonClose={handleClose}\r\n\t\t\t\t\ttitle={`${title} - ${parentPathsToName.get(parentPath)!}`}\r\n\t\t\t\t\tallItems={allCountedItems}\r\n\t\t\t\t\tcreateCostLabel={createCostLabel}\r\n\t\t\t\t\tonUpdateAllItems={handleUpdateAllItems}\r\n\t\t\t\t/>\r\n\t\t\t\t:\r\n\t\t\t\tnull\r\n\t\t\t}\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default ItemPickerButton;","import React, { FC } from \"react\";\r\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\r\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\r\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { Dictionary } from \"../model/dictionary\";\r\nimport { Item } from \"../model/item\";\r\nimport ChipCollection from \"./ChipCollection\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport ItemPickerButton from \"./ItemPickerButton\";\r\nimport { Gear, computeItemCost } from \"../model/gear\";\r\n\r\nconst useStyles = makeStyles({\r\n    headerLabel: {\r\n        lineHeight: 3,\r\n        fontWeight: 700,\r\n    },\r\n});\r\n\r\n\r\ntype Props = {\r\n\tlabel: string;\r\n\titems: Item[];\r\n\tallItems: Dictionary<Item[]>;\r\n\tcreateItemLabel: (item: Item) => string;\r\n\tcreateItemCostLabel: (item: Item) => string;\r\n\tonUpdateItems: (newItems: Item[]) => void;\r\n};\r\nconst GroupContainer: FC<Props> = (props: Props) => {\r\n\tconst { label, items, allItems, createItemLabel, createItemCostLabel, onUpdateItems } = props;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tlet cost = 0;\r\n\tfor (const item of items) {\r\n\t\tcost += computeItemCost(item, allItems as Dictionary<Gear[]>) * parseInt(item.count);\r\n\t}\r\n\r\n\tconst flatItems: Item[] = [];\r\n\tfor (const path of Object.keys(allItems)) {\r\n\t\tflatItems.push(...allItems[path]);\r\n\t}\r\n\r\n\tconst handleDelete = (toDelete: Item) => {\r\n\t\tconst newItems = [...items];\r\n\t\tconst index = newItems.findIndex(i => i.name === toDelete.name);\r\n\t\tif (index < 0) {\r\n\t\t\tthrow new Error(`Could not find item '${toDelete.name}' to delete in list '${JSON.stringify(newItems)}'`);\r\n\t\t}\r\n\t\tnewItems.splice(index, 1);\r\n\t\tonUpdateItems(newItems);\r\n\t};\r\n\r\n\tconst handleUpdateItems = (newItems: Item[]) => {\r\n\t\tonUpdateItems(newItems);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<ExpansionPanel defaultExpanded={false}>\r\n\t\t\t<ExpansionPanelSummary expandIcon={<ExpandMoreIcon />} >\r\n\t\t\t\t<FormControlLabel\r\n\t\t\t\t\tonClick={(event) => event.stopPropagation()}\r\n\t\t\t\t\tonFocus={(event) => event.stopPropagation()}\r\n\t\t\t\t\tcontrol={<ItemPickerButton\r\n\t\t\t\t\t\ttitle={label}\r\n\t\t\t\t\t\titems={items}\r\n\t\t\t\t\t\tallItems={allItems}\r\n\t\t\t\t\t\tcreateCostLabel={createItemCostLabel}\r\n\t\t\t\t\t\tonUpdateItems={handleUpdateItems}\r\n\t\t\t\t\t/>}\r\n\t\t\t\t\tlabel=\"\"\r\n\t\t\t\t/>\r\n\t\t\t\t<Typography className={classes.headerLabel}>{label} ({cost})</Typography>\r\n\t\t\t</ExpansionPanelSummary>\r\n\t\t\t<ExpansionPanelDetails>\r\n\t\t\t\t<ChipCollection\r\n\t\t\t\t\tvalues={items}\r\n\t\t\t\t\tcreateChipLabel={createItemLabel}\r\n\t\t\t\t\tonDeleteValue={handleDelete}\r\n\t\t\t\t/>\r\n\t\t\t</ExpansionPanelDetails>\r\n\t\t</ExpansionPanel>\r\n\t);\r\n};\r\n\r\nexport default GroupContainer;","import React, { FC } from \"react\";\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport { Item } from \"../model/item\";\r\nimport { getItemCost } from \"../model/dictionary\";\r\nimport GroupContainer from \"./GroupContainer\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\n\r\nconst QualitiesSection: FC = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst character = useGlobalState(\"selectedCharacter\");\r\n\tconst { qualities } = character;\r\n\tconst allQualities = useGlobalState(\"allQualities\");\r\n\r\n\tconst createQualityCostLabel = (item: Item) => {\r\n\t\tconst cost = getItemCost(item, allQualities);\r\n\t\tif (cost > 0) {\r\n\t\t\treturn `+${cost}`;\r\n\t\t} else {\r\n\t\t\treturn `${cost}`;\r\n\t\t}\r\n\t}\r\n\r\n\tconst createQualityLabel = (item: Item) => {\r\n\t\tconst { name } = item;\r\n\t\tconst costLabel = createQualityCostLabel(item);\r\n\t\treturn `${name} (${costLabel})`;\r\n\t};\r\n\r\n\tconst handleUpdateQualities = (newQualities: Item[]) => {\r\n\t\tconst data: UpdateCharacterData = { ...character, qualities: newQualities };\r\n\t\tdispatch({ type: ActionType.UpdateCharacter, data });\r\n\t};\r\n\r\n\treturn (\r\n\t\t<GroupContainer\r\n\t\t\tlabel=\"Qualities\"\r\n\t\t\titems={qualities}\r\n\t\t\tallItems={allQualities}\r\n\t\t\tcreateItemLabel={createQualityLabel}\r\n\t\t\tcreateItemCostLabel={createQualityCostLabel}\r\n\t\t\tonUpdateItems={handleUpdateQualities}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport default QualitiesSection;","import React, { FC, Fragment } from \"react\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport { Character as CharacterData, MetaType } from \"../model/character\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\nimport { ALL_META_TYPES } from \"../data/meta-types\";\r\nimport { getMetaTypeCost } from \"../model/meta-type\";\r\nimport QualitiesSection from \"./QualitiesSection\";\r\n\r\nconst useStyles = makeStyles({\r\n    header: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        marginLeft: 5,\r\n        marginRight: 5,\r\n        marginBottom: 10,\r\n    },\r\n    field: {\r\n        marginRight: 10,\r\n        marginTop: 20,\r\n    },\r\n    divider: {\r\n        margin: 5,\r\n    }\r\n});\r\n\r\nconst CharacterTab: FC = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const character = useGlobalState(\"selectedCharacter\");\r\n    const { name, streetName, metaType } = character;\r\n\r\n    const onCharacterUpdated = (updatedCharacter: CharacterData) => {\r\n        const data: UpdateCharacterData = updatedCharacter;\r\n        dispatch({ type: ActionType.UpdateCharacter, data });\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className={classes.header}>\r\n                <TextField id-=\"name\" label=\"Name\" value={name} onChange={e => onCharacterUpdated({ ...character, name: e.target.value})} className={classes.field} variant=\"outlined\" />\r\n                <TextField id-=\"street-name\" label=\"Street Name\" value={streetName} onChange={e => onCharacterUpdated({ ...character, streetName: e.target.value})} className={classes.field} variant=\"outlined\" />\r\n                <Select id=\"meta-type\" value={metaType} displayEmpty onChange={e => onCharacterUpdated({ ...character, metaType: e.target.value as MetaType})} className={classes.field} variant=\"outlined\">\r\n                    {ALL_META_TYPES.map(t => <MenuItem key={t} value={t}>{t} ({getMetaTypeCost(t)})</MenuItem>)}\r\n                </Select>\r\n            </div>\r\n            <QualitiesSection />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default CharacterTab;","import { Dictionary } from \"./dictionary\";\r\n\r\nexport type CustomItem = {\r\n    Name: string;\r\n    Availability?: string;\r\n    Cost?: string;\r\n};\r\n\r\nexport function getChildItems(customItems: Dictionary<CustomItem>, parentPath: string): CustomItem[] {\r\n\tconst items: CustomItem[] = [];\r\n\tfor (const path in customItems) {\r\n\t\tif (path.startsWith(parentPath)) {\r\n\t\t\titems.push(customItems[path]);\r\n\t\t}\r\n\t}\r\n\treturn items;\r\n}","import React, { FC, Fragment, useState } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { CustomItem } from \"../model/custom-item\";\r\n\r\nexport type SelectableItem = CustomItem & {\r\n\tselected: boolean;\r\n};\r\n\r\nconst useStyles = makeStyles(({\r\n\tcontent: {\r\n\t\twidth: \"100%\",\r\n\t},\r\n\theader: {\r\n\t\tdisplay: \"flex\",\r\n\t},\r\n\tname: {\r\n\t\tminWidth: 300,\r\n\t\tmaxWidth: 300,\r\n\t\ttextAlign: \"left\",\r\n\t},\r\n\tavailability: {\r\n\t\tminWidth: 100,\r\n\t\tmaxWidth: 100,\r\n\t\ttextAlign: \"center\",\r\n\t},\r\n\tcost: {\r\n\t\tminWidth: 100,\r\n\t\tmaxWidth: 100,\r\n\t\ttextAlign: \"right\",\r\n\t},\r\n\tul: {\r\n\t\tpadding: 0,\r\n\t},\r\n}));\r\n\r\ntype Props = {\r\n\topen: boolean;\r\n\tonClose: () => void;\r\n\ttitle: string;\r\n\titems: SelectableItem[];\r\n\tonItemSelectionChange: (item: SelectableItem) => void;\r\n\tincludeAvailability: boolean;\r\n\tincludeCost: boolean;\r\n\tallowNewItems: boolean;\r\n\tallowMultiSelection: boolean;\r\n};\r\nconst PickerDialog: FC<Props> = (props: Props) => {\r\n\tconst { open, onClose, title, items, onItemSelectionChange, includeAvailability, includeCost, allowNewItems, allowMultiSelection } = props;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tconst [newItemName, setNewItemName] = useState(\"\");\r\n\tconst [newItemAvailability, setNewItemAvailability] = useState(\"\");\r\n\tconst [newItemCost, setNewItemCost] = useState(\"\");\r\n\r\n\tconst onUpdateNewItem = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tconst value = event.target.value;\r\n\t\tswitch (event.target.id) {\r\n\t\t\tcase \"new-item-name\": {\r\n\t\t\t\tsetNewItemName(value);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase \"new-item-availability\": {\r\n\t\t\t\tsetNewItemAvailability(value);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase \"new-item-cost\": {\r\n\t\t\t\tsetNewItemCost(value);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tconst onCreateNewItem = () => {\r\n\t\tconst item: SelectableItem = { Name: newItemName, selected: true };\r\n\t\tif (includeAvailability) {\r\n\t\t\titem.Availability = newItemAvailability;\r\n\t\t}\r\n\t\tif (includeCost) {\r\n\t\t\titem.Cost = newItemCost;\r\n\t\t}\r\n\t\tonItemSelectionChange(item);\r\n\t\t// clear the new item fields after adding a new item (don't want fat-finger duplicates)\r\n\t\tsetNewItemName(\"\");\r\n\t\tsetNewItemAvailability(\"\");\r\n\t\tsetNewItemCost(\"\");\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Dialog open={open} onClose={onClose}>\r\n\t\t\t<DialogTitle>{title}</DialogTitle>\r\n\t\t\t<DialogContent className={classes.content}>\r\n\t\t\t\t<List>\r\n\t\t\t\t\t<ListItem key=\"header\" className={classes.header}>\r\n\t\t\t\t\t\t<Typography className={classes.name}>Name</Typography>\r\n\t\t\t\t\t\t{ includeAvailability ? <Typography className={classes.availability}>i.availability</Typography> : null }\r\n\t\t\t\t\t\t{ includeCost ? <Typography className={classes.cost}>Cost</Typography> : null }\r\n\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tallowNewItems ?\r\n\t\t\t\t\t\t<ListItem key=\"new-item\">\r\n\t\t\t\t\t\t\t<TextField id=\"new-item-name\" label=\"Custom\" value={newItemName} onChange={onUpdateNewItem} className={classes.name} variant=\"outlined\" />\r\n\t\t\t\t\t\t\t{ includeAvailability ? <TextField id=\"new-item-availability\" label=\"Availability\" value={newItemAvailability} onChange={onUpdateNewItem} className={classes.availability} variant=\"outlined\" /> : null }\r\n\t\t\t\t\t\t\t{ includeCost ? <TextField id=\"new-item-cost\" label=\"Cost\" value={newItemCost} onChange={onUpdateNewItem} className={classes.cost} variant=\"outlined\" /> : null }\r\n\t\t\t\t\t\t\t<IconButton aria-label=\"create\" onClick={onCreateNewItem} color=\"secondary\" size=\"small\">\r\n\t\t\t\t\t\t\t\t<AddIcon />\r\n\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\tnull\r\n\t\t\t\t\t}\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\titems.map(item => (\r\n\t\t\t\t\t\t\t<ListItem key={item.Name}>\r\n\t\t\t\t\t\t\t\t<ListItemText className={classes.name}>{item.Name}</ListItemText>\r\n\t\t\t\t\t\t\t\t{ includeAvailability ? <ListItemText className={classes.availability}>{item.Availability}</ListItemText> : null }\r\n\t\t\t\t\t\t\t\t{ includeCost ? <ListItemText className={classes.cost}>{item.Cost}</ListItemText> : null }\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tallowMultiSelection ?\r\n\t\t\t\t\t\t\t\t\t<Fragment>\r\n\t\t\t\t\t\t\t\t\t\t<IconButton aria-label=\"add\" onClick={() => onItemSelectionChange({ ...item, selected: true })} color=\"secondary\" size=\"small\">\r\n\t\t\t\t\t\t\t\t\t\t\t<AddIcon />\r\n\t\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t\t\t<IconButton aria-label=\"remove\" onClick={() => onItemSelectionChange({ ...item, selected: false })} disabled={!item.selected} color=\"secondary\" size=\"small\">\r\n\t\t\t\t\t\t\t\t\t\t\t<RemoveIcon />\r\n\t\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t\t</Fragment>\r\n\t\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t\t<IconButton aria-label={item.selected ? \"remove\" : \"add\"} onClick={() => onItemSelectionChange({ ...item, selected: !item.selected })} color=\"secondary\" size=\"small\">\r\n\t\t\t\t\t\t\t\t\t\t{ item.selected ? <RemoveIcon /> : <AddIcon /> }\r\n\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t\t))\r\n\t\t\t\t\t}\r\n\t\t\t\t</List>\r\n\t\t\t</DialogContent>\r\n\t\t</Dialog>\r\n\t);\r\n};\r\n\r\nexport default PickerDialog;","import React, { FC, Fragment, useState } from \"react\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PickerDialog, { SelectableItem } from \"./PickerDialog\";\r\n\r\nconst NAME_INDEX = 0;\r\nconst COST = \"Cost\";\r\nconst AVAILABILITY = \"Availability\";\r\n\r\nconst findName = (value: any): string => {\r\n\tconst nameProp = Object.keys(value)[NAME_INDEX];\r\n\tconst name = value[nameProp];\r\n\tif (name === undefined) {\r\n\t\tthrow new Error(`Could not find a name for value '${JSON.stringify(value)}'`);\r\n\t}\r\n\treturn name as string;\r\n};\r\n\r\nconst findCost = (value: any): string => {\r\n\tconst cost = value[COST];\r\n\tif (cost === undefined) {\r\n\t\t// throw new Error(`Could not find a cost for value '${JSON.stringify(value)}'`);\r\n\t\treturn \"0\";\r\n\t}\r\n\treturn cost;\r\n};\r\n\r\nconst findAvailability = (value: any): string => {\r\n\tconst availability = value[AVAILABILITY];\r\n\tif (availability === undefined) {\r\n\t\t// throw new Error(`Could not find an availability for value '${JSON.stringify(value)}'`);\r\n\t\treturn \"-\";\r\n\t}\r\n\treturn availability;\r\n};\r\n\r\nconst createSelectableItem = (value: any, selectedValueNames: string[], includeAvailability: boolean, includeCost: boolean): SelectableItem => {\r\n\tconst Name = findName(value);\r\n\tconst Availability = includeAvailability ? findAvailability(value) : undefined;\r\n\tconst Cost = includeCost ? findCost(value) : undefined;\r\n\tconst selected = selectedValueNames.find(n => n === Name) !== undefined;\r\n\treturn { Name, Cost, Availability, selected\t};\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n    editButton: {\r\n        paddingLeft: 10,\r\n    },\r\n});\r\n\r\ntype Props = {\r\n\tbreadcrums: string[];\r\n\tvalues: any[];\r\n\tselectedValueNames: string[];\r\n\taddValue: (name: string) => void;\r\n\tremoveValue: (name: string) => void;\r\n\tincludeAvailability?: boolean;\r\n\tincludeCost?: boolean;\r\n\tallowNewValues?: boolean;\r\n\tcreateValue?: (value: any) => void;\r\n\tallowMultiSelection?: boolean;\r\n};\r\nconst PickerButton: FC<Props> = (props: Props) => {\r\n\tconst { breadcrums, values, selectedValueNames, addValue, removeValue, includeAvailability=false, includeCost=false, allowNewValues: allowNewItems=false, createValue, allowMultiSelection=false } = props;\r\n\t\r\n\tconst classes = useStyles();\r\n\r\n\tconst [open, setOpen] = useState(false);\r\n\tconst onOpen = () => setOpen(true);\r\n\tconst onClose = () => setOpen(false);\r\n\r\n\tconst title = breadcrums.join(\" - \");\r\n\r\n\tconst items = values.map(v => createSelectableItem(v, selectedValueNames, includeAvailability, includeCost));\r\n\r\n\tconst onItemSelectionChange = (item: SelectableItem) => {\r\n\t\tconst { Name, Availability, Cost, selected } = item;\r\n\t\tif (selected) {\r\n\t\t\taddValue(Name);\r\n\t\t\tif (values.find(v => findName(v) === Name) === undefined) {\r\n\t\t\t\t// new item\r\n\t\t\t\tconst value = { Name, Availability, Cost };\r\n\t\t\t\tif (!createValue) {\r\n\t\t\t\t\tthrow new Error(`Attempting to create new item '${JSON.stringify(value)}' with no createValue prop`);\r\n\t\t\t\t}\r\n\t\t\t\tcreateValue(value);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tremoveValue(Name);\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<IconButton aria-label=\"add\" onClick={onOpen} color=\"secondary\" size=\"medium\" className={classes.editButton} disableRipple>\r\n\t\t\t\t<EditIcon />\r\n\t\t\t</IconButton>\r\n\t\t\t<PickerDialog\r\n\t\t\t\topen={open}\r\n\t\t\t\tonClose={onClose}\r\n\t\t\t\ttitle={title}\r\n\t\t\t\titems={items}\r\n\t\t\t\tonItemSelectionChange={onItemSelectionChange}\r\n\t\t\t\tincludeAvailability={includeAvailability}\r\n\t\t\t\tincludeCost={includeCost}\r\n\t\t\t\tallowNewItems={allowNewItems}\r\n\t\t\t\tallowMultiSelection={allowMultiSelection}\r\n\t\t\t/>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default PickerButton;","import React, { FC } from \"react\";\r\n\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { NamedProperty } from \"../model/character\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: \"flex\",\r\n        height: 50,\r\n    },\r\n    name: {\r\n        width: 200\r\n    },\r\n    slider: {\r\n        width: 300,\r\n        marginRight: 10,\r\n    },\r\n});\r\n\r\ntype Props = {\r\n    property: NamedProperty;\r\n    onUpdate: (property: NamedProperty) => void;\r\n    min: number;\r\n    max: number;\r\n    step: number;\r\n    formatDisplayValue: (rating: number) => string;\r\n    computeCost: (rating: number) => number;\r\n};\r\n\r\nconst Property: FC<Props> = (props: Props) => {\r\n    const { property, onUpdate, min, max, step, formatDisplayValue, computeCost } = props;\r\n    const { name, rating } = property;\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleChange = (e: React.ChangeEvent<any>, rating: number | number[]) => {\r\n        if (Array.isArray(rating)) {\r\n            throw new Error(`Property element '${e.target.id}' has an array of values instead of a single value: [${rating.join(\", \")}]`);\r\n        }\r\n        onUpdate({\r\n            name,\r\n            rating: rating\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Typography gutterBottom className={classes.name}>{name}</Typography>\r\n            <div className={classes.slider}>\r\n                <Slider\r\n                    step={step}\r\n                    min={min}\r\n                    max={max}\r\n                    value={rating}\r\n                    marks\r\n                    valueLabelDisplay=\"on\"\r\n                    onChange={handleChange}\r\n                    valueLabelFormat={(value: number, _index: number) => formatDisplayValue(value)}\r\n                />\r\n            </div>\r\n            <Typography gutterBottom>({computeCost(rating)})</Typography>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Property;","import React, { FC } from \"react\";\r\n\r\nimport { Skill as SkillData } from \"../model/character\";\r\nimport Property from \"./Property\";\r\n\r\ntype Props = {\r\n    skill: SkillData;\r\n\tonUpdate: (skill: SkillData) => void;\r\n\tcomputeCost: (rating: number) => number;\r\n};\r\n\r\nconst Skill: FC<Props> = (props: Props) => {\r\n    const { skill, onUpdate, computeCost } = props;\r\n\r\n    return (\r\n        <Property\r\n            property={skill}\r\n            onUpdate={onUpdate}\r\n            min={1}\r\n            max={5}\r\n            step={2}\r\n            formatDisplayValue={value => value.toString()}\r\n            computeCost={computeCost}\r\n            />\r\n    );\r\n}\r\n\r\nexport default Skill;","import React, { FC, Fragment } from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\r\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\r\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { Skill as SkillData } from \"../model/character\";\r\nimport { CustomItem, getChildItems } from \"../model/custom-item\";\r\nimport { AddCustomItemData, ActionType } from \"../reducer\";\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport PickerButton from \"./PickerButton\";\r\nimport Skill from \"./Skill\";\r\n\r\nconst useStyles = makeStyles({\r\n    header: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        marginBottom: 20,\r\n        paddingLeft: 16,\r\n        paddingTop: 12,\r\n    },\r\n    headerLabel: {\r\n        lineHeight: 3,\r\n        fontWeight: 700,\r\n    },\r\n});\r\n\r\ntype Props = {\r\n    breadcrums: string[];\r\n\tskills: SkillData[];\r\n\tallSkills: CustomItem[];\r\n    headerLabel: string;\r\n    computeSkillCost: (rating: number) => number;\r\n\tonSkillsUpdated: (updatedSkills: SkillData[]) => void;\r\n};\r\nconst SkillList: FC<Props> = (props: Props) => {\r\n\tconst { breadcrums, skills, allSkills, headerLabel, computeSkillCost, onSkillsUpdated } = props;\r\n\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const customItems = useGlobalState(\"customItems\");\r\n\r\n    skills.sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n    const parentPath = breadcrums.join(\".\");\r\n    allSkills.push(...getChildItems(customItems, parentPath));\r\n    allSkills.sort((a, b) => a.Name.localeCompare(b.Name));\r\n\r\n    const onSkillUpdate = (skill: SkillData) => {\r\n        const newSkills = [ ...skills ];\r\n        const skillIndex = skills.findIndex(s => s.name === skill.name);\r\n        if (skillIndex > -1) {\r\n            if (skill.rating > 0) {\r\n                newSkills[skillIndex] = skill;\r\n            } else {\r\n                newSkills.splice(skillIndex, 1);\r\n            }\r\n        } else if (skill.rating > 0) {\r\n            newSkills.push(skill);\r\n        }\r\n        onSkillsUpdated(newSkills);\r\n    };\r\n    \r\n    const addSkill = (name: string) => {\r\n        onSkillUpdate({ name, rating: 1 });\r\n    };\r\n\r\n    const removeSkill = (name: string) => {\r\n        onSkillUpdate({ name, rating: -1 });\r\n    };\r\n\r\n    const createNewSkill = (item: CustomItem) => {\r\n        const path = `${parentPath}.${item.Name}`;\r\n        const data: AddCustomItemData = { path, item: item };\r\n        dispatch({ type: ActionType.AddCustomItem, data });\r\n    };\r\n\r\n\treturn (\r\n        <Fragment>\r\n            <ExpansionPanel defaultExpanded={false}>\r\n                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\r\n                    <FormControlLabel\r\n                        onClick={(event) => event.stopPropagation()}\r\n                        onFocus={(event) => event.stopPropagation()}\r\n                        control={<PickerButton\r\n                            breadcrums={breadcrums}\r\n                            values={allSkills}\r\n                            selectedValueNames={skills.map(s => s.name)}\r\n                            addValue={addSkill}\r\n                            removeValue={removeSkill}\r\n                            allowNewValues\r\n                            createValue={createNewSkill}\r\n                        />}\r\n                        label=\"\"\r\n                    />\r\n                    <Typography className={classes.headerLabel}>{headerLabel}</Typography>\r\n                </ExpansionPanelSummary>\r\n                <ExpansionPanelDetails>\r\n                    <List>\r\n                    {\r\n                        skills.map(s => (\r\n                            <ListItem key={s.name}>\r\n                                <Skill skill={s} onUpdate={onSkillUpdate} computeCost={computeSkillCost} />\r\n                            </ListItem>\r\n                        ))\r\n                    }\r\n                    </List>\r\n                </ExpansionPanelDetails>\r\n            </ExpansionPanel>\r\n        </Fragment>\r\n\t);\r\n};\r\n\r\nexport default SkillList;","import React, { FC } from \"react\";\r\nimport { useDispatch, useGlobalState } from \"../context\"\r\nimport { Skill as SkillData } from \"../model/character\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\nimport { getActiveSkillsCost, getActiveSkillCost } from \"../model/skills\";\r\nimport SkillList from \"./SkillList\";\r\n\r\nconst breadcrums = [\"Skills\", \"Active\"];\r\n\r\nconst ActiveSkillList: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const character = useGlobalState(\"selectedCharacter\");\r\n    const allSkills = useGlobalState(\"allSkills\");\r\n\r\n    const { activeSkills } = character;\r\n\r\n    const activeSkillsCost = getActiveSkillsCost(activeSkills);\r\n    const headerLabel = `Active Skills (${activeSkillsCost})`;\r\n\r\n    const allActiveSkills = [...allSkills.active];\r\n\r\n    const onSkillsUpdated = (activeSkills: SkillData[]) => {\r\n        const data: UpdateCharacterData = { ...character, activeSkills };\r\n        dispatch({ type: ActionType.UpdateCharacter, data });\r\n    }\r\n    return (\r\n        <SkillList\r\n            breadcrums={breadcrums}\r\n            skills={activeSkills}\r\n            allSkills={allActiveSkills}\r\n            headerLabel={headerLabel}\r\n            computeSkillCost={getActiveSkillCost}\r\n            onSkillsUpdated={onSkillsUpdated}\r\n        />\r\n    );\r\n}\r\n\r\nexport default ActiveSkillList;","import React, { FC } from \"react\";\r\nimport { useDispatch, useGlobalState } from \"../context\"\r\nimport { Skill as SkillData } from \"../model/character\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\nimport { getKnowledgeSkillsCost, getFreeKnowledgeSkillPoints, getKnowledgeSkillCost } from \"../model/skills\";\r\nimport SkillList from \"./SkillList\";\r\n\r\nconst breadcrums = [\"Skills\", \"Knowledge\"];\r\n\r\nconst KnowledgeSkillList: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const character = useGlobalState(\"selectedCharacter\");\r\n\tconst allSkills = useGlobalState(\"allSkills\");\r\n\r\n\tconst { knowledgeSkills } = character;\r\n\r\n\tconst knowledgeSkillsCost = getKnowledgeSkillsCost(knowledgeSkills);\r\n    const freeKnowledgeSkillPoints = getFreeKnowledgeSkillPoints(character);\r\n    const totalCost = knowledgeSkillsCost - freeKnowledgeSkillPoints;\r\n    const headerLabel = `Knowledge Skills (${knowledgeSkillsCost} - ${freeKnowledgeSkillPoints} = ${totalCost})`;\r\n\r\n    const allKnowledgeSkills = [...allSkills.knowledge];\r\n\r\n    const onSkillsUpdated = (knowledgeSkills: SkillData[]) => {\r\n        const data: UpdateCharacterData = { ...character, knowledgeSkills };\r\n        dispatch({ type: ActionType.UpdateCharacter, data });\r\n    };\r\n\r\n    return (\r\n        <SkillList\r\n            breadcrums={breadcrums}\r\n            skills={knowledgeSkills}\r\n            allSkills={allKnowledgeSkills}\r\n            headerLabel={headerLabel}\r\n            computeSkillCost={getKnowledgeSkillCost}\r\n            onSkillsUpdated={onSkillsUpdated}\r\n        />\r\n    );\r\n}\r\n\r\nexport default KnowledgeSkillList;","import React, { FC } from \"react\";\r\nimport { useDispatch, useGlobalState } from \"../context\"\r\nimport { Skill as SkillData } from \"../model/character\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\nimport { getKnowledgeSkillsCost, getKnowledgeSkillCost } from \"../model/skills\";\r\nimport SkillList from \"./SkillList\";\r\n\r\nconst breadcrums = [\"Skills\", \"Language\"];\r\n\r\nconst LanguageSkillList: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const character = useGlobalState(\"selectedCharacter\");\r\n\tconst allSkills = useGlobalState(\"allSkills\");\r\n\r\n\tconst { languageSkills } = character;\r\n\r\n\tconst languageSkillsCost = getKnowledgeSkillsCost(languageSkills);\r\n    const headerLabel = `Language Skills (${languageSkillsCost}) + Native`;\r\n\r\n    const allLanguageSkills = [...allSkills.language];\r\n\r\n    const onSkillsUpdated = (languageSkills: SkillData[]) => {\r\n        const data: UpdateCharacterData = { ...character, languageSkills };\r\n        dispatch({ type: ActionType.UpdateCharacter, data });\r\n    };\r\n\r\n    return (\r\n        <SkillList\r\n            breadcrums={breadcrums}\r\n            skills={languageSkills}\r\n            allSkills={allLanguageSkills}\r\n            headerLabel={headerLabel}\r\n            computeSkillCost={getKnowledgeSkillCost}\r\n            onSkillsUpdated={onSkillsUpdated}\r\n        />\r\n    );\r\n}\r\n\r\nexport default LanguageSkillList;","import React, { FC, Fragment } from \"react\";\r\nimport ActiveSkillList from \"./ActiveSkillList\";\r\nimport KnowledgeSkillList from \"./KnowledgeSkillList\";\r\nimport LanguageSkillList from \"./LanguageSkillList\";\r\n\r\nconst SkillsTab: FC = () => {\r\n    return (\r\n        <Fragment>\r\n            <ActiveSkillList />\r\n            <KnowledgeSkillList />\r\n            <LanguageSkillList />\r\n        </Fragment>\r\n    )\r\n};\r\n\r\nexport default SkillsTab;","import React, { FC, Fragment } from \"react\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport ShoppingCartIcon from \"@material-ui/icons/ShoppingCart\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useGlobalState } from \"../context\";\r\n\r\nconst useStyles = makeStyles({\r\n    badge: {\r\n        marginLeft: 50,\r\n    },\r\n});\r\n\r\nconst Karma: FC = () => {\r\n    const classes = useStyles();\r\n    const karma = useGlobalState(\"karma\");\r\n    const { total, spent, available } = karma;\r\n    return (\r\n        <Fragment>\r\n            <Badge className={classes.badge} badgeContent={total} color=\"primary\" max={999} showZero>\r\n                <ShoppingCartIcon />\r\n            </Badge>\r\n            <Badge className={classes.badge} badgeContent={spent} color=\"secondary\" max={999} showZero>\r\n                <ShoppingCartIcon />\r\n            </Badge>\r\n            <Badge className={classes.badge} badgeContent={available} color=\"primary\" max={999} showZero>\r\n                <ShoppingCartIcon />\r\n            </Badge>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Karma;","import React, { FC } from \"react\";\r\n\r\nimport { Attribute as AttributeData, MetaType } from \"../model/character\";\r\nimport { getAttributeModifier, getAttributeCost } from \"../model/attributes\";\r\nimport Property from \"./Property\";\r\n\r\ntype Props = {\r\n    attribute: AttributeData;\r\n    metaType: MetaType;\r\n    onUpdate: (attribute: AttributeData) => void;\r\n};\r\n\r\nconst Attribute: FC<Props> = (props: Props) => {\r\n    const { attribute, metaType, onUpdate } = props;\r\n    const modifier = getAttributeModifier(metaType, attribute);\r\n\r\n    const formatDisplayValue = (rating: number): string => (rating + modifier).toString();\r\n\r\n    return (\r\n        <Property property={attribute} onUpdate={onUpdate} min={1} max={7} step={1} formatDisplayValue={formatDisplayValue} computeCost={getAttributeCost} />\r\n    );\r\n};\r\n\r\nexport default Attribute;","import React, { FC, Fragment } from \"react\";\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Attribute from \"./Attribute\";\r\nimport { Attribute as AttributeData, isAwakened } from \"../model/character\";\r\nimport { ActionType } from \"../reducer\";\r\nimport { getAttributesCost } from \"../model/attributes\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n    header: {\r\n        marginBottom: 20,\r\n        paddingLeft: 16,\r\n        paddingTop: 12,\r\n        fontWeight: 700,\r\n    }\r\n});\r\n\r\nconst AttributeList: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const character = useGlobalState(\"selectedCharacter\");\r\n    const classes = useStyles();\r\n\r\n    const { attributes, metaType } = character;\r\n\r\n    const filteredAttributes = attributes.filter(a => isAwakened(character) || a.name !== \"Magic\");\r\n\r\n    const attributesCost = getAttributesCost(character);\r\n\r\n    const onUpdate = (attribute: AttributeData) => {\r\n        const newAttributes = [ ...attributes ];\r\n        const attributeIndex = newAttributes.findIndex(a => a.name === attribute.name);\r\n        newAttributes[attributeIndex] = attribute;\r\n        dispatch({\r\n            type: ActionType.UpdateCharacter,\r\n            data: { ...character, attributes: newAttributes }\r\n        });\r\n    };\r\n    return (\r\n        <Fragment>\r\n            <Typography className={classes.header}>Attributes ({attributesCost})</Typography>\r\n            <List>\r\n                {\r\n                    filteredAttributes.map(a => (\r\n                        <ListItem key={a.name}>\r\n                            <Attribute attribute={a} metaType={metaType} onUpdate={onUpdate} />\r\n                        </ListItem>\r\n                    ))\r\n                }\r\n            </List>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default AttributeList;","import React, { FC } from \"react\";\r\nimport AttributeList from \"./AttributeList\";\r\n\r\nconst AttributesTab: FC = () => {\r\n\treturn (\r\n\t\t<AttributeList />\r\n\t);\r\n};\r\n\r\nexport default AttributesTab;","import { Character } from \"./character\";\r\n\r\nexport type Contact = {\r\n\tname: string;\r\n\tconnection: number;\r\n\tloyalty: number;\r\n};\r\n\r\nexport function getContactRatingCost(rating: number): number {\r\n\tswitch (rating) {\r\n\t\tcase 1:\r\n\t\t\treturn 2;\r\n\t\tcase 3:\r\n\t\t\treturn 7;\r\n\t\tcase 5:\r\n\t\t\treturn 15;\r\n\t\tdefault:\r\n\t\t\tthrow new Error();\r\n\t}\r\n}\r\n\r\nexport function getContactCost(contact: Contact): number {\r\n\tlet cost = 0;\r\n\tcost += getContactRatingCost(contact.connection);\r\n\tcost += getContactRatingCost(contact.loyalty);\r\n\treturn cost;\r\n}\r\n\r\nexport function getFreeContactPoints(character: Character): number {\r\n    const charisma = character.attributes.find(a => a.name === \"Charisma\");\r\n    if (charisma === undefined) {\r\n        throw new Error(`Character '${character.streetName}' has no attribute 'Charisma'`);\r\n    }\r\n    const willpower = character.attributes.find(a => a.name === \"Willpower\");\r\n    if (willpower === undefined) {\r\n        throw new Error(`Character '${character.streetName}' has no attribute 'Willpower'`);\r\n    }\r\n    return (charisma.rating + willpower.rating) * 10;\r\n}\r\n\r\nexport function getAllContactsCost(character: Character): number {\r\n\treturn character.contacts.map(c => getContactCost(c)).reduce((a, b) => a + b, 0);\r\n}","import React, { FC, Fragment } from \"react\";\r\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\r\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\r\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { Contact as ContactData, getContactCost, getContactRatingCost } from \"../model/contact\";\r\nimport Property from \"./Property\";\r\nimport { NamedProperty } from \"../model/character\";\r\n\r\nconst useStyles = makeStyles({\r\n\theaderLabel: {\r\n\t\tfontWeight: 700,\r\n\t},\r\n\tdetails: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"column\",\r\n\t},\r\n\trating: {\r\n\t\tmarginTop: 30,\r\n\t}\r\n});\r\n\r\ntype Props = {\r\n\tcontact: ContactData;\r\n\tonUpdate: (contact: ContactData) => void;\r\n};\r\nconst Contact: FC<Props> = (props: Props) => {\r\n\tconst { contact, onUpdate } = props;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tconst contactCost = getContactCost(contact);\r\n\r\n\tconst connection: NamedProperty = { name: \"Connection\", rating: contact.connection };\r\n\tconst onUpdateConnection = (updatedConnection: NamedProperty) => {\r\n\t\tconst updatedContact = { ...contact, connection: updatedConnection.rating };\r\n\t\tonUpdate(updatedContact);\r\n\t};\r\n\tconst loyalty: NamedProperty = { name: \"Loyalty\", rating: contact.loyalty };\r\n\tconst onUpdateLoyalty = (updatedLoyalty: NamedProperty) => {\r\n\t\tconst updatedContact = { ...contact, loyalty: updatedLoyalty.rating };\r\n\t\tonUpdate(updatedContact);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<ExpansionPanel defaultExpanded={false}>\r\n\t\t\t\t<ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\r\n\t\t\t\t\t<Typography className={classes.headerLabel}>{contact.name} ({contactCost})</Typography>\r\n\t\t\t\t</ExpansionPanelSummary>\r\n\t\t\t\t<ExpansionPanelDetails>\r\n\t\t\t\t\t<div className={classes.details}>\r\n\t\t\t\t\t\t<div className={classes.rating}>\r\n\t\t\t\t\t\t\t<Property\r\n\t\t\t\t\t\t\t\tproperty={connection}\r\n\t\t\t\t\t\t\t\tonUpdate={onUpdateConnection}\r\n\t\t\t\t\t\t\t\tmin={1}\r\n\t\t\t\t\t\t\t\tmax={3}\r\n\t\t\t\t\t\t\t\tstep={2}\r\n\t\t\t\t\t\t\t\tformatDisplayValue={(value => value.toString())}\r\n\t\t\t\t\t\t\t\tcomputeCost={getContactRatingCost}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className={classes.rating}>\r\n\t\t\t\t\t\t\t<Property\r\n\t\t\t\t\t\t\t\tproperty={loyalty}\r\n\t\t\t\t\t\t\t\tonUpdate={onUpdateLoyalty}\r\n\t\t\t\t\t\t\t\tmin={1}\r\n\t\t\t\t\t\t\t\tmax={5}\r\n\t\t\t\t\t\t\t\tstep={2}\r\n\t\t\t\t\t\t\t\tformatDisplayValue={(value => value.toString())}\r\n\t\t\t\t\t\t\t\tcomputeCost={getContactRatingCost}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</ExpansionPanelDetails>\r\n\t\t\t</ExpansionPanel>\r\n\t\t</Fragment>\r\n\t);\r\n}\r\n\r\nexport default Contact;","import React, { FC, Fragment } from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport PickerButton from \"./PickerButton\";\r\nimport Contact from \"./Contact\";\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport { Contact as ContactData, getAllContactsCost, getFreeContactPoints } from \"../model/contact\";\r\nimport { UpdateCharacterData, ActionType, AddCustomItemData } from \"../reducer\";\r\nimport { getChildItems, CustomItem } from \"../model/custom-item\";\r\n\r\nconst useStyles = makeStyles({\r\n\theader: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"row\",\r\n\t},\r\n\theaderLabel: {\r\n\t\tlineHeight: 3,\r\n\t\tfontWeight: 700,\r\n\t},\r\n});\r\n\r\nconst breadcrums = [\"Contacts\"];\r\nconst parentPath = breadcrums.join(\".\");\r\n\r\nconst ContactList: FC = () => {\r\n\tconst classes = useStyles();\r\n\tconst dispatch = useDispatch();\r\n\tconst character = useGlobalState(\"selectedCharacter\");\r\n\tconst allContacts = useGlobalState(\"allContacts\");\r\n\tconst customItems = useGlobalState(\"customItems\");\r\n\tconst { contacts: selectedContacts } = character;\r\n\r\n\tselectedContacts.sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n\tconst contactsCost = getAllContactsCost(character);\r\n\tconst freeContactPoints = getFreeContactPoints(character);\r\n    const totalCost = contactsCost - freeContactPoints;\r\n\tconst headerLabel = `Contacts (${contactsCost} - ${freeContactPoints} = ${totalCost})`;\r\n\t\r\n\tallContacts.push(...getChildItems(customItems, parentPath));\r\n    allContacts.sort((a, b) => a.Name.localeCompare(b.Name));\r\n\r\n\tconst onContactUpdate = (contact: ContactData) => {\r\n\t\tconst newContacts = [...selectedContacts];\r\n\t\tconst contactIndex = selectedContacts.findIndex(s => s.name === contact.name);\r\n\t\tif (contactIndex > -1) {\r\n\t\t\tif (contact.connection > 0 && contact.loyalty > 0) {\r\n\t\t\t\tnewContacts[contactIndex] = contact;\r\n\t\t\t} else {\r\n\t\t\t\tnewContacts.splice(contactIndex, 1);\r\n\t\t\t}\r\n\t\t} else if (contact.connection > 0 && contact.loyalty > 0) {\r\n\t\t\tnewContacts.push(contact);\r\n\t\t}\r\n\t\tconst data: UpdateCharacterData = { ...character, contacts: newContacts };\r\n\t\tdispatch({ type: ActionType.UpdateCharacter, data });\r\n\t};\r\n\r\n\tconst addContact = (name: string) => {\r\n\t\tonContactUpdate({ name, connection: 1, loyalty: 1 });\r\n\t};\r\n\r\n\tconst removeContact = (name: string) => {\r\n\t\tonContactUpdate({ name, connection: -1, loyalty: -1 });\r\n\t};\r\n\r\n\tconst createNewContact = (item: CustomItem) => {\r\n        const path = `${parentPath}.${item.Name}`;\r\n        const data: AddCustomItemData = { path, item: item };\r\n        dispatch({ type: ActionType.AddCustomItem, data });\r\n    };\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<div className={classes.header}>\r\n\t\t\t\t<PickerButton\r\n\t\t\t\t\tbreadcrums={breadcrums}\r\n\t\t\t\t\tvalues={allContacts}\r\n\t\t\t\t\tselectedValueNames={selectedContacts.map(s => s.name)}\r\n\t\t\t\t\taddValue={addContact}\r\n\t\t\t\t\tremoveValue={removeContact}\r\n\t\t\t\t\tallowNewValues\r\n\t\t\t\t\tcreateValue={createNewContact}\r\n\t\t\t\t/>\r\n\t\t\t\t<Typography className={classes.headerLabel}>{headerLabel}</Typography>\r\n\t\t\t</div>\r\n\t\t\t<List>\r\n\t\t\t\t{\r\n\t\t\t\t\tselectedContacts.map(c => (\r\n\t\t\t\t\t\t<Contact key={c.name} contact={c} onUpdate={onContactUpdate} />\r\n\t\t\t\t\t))\r\n\t\t\t\t}\r\n\t\t\t\t</List>\r\n\t\t</Fragment>\r\n\t);\r\n}\r\n\r\nexport default ContactList;","import React, { FC } from \"react\";\r\nimport ContactList from \"./ContactList\";\r\n\r\nconst ContactsTab: FC = () => {\r\n\treturn (\r\n\t\t<ContactList />\r\n\t);\r\n}\r\n\r\nexport default ContactsTab;","import React, { FC, Fragment } from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { useGlobalState, useDispatch } from \"../context\";\r\nimport PickerButton from \"./PickerButton\";\r\nimport { CustomItem, getChildItems } from \"../model/custom-item\";\r\nimport { AddCustomItemData, ActionType } from \"../reducer\";\r\n\r\nconst useStyles = makeStyles({\r\n\theader: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"row\",\r\n\t},\r\n\theaderLabel: {\r\n\t\tlineHeight: 3,\r\n\t\tmarginLeft: 16\r\n\t},\r\n});\r\n\r\ntype Props = {\r\n\tfontWeight: number;\r\n\tbreadcrums: string[];\r\n\tnames: string[];\r\n\tallValues: CustomItem[];\r\n\tonNamesUpdated: (updatedValues: string[]) => void;\r\n};\r\nconst PropertyLeafNode: FC<Props> = (props: Props) => {\r\n\tconst { fontWeight, breadcrums, names, allValues, onNamesUpdated } = props;\r\n\r\n\tconst classes = useStyles();\r\n\tconst dispatch = useDispatch();\r\n\r\n\tnames.sort();\r\n\r\n\tconst customItems = useGlobalState(\"customItems\");\r\n\r\n\tconst parentPath = breadcrums.join(\".\");\r\n    allValues.push(...getChildItems(customItems, parentPath));\r\n    allValues.sort((a, b) => {\r\n\t\tif (a.Name === undefined || b.Name === undefined) {\r\n\t\t\tthrow new Error(`Value missing 'Name' property under '${parentPath}': ${JSON.stringify(allValues)}`);\r\n\t\t}\r\n\t\treturn a.Name.localeCompare(b.Name)\r\n\t});\r\n\r\n\tconst header = breadcrums[breadcrums.length - 1];\r\n\r\n\tconst getCost = (name: string): number => {\r\n\t\tconst value = allValues.find(v => v.Name === name);\r\n\t\tif (!value) {\r\n\t\t\tthrow new Error(`Could not find value with name '${name}'`);\r\n\t\t}\r\n\t\treturn parseInt(value.Cost!);\r\n\t};\r\n\r\n\tconst addValue = (name: string) => {\r\n\t\tconst newValues = [...names, name];\r\n\t\tonNamesUpdated(newValues);\r\n\t};\r\n\r\n\tconst removeValue = (name: string) => {\r\n\t\tconst newValues = [...names];\r\n\t\tconst index = newValues.findIndex(v => v === name);\r\n\t\tif (index < 0) {\r\n\t\t\tthrow new Error(`Could not find value with name '${name}'`);\r\n\t\t}\r\n\t\tnewValues.splice(index, 1);\r\n\t\tonNamesUpdated(newValues);\r\n\t};\r\n\r\n\tconst createNewValue = (item: CustomItem) => {\r\n\t\tconst path = `${parentPath}.${item.Name}`;\r\n        const data: AddCustomItemData = { path, item: item };\r\n        dispatch({ type: ActionType.AddCustomItem, data });\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<div className={classes.header}>\r\n\t\t\t\t<PickerButton\r\n\t\t\t\t\tbreadcrums={breadcrums}\r\n\t\t\t\t\tvalues={allValues}\r\n\t\t\t\t\tselectedValueNames={names}\r\n\t\t\t\t\taddValue={addValue}\r\n\t\t\t\t\tremoveValue={removeValue}\r\n\t\t\t\t\tallowNewValues\r\n\t\t\t\t\tcreateValue={createNewValue}\r\n\t\t\t\t\tincludeCost\r\n\t\t\t\t/>\r\n\t\t\t\t<Typography className={classes.headerLabel} style={{fontWeight}}>{header}</Typography>\r\n\t\t\t</div>\r\n\t\t\t<List>\r\n\t\t\t\t{\r\n\t\t\t\t\tnames.map(n => (\r\n\t\t\t\t\t\t<ListItem key={n}>\r\n\t\t\t\t\t\t\t<ListItemText>{n} ({getCost(n)})</ListItemText>\r\n\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t))\r\n\t\t\t\t}\r\n\t\t\t</List>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default PropertyLeafNode;","import React, { FC, Fragment } from \"react\";\r\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\r\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\r\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { isArray } from \"util\";\r\nimport { sentenceCase } from \"change-case\";\r\nimport { CustomItem } from \"../model/custom-item\";\r\nimport PropertyLeafNode from \"./PropertyLeafNode\";\r\n\r\nconst fontWeights = [700, 600, 500, 400, 300, 200, 100];\r\n\r\ntype Props = {\r\n\trootCost?: number;\r\n\tparentPath: string;\r\n\tname: string;\r\n\tvalue: any;\r\n\tall: any;\r\n\tonValueUpdated: (updatedValue: any) => void;\r\n};\r\nconst PropertyNode: FC<Props> = (props: Props) => {\r\n\tconst { rootCost = -1, parentPath, name, value, all, onValueUpdated } = props;\r\n\t\r\n\tconst label = sentenceCase(name);\r\n\tconst fontWeight = fontWeights[parentPath.split(\".\").length - 1];\r\n\r\n\tif (isArray(value)) {\r\n\t\t// leaf-node\r\n\t\tconst breadcrums = getBreadcrums(parentPath, name);\r\n\t\tconst names = value as string[];\r\n\t\tconst allValues = all as CustomItem[];\r\n\t\tconst onNamesUpdated = (updatedNames: string[]) => {\r\n\t\t\tonValueUpdated(updatedNames);\r\n\t\t};\r\n\r\n\t\treturn (\r\n\t\t\t<PropertyLeafNode\r\n\t\t\t\tfontWeight={fontWeight-100}\r\n\t\t\t\tbreadcrums={breadcrums}\r\n\t\t\t\tnames={names}\r\n\t\t\t\tallValues={allValues}\r\n\t\t\t\tonNamesUpdated={onNamesUpdated}\r\n\t\t\t/>\r\n\t\t)\r\n\t} else {\r\n\t\tconst isRoot = parentPath.split(\".\").length === 1;\r\n\t\t// branch-node\r\n\t\tconst children: JSX.Element[] = [];\r\n\t\tfor (const childName of Object.keys(all)) {\r\n\t\t\tconst childAll = all[childName];\r\n\t\t\tconst childPath = `${parentPath}.${childName}`;\r\n\t\t\t// set the empty value early rather than passing down undefined\r\n\t\t\tconst defaultValue = isArray(childAll) ? [] : {};\r\n\t\t\t// looping through all's properties, may not exist in value\r\n\t\t\tconst childValue = value[childName] || defaultValue;\r\n\t\t\t\r\n\t\t\tconst onChildValueUpdated = (updatedChildValue: any) => {\r\n\t\t\t\tconst updatedValue = { ...value };\r\n\t\t\t\tupdatedValue[childName] = updatedChildValue;\r\n\t\t\t\tonValueUpdated(updatedValue);\r\n\t\t\t};\r\n\t\t\tchildren.push(\r\n\t\t\t\t<PropertyNode\r\n\t\t\t\t\tkey={childName}\r\n\t\t\t\t\tparentPath={childPath}\r\n\t\t\t\t\tname={childName}\r\n\t\t\t\t\tvalue={childValue}\r\n\t\t\t\t\tall={childAll}\r\n\t\t\t\t\tonValueUpdated={onChildValueUpdated}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<Fragment>\r\n\t\t\t\t<ExpansionPanel defaultExpanded={false}>\r\n\t\t\t\t\t<ExpansionPanelSummary expandIcon={<ExpandMoreIcon />} >\r\n\t\t\t\t\t\t<Typography style={{fontWeight}}>{label}{ isRoot ? (` (${rootCost})`) : null}</Typography>\r\n\t\t\t\t\t</ExpansionPanelSummary>\r\n\t\t\t\t\t<ExpansionPanelDetails>\r\n\t\t\t\t\t\t<div>{ children }</div>\r\n\t\t\t\t\t</ExpansionPanelDetails>\r\n\t\t\t\t</ExpansionPanel>\r\n\t\t\t</Fragment>\r\n\t\t)\r\n\t}\r\n};\r\n\r\nexport default PropertyNode;\r\n\r\nfunction getBreadcrums(parentPath: string, name: string): string[] {\r\n\tconst breadcrums: string[] = [];\r\n\t// parentPath uses camelCase (because its JSON)\r\n\t// breadcrums use sentenceCase (because its to be shown to users)\r\n\tfor (const name of parentPath.split(\".\")) {\r\n\t\tbreadcrums.push(sentenceCase(name));\r\n\t}\r\n\tbreadcrums.push(sentenceCase(name));\r\n\treturn breadcrums;\r\n}","import React, { FC, Fragment } from \"react\";\r\nimport PropertyNode from \"./PropertyNode\";\r\n\r\ntype Props = {\r\n\trootCost: number;\r\n\trootName: string;\r\n\trootValue: any;\r\n\trootAll: any;\r\n\tonRootUpdated: (updatedRootValue: any) => void;\r\n};\r\nconst PropertyTree: FC<Props> = (props: Props) => {\r\n\tconst { rootCost, rootName, rootValue, rootAll, onRootUpdated } = props;\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<PropertyNode\r\n\t\t\t\trootCost={rootCost}\r\n\t\t\t\tparentPath={rootName}\r\n\t\t\t\tname={rootName}\r\n\t\t\t\tvalue={rootValue}\r\n\t\t\t\tall={rootAll}\r\n\t\t\t\tonValueUpdated={onRootUpdated}\r\n\t\t\t/>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default PropertyTree;","import { Character } from \"./character\";\r\n\r\nexport type Spells = {\r\n\tcombat: string[],\r\n\tdetection: string[],\r\n\thealth: string[],\r\n\tillusion: string[],\r\n\tmanipulation: string[],\r\n};\r\n\r\nexport function getSpellCost(): number {\r\n\treturn 5;\r\n}\r\n\r\nexport function getSpellsCost(spells: string[]): number {\r\n\treturn getSpellCost() * spells.length;\r\n}\r\n\r\nexport function getCharacterSpellsCost(character: Character): number {\r\n\tlet cost = 0;\r\n\tcost += getSpellsCost(character.spells.combat);\r\n\tcost += getSpellsCost(character.spells.detection);\r\n\tcost += getSpellsCost(character.spells.health);\r\n\tcost += getSpellsCost(character.spells.illusion);\r\n\tcost += getSpellsCost(character.spells.manipulation);\r\n\treturn cost;\r\n}\r\n\r\nexport type Magic = {\r\n\tspells: Spells;\r\n};","import React, { FC } from \"react\";\r\nimport PropertyTree from \"./PropertyTree\";\r\nimport { useGlobalState, useDispatch } from \"../context\";\r\nimport { Spells, getCharacterSpellsCost } from \"../model/magic\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\n\r\nconst MagicTab: FC = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst character = useGlobalState(\"selectedCharacter\");\r\n\tconst { spells } = character;\r\n\tconst allSpells = useGlobalState(\"allSpells\");\r\n\r\n\tconst cost = getCharacterSpellsCost(character);\r\n\r\n\tconst onSpellsUpdated = (updatedSpells: Spells) => {\r\n\t\tconst data: UpdateCharacterData = { ...character, spells: updatedSpells };\r\n\t\tdispatch({ type: ActionType.UpdateCharacter, data });\r\n\t};\r\n\treturn (\r\n\t\t<PropertyTree rootCost={cost} rootName=\"spells\" rootValue={spells} rootAll={allSpells} onRootUpdated={onSpellsUpdated} />\r\n\t);\r\n};\r\n\r\nexport default MagicTab;","import React, { FC, Fragment } from \"react\";\r\nimport { useGlobalState, useDispatch } from \"../context\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\nimport { getChildNames, getChildSet } from \"../model/dictionary\";\r\nimport GroupContainer from \"./GroupContainer\";\r\nimport { Item, getItemSubset } from \"../model/item\";\r\nimport { sentenceCase } from \"change-case\";\r\nimport { gearRoot, computeItemCost, Grade } from \"../model/gear\";\r\n\r\nconst GearTab: FC = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst character = useGlobalState(\"selectedCharacter\");\r\n\tconst { gear } = character;\r\n\tconst allGear = useGlobalState(\"allGear\");\r\n\r\n\tconst createGearCostLabel = (item: Item) => {\r\n\t\tconst { count} = item;\r\n\t\tconst cost = computeItemCost(item, allGear);\r\n\t\tif (parseInt(count) > 1) {\r\n\t\t\treturn `¥${cost} x ${count}`;\r\n\t\t} else {\r\n\t\t\treturn `¥${cost}`;\r\n\t\t}\r\n\t};\r\n\r\n\tconst createGearLabel= (item: Item) => {\r\n\t\tconst { name } = item;\r\n\t\tconst costLabel = createGearCostLabel(item);\r\n\t\tlet label = `${name} (${costLabel})`;\r\n\t\tconst includeGrade = item.path.startsWith(`${gearRoot}.augmentations`);\r\n\t\tif (includeGrade) {\r\n\t\t\tlabel += ` [${item.grade || Grade.Alpha}]`;\r\n\t\t}\r\n\t\treturn label;\r\n\t};\r\n\r\n\tconst handleUpdateGear = (name: string, newSubGear: Item[]) => {\r\n\t\tconst newGear = gear.filter(g => !g.path.startsWith(`${gearRoot}.${name}`));\r\n\t\tnewGear.push(...newSubGear);\r\n\t\tconst data: UpdateCharacterData = { ...character, gear: newGear };\r\n\t\tdispatch({ type: ActionType.UpdateCharacter, data });\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t{\r\n\t\t\t\tgetChildNames(allGear, gearRoot).map(name =>\r\n\t\t\t\t\t<GroupContainer\r\n\t\t\t\t\t\tkey={name}\r\n\t\t\t\t\t\tlabel={sentenceCase(name)}\r\n\t\t\t\t\t\titems={getItemSubset(gear, `${gearRoot}.${name}`)}\r\n\t\t\t\t\t\tallItems={getChildSet(allGear, `${gearRoot}.${name}`)}\r\n\t\t\t\t\t\tcreateItemLabel={createGearLabel}\r\n\t\t\t\t\t\tcreateItemCostLabel={createGearCostLabel}\r\n\t\t\t\t\t\tonUpdateItems={newItems => handleUpdateGear(name, newItems)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default GearTab;","import React, { FC } from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n\troot: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"row\",\r\n\t\tmarginLeft: 10,\r\n\t\tmarginTop: 10,\r\n\t},\r\n\tname: {\r\n\t\tlineHeight: \"40px\"\r\n\t},\r\n\tvalue: {\r\n\t\tmarginLeft: 5,\r\n\t\tcolor: theme.palette.getContrastText(theme.palette.primary.main),\r\n\t\tbackgroundColor: theme.palette.primary.main,\r\n\t}\r\n}));\r\n\r\ntype Props = {\r\n\tname: string;\r\n\tvalue: number;\r\n}\r\nconst ReadOnlyProperty: FC<Props> = (props: Props) => {\r\n\tconst { name, value } = props;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\treturn (\r\n\t\t<div className={classes.root}>\r\n\t\t\t<Typography className={classes.name}>{name}</Typography>\r\n\t\t\t<Avatar className={classes.value}>{value}</Avatar>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ReadOnlyProperty;","import React, { FC, Fragment } from \"react\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { useGlobalState } from \"../context\";\r\nimport { getEffectiveAttributeRating } from \"../model/attributes\";\r\nimport ReadOnlyProperty from \"./ReadOnlyProperty\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { MetaType } from \"../model/character\";\r\n\r\nconst useStyles = makeStyles({\r\n\theader: {\r\n\t\tmarginTop: 10,\r\n\t\tmarginLeft: 5,\r\n\t},\r\n\tsection: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"row\",\r\n\t\tmarginBottom: 10,\r\n\t},\r\n})\r\n\r\nconst CombatTab: FC = () => {\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tconst character = useGlobalState(\"selectedCharacter\");\r\n\r\n\tconst body = getEffectiveAttributeRating(character, \"Body\");\r\n\tconst agility = getEffectiveAttributeRating(character, \"Agility\");\r\n\tconst reaction = getEffectiveAttributeRating(character, \"Reaction\");\r\n\tconst intuition = getEffectiveAttributeRating(character, \"Intuition\");\r\n\tconst willpower = getEffectiveAttributeRating(character, \"Willpower\");\r\n\r\n\tconst athletics = character.activeSkills.find(s => s.name === \"Athletics\")?.rating || 0;\r\n\r\n\tconst initiative = reaction + intuition;\r\n\tconst initiativePasses = 1;\r\n\r\n\tconst physicalBoxes = 8 + Math.ceil(body / 2);\r\n\tconst stunBoxes = 8 + Math.ceil(willpower / 2);\r\n\r\n\tlet sneaking = agility;\r\n\tif (character.metaType !== MetaType.Dwarf) {\r\n\t\tsneaking += 1;\r\n\t}\r\n\r\n\tlet walking = sneaking + athletics;\r\n\tif (character.metaType !== MetaType.Dwarf) {\r\n\t\twalking += 2;\r\n\t}\r\n\r\n\tconst running = walking * 2;\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<Typography className={classes.header}>Initiative</Typography>\r\n\t\t\t<Divider />\r\n\t\t\t<div className={classes.section}>\r\n\t\t\t\t<ReadOnlyProperty name=\"Initiative\" value={initiative} />\r\n\t\t\t\t<ReadOnlyProperty name=\"Initiative Passes\" value={initiativePasses} />\r\n\t\t\t</div>\r\n\t\t\t<Typography className={classes.header}>Condition Monitor</Typography>\r\n\t\t\t<Divider />\r\n\t\t\t<div className={classes.section}>\r\n\t\t\t\t<ReadOnlyProperty name=\"Physical Boxes\" value={physicalBoxes} />\r\n\t\t\t\t<ReadOnlyProperty name=\"Stun Boxes\" value={stunBoxes} />\r\n\t\t\t</div>\r\n\t\t\t<Typography className={classes.header}>Movement</Typography>\r\n\t\t\t<Divider />\r\n\t\t\t<div className={classes.section}>\r\n\t\t\t\t<ReadOnlyProperty name=\"Sneaking\" value={sneaking} />\r\n\t\t\t\t<ReadOnlyProperty name=\"Walking\" value={walking} />\r\n\t\t\t\t<ReadOnlyProperty name=\"Running\" value={running} />\r\n\t\t\t</div>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default CombatTab;","import React, { FC, useState, useEffect } from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SelectCharacter from \"./SelectCharacter\";\r\nimport CharacterName from \"./CharacterName\";\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport { ActionType, LoadSkillsData, LoadContactsData, LoadQualitiesData, LoadSpellsData, LoadGearData } from \"../reducer\";\r\nimport CharacterTab from \"./CharacterTab\";\r\nimport SkillsTab from \"./SkillsTab\";\r\nimport Karma from \"./Karma\";\r\nimport AttributesTab from \"./AttributesTab\";\r\nimport ContactsTab from \"./ContactsTab\";\r\nimport { isAwakened } from \"../model/character\";\r\nimport MagicTab from \"./MagicTab\";\r\nimport GearTab from \"./GearTab\";\r\nimport { transformAllGear, getCharacterGearNuyenCost, getCharacterGearKarmaCost } from \"../model/gear\";\r\nimport { getMetaTypeCost } from \"../model/meta-type\";\r\nimport { transformAllQualities, getCharacterQualitiesCost } from \"../model/quality\";\r\nimport { getAllContactsCost } from \"../model/contact\";\r\nimport { getCharacterSpellsCost } from \"../model/magic\";\r\nimport { getSkillsCost } from \"../model/skills\";\r\nimport { getAttributesCost } from \"../model/attributes\";\r\nimport CombatTab from \"./CombatTab\";\r\n\r\nconst useStyles = makeStyles({\r\n    bar: {\r\n        flexGrow: 1,\r\n        display: \"flex\",\r\n    }\r\n});\r\n\r\nconst CharacterCreator: FC = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const selectedCharacter = useGlobalState(\"selectedCharacter\");\r\n    const allQualities = useGlobalState(\"allQualities\");\r\n    const allGear = useGlobalState(\"allGear\");\r\n\r\n    useEffect(() => {\r\n        fetch(\"data/qualities.json\")\r\n            .then(response => response.json())\r\n            .then(qualities => {\r\n                const data = transformAllQualities(qualities) as LoadQualitiesData;\r\n                dispatch({ type: ActionType.LoadQualities, data });\r\n            })\r\n            .catch(error => {\r\n                console.error(`Error occured loading qualities: ${error.message}\\n${error.stack}`);\r\n            });\r\n        fetch(\"data/skills.json\")\r\n            .then(response => response.json())\r\n            .then(skills => {\r\n                const data = skills as LoadSkillsData;\r\n                dispatch({ type: ActionType.LoadSkills, data });\r\n            });\r\n        fetch(\"data/contacts.json\")\r\n            .then(response => response.json())\r\n            .then(contacts => {\r\n                const data = contacts.all as LoadContactsData;\r\n                dispatch({ type: ActionType.LoadContacts, data });\r\n            });\r\n        fetch(\"data/magic.json\")\r\n            .then(response => response.json())\r\n            .then(magic => {\r\n                const spellData = magic.spells as LoadSpellsData;\r\n                dispatch({ type: ActionType.LoadSpells, data: spellData });\r\n            });\r\n        fetch(\"data/gear.json\")\r\n            .then(response => response.json())\r\n            .then(gear => {\r\n                const gearData = transformAllGear(gear) as LoadGearData;\r\n                dispatch({ type: ActionType.LoadGear, data: gearData });\r\n            });\r\n    }, [dispatch]);\r\n\r\n    const saveClickHandler = () => {\r\n        dispatch({ type: ActionType.SaveCharacter });\r\n    };\r\n    const resetClickHandler = () =>{\r\n        dispatch({ type: ActionType.ClearCharacter });\r\n    };\r\n\r\n    const characterCost = getMetaTypeCost(selectedCharacter.metaType) + getCharacterQualitiesCost(selectedCharacter, allQualities);\r\n    const attributesCost = getAttributesCost(selectedCharacter);\r\n    const skillsCost = getSkillsCost(selectedCharacter);\r\n    const contactsCost = getAllContactsCost(selectedCharacter);\r\n    const magicCost = getCharacterSpellsCost(selectedCharacter);\r\n    const gearNuyenCost = getCharacterGearNuyenCost(selectedCharacter, allGear);\r\n    const getGearKarmaCost = getCharacterGearKarmaCost(gearNuyenCost);\r\n\r\n    const [selectedTab, setSelectedTab] = useState(0);\r\n    const onTabChange = (_event: React.ChangeEvent<{}>, newValue: number) => {\r\n        setSelectedTab(newValue);\r\n    };\r\n\r\n    const awakened = isAwakened(selectedCharacter);\r\n\r\n    let selectedTabPanel: JSX.Element | null;\r\n    switch (selectedTab) {\r\n        case 0:\r\n            selectedTabPanel = <CharacterTab />;\r\n            break;\r\n        case 1:\r\n            selectedTabPanel = <AttributesTab />;\r\n            break;\r\n        case 2:\r\n            selectedTabPanel = <SkillsTab />;\r\n            break;\r\n        case 3:\r\n            selectedTabPanel = <ContactsTab />;\r\n            break;\r\n        case 4: {\r\n            selectedTabPanel = <MagicTab />;\r\n            break;\r\n        }\r\n        case 5: {\r\n            selectedTabPanel = <GearTab />;\r\n            break;\r\n        }\r\n        case 6: {\r\n            selectedTabPanel = <CombatTab />;\r\n            break;\r\n        }\r\n        default:\r\n            throw new Error(`Unknown tab index ${selectedTab}`);\r\n    }\r\n\r\n    const [drawerOpen, setDrawerOpen] = useState(false);\r\n\r\n    const onMenuClick = () => {\r\n        setDrawerOpen(true);\r\n    }\r\n    const onDrawerClose = () => {\r\n        setDrawerOpen(false);\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <AppBar position=\"sticky\" color=\"default\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" onClick={onMenuClick} aria-label=\"menu\">\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <div className={classes.bar}>\r\n                        <CharacterName character={selectedCharacter} />\r\n                        <Karma />\r\n                    </div>\r\n                    <IconButton aria-label=\"save\" onClick={saveClickHandler} color=\"secondary\">\r\n                        <SaveIcon />\r\n                    </IconButton>\r\n                    <IconButton aria-label=\"clear\" onClick={resetClickHandler} color=\"secondary\">\r\n                        <ClearIcon />\r\n                    </IconButton>\r\n                </Toolbar>\r\n                <Tabs value={selectedTab} onChange={onTabChange} variant=\"scrollable\">\r\n                    <Tab\r\n                        label={\r\n                            <Badge badgeContent={characterCost} color=\"default\" showZero max={999}>\r\n                                Character\r\n                            </Badge>\r\n                        }\r\n                    />\r\n                    <Tab\r\n                        label={\r\n                            <Badge badgeContent={attributesCost} color=\"default\" showZero max={999}>\r\n                                Attributes\r\n                            </Badge>\r\n                        }\r\n                    />\r\n                    <Tab\r\n                        label={\r\n                            <Badge badgeContent={skillsCost} color=\"default\" showZero max={999}>\r\n                                Skills\r\n                            </Badge>\r\n                        }\r\n                    />\r\n                    <Tab\r\n                        label={\r\n                            <Badge badgeContent={contactsCost} color=\"default\" showZero max={999}>\r\n                                Contacts\r\n                            </Badge>\r\n                        }\r\n                    />\r\n                    <Tab\r\n                        disabled={!awakened}\r\n                        label={\r\n                            <Badge badgeContent={magicCost} color=\"default\" showZero max={999}>\r\n                                Magic\r\n                            </Badge>\r\n                        }\r\n                    />\r\n                    <Tab\r\n                        label={\r\n                            <Badge badgeContent={`¥${gearNuyenCost}`} color=\"default\" showZero max={1000000} anchorOrigin={{ vertical: \"top\", horizontal: \"left\" }}>\r\n                                <Badge badgeContent={getGearKarmaCost} color=\"default\" showZero max={999} anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}>\r\n                                    Gear\r\n                                </Badge>\r\n                            </Badge>\r\n                        }\r\n                    />\r\n                    <Tab label=\"Combat\" />\r\n                </Tabs>\r\n            </AppBar>\r\n            {\r\n                selectedTabPanel\r\n            }\r\n            <Drawer open={drawerOpen} onClose={onDrawerClose}>\r\n                <SelectCharacter />\r\n            </Drawer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CharacterCreator;","import React, { FC, useReducer } from \"react\";\r\nimport { DispatchContext, StateContext } from \"./context\";\r\nimport { reducer, INITIAL_STATE } from \"./reducer\";\r\nimport { State } from \"./model/state\";\r\nimport { loadCharacter, loadCharacters, loadSelectedCharacter } from \"./persistance\";\r\nimport CharacterCreator from \"./component/CharacterCreator\";\r\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        type: \"dark\"\r\n    }\r\n});\r\n\r\nconst App: FC = () => {\r\n    const [state, dispatch] = useReducer(reducer, INITIAL_STATE, (s: State): State => {\r\n        const characters = loadCharacters();\r\n        const selectedCharacterKey = loadSelectedCharacter();\r\n        let selectedCharacter = s.selectedCharacter;\r\n        if (selectedCharacterKey > -1) {\r\n            const selectedCharacterRef = characters.find(c => c.key === selectedCharacterKey);\r\n            if (selectedCharacterRef) {\r\n                const loadedCharacter = loadCharacter(selectedCharacterRef.key);\r\n                if (loadedCharacter) {\r\n                    selectedCharacter = loadedCharacter;\r\n                }\r\n            }\r\n        }\r\n        return { ...s, characters, selectedCharacter };\r\n    });\r\n\r\n    return (\r\n        <DispatchContext.Provider value={dispatch}>\r\n            <StateContext.Provider value={state}>\r\n                <ThemeProvider theme={theme}>\r\n                    <CssBaseline />\r\n                    <CharacterCreator />\r\n                </ThemeProvider>\r\n            </StateContext.Provider>\r\n        </DispatchContext.Provider>\r\n    );\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}