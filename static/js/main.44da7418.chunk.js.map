{"version":3,"sources":["model/character.ts","data/default-character.ts","persistance.ts","model/meta-type.ts","model/attributes.ts","model/skills.ts","model/quality.ts","model/karma.ts","reducer.ts","context.ts","component/CharacterName.tsx","component/SelectCharacter.tsx","data/meta-types.ts","component/PickerDialog.tsx","component/PickerButton.tsx","model/custom-item.ts","component/PropertyLeafNode.tsx","component/PropertyNode.tsx","component/PropertyTree.tsx","component/CharacterTab.tsx","component/Property.tsx","component/Skill.tsx","component/SkillList.tsx","component/ActiveSkillList.tsx","component/KnowledgeSkillList.tsx","component/LanguageSkillList.tsx","component/SkillsTab.tsx","component/Karma.tsx","component/Attribute.tsx","component/AttributeList.tsx","component/AttributesTab.tsx","model/contact.ts","component/Contact.tsx","component/ContactList.tsx","component/ContactsTab.tsx","model/magic.ts","component/MagicTab.tsx","model/dictionary.ts","component/ChipCollection.tsx","model/item.ts","component/ItemPickerCard.tsx","component/ItemPickerSection.tsx","component/ItemPickerDialog.tsx","model/gear.ts","component/ItemPickerButton.tsx","component/GroupContainer.tsx","component/GearTab.tsx","component/CharacterCreator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MetaType","isAwakened","character","undefined","qualities","positive","find","q","DEFAULT_KEY","DEFAULT_CHARACTER","key","name","streetName","metaType","Human","attributes","rating","negative","activeSkills","knowledgeSkills","languageSkills","contacts","spells","combat","detection","health","illusion","manipulation","gear","getDefaultCharacter","CHARACTER_KEY","createCharacterKey","loadCharacter","localStorage","getItem","JSON","parse","SELECTED_CHARACTER_KEY","CUSTOM_ITEM_KEY","createCustomItemKey","path","getMetaTypeCost","Ork","Dwarf","Elf","Troll","Error","getAttributeCost","getAttributesCost","awakened","cost","attribute","getActiveSkillCost","getActiveSkillsCost","map","s","reduce","a","b","getKnowledgeSkillCost","getKnowledgeSkillsCost","getFreeKnowledgeSkillPoints","intuition","logic","getQualitiesCost","selectedQualities","allQualities","selected","quality","Name","stringify","parseInt","Cost","getAllQualitiesCost","ActionType","STARTING_KARMA","getDefaultKarma","total","spent","available","getCharacterKarma","karma","state","activeSkillCost","knowledgeSkillCost","languageSkillCost","freeKnowledgePoints","Math","max","getSkillsCost","reducer","action","type","UpdateCharacter","selectedCharacter","data","SaveCharacter","isDefaultCharacter","Date","now","characters","push","setItem","saveCharacter","ClearCharacter","removeItem","clearCharacter","filter","c","SelectCharacter","characterRef","LoadQualities","LoadSkills","allSkills","LoadContacts","allContacts","LoadGear","allGear","LoadSpells","allSpells","LoadCustomItems","customItems","AddCustomItem","newItem","item","saveCustomItem","INITIAL_STATE","active","knowledge","language","DispatchContext","createContext","useDispatch","useContext","StateContext","useGlobalState","property","CharacterName","props","Typography","dispatch","List","subheader","ListSubheader","ListItem","onClick","onCharacterClick","ALL_META_TYPES","useStyles","makeStyles","content","width","header","display","minWidth","maxWidth","textAlign","availability","ul","padding","PickerDialog","open","onClose","title","items","onItemSelectionChange","includeAvailability","includeCost","allowNewItems","allowMultiSelection","classes","useState","newItemName","setNewItemName","newItemAvailability","setNewItemAvailability","newItemCost","setNewItemCost","onUpdateNewItem","event","value","target","id","Dialog","DialogTitle","DialogContent","className","TextField","label","onChange","variant","IconButton","aria-label","Availability","color","size","ListItemText","disabled","findName","Object","keys","editButton","paddingLeft","PickerButton","breadcrums","values","selectedValueNames","addValue","removeValue","allowNewValues","createValue","setOpen","join","v","findAvailability","findCost","n","createSelectableItem","disableRipple","getChildItems","parentPath","startsWith","flexDirection","headerLabel","lineHeight","marginLeft","PropertyLeafNode","fontWeight","names","allValues","onNamesUpdated","sort","localeCompare","length","newValues","index","findIndex","splice","style","getCost","fontWeights","PropertyNode","rootCost","all","onValueUpdated","sentenceCase","split","isArray","getBreadcrums","updatedNames","isRoot","children","childName","childAll","childPath","defaultValue","childValue","updatedChildValue","updatedValue","ExpansionPanel","defaultExpanded","ExpansionPanelSummary","expandIcon","ExpansionPanelDetails","PropertyTree","rootName","rootValue","rootAll","onRootUpdated","marginRight","marginBottom","field","marginTop","divider","margin","CharacterTab","onCharacterUpdated","updatedCharacter","id-","e","Select","displayEmpty","t","MenuItem","updatedQualities","root","height","slider","Property","onUpdate","min","step","formatDisplayValue","computeCost","gutterBottom","Slider","marks","valueLabelDisplay","Array","valueLabelFormat","_index","Skill","skill","toString","paddingTop","SkillList","skills","computeSkillCost","onSkillsUpdated","onSkillUpdate","newSkills","skillIndex","FormControlLabel","stopPropagation","onFocus","control","ActiveSkillList","activeSkillsCost","allActiveSkills","KnowledgeSkillList","knowledgeSkillsCost","freeKnowledgeSkillPoints","totalCost","allKnowledgeSkills","LanguageSkillList","languageSkillsCost","allLanguageSkills","SkillsTab","badge","Karma","Badge","badgeContent","showZero","Attribute","modifier","getAttributeModifier","AttributeList","filteredAttributes","attributesCost","newAttributes","attributeIndex","AttributesTab","getContactRatingCost","getContactCost","contact","connection","loyalty","details","Contact","contactCost","updatedConnection","updatedContact","updatedLoyalty","ContactList","selectedContacts","contactsCost","getAllContactsCost","freeContactPoints","charisma","willpower","getFreeContactPoints","onContactUpdate","newContacts","contactIndex","ContactsTab","getSpellsCost","MagicTab","getCharacterSpellsCost","updatedSpells","getChildSet","subset","findChildPaths","childPaths","parents","components","match","i","flexWrap","justifyContent","chip","ChipCollection","createChipLabel","onDeleteValue","Chip","onDelete","getItemSubset","subItems","ItemPickerCard","onUpdateItem","count","Paper","elevation","ButtonGroup","Button","ItemPickerSection","onUpdateItems","handleUpdate","newItems","Divider","ItemPickerDialog","allItems","onUpdateAllItems","allPaths","paths","pathToLabel","Map","finalComponent","set","group","setGroup","p","get","newAllItems","gearRoot","transformAllGear","allData","transformAllGearInner","parentData","childData","transformGearItem","test","splitGearItems","finalizeGearItem","costLabel","propName","propValue","itemVersions","groupResult","exec","namePrefix","nameSuffixes","r","trim","itemCount","itemVersion","splitValues","costResult","isNaN","itemCostMap","findItemCost","has","subGear","g","createSavedItem","grade","savedItem","ItemPickerButton","parentPathsToName","parentPathToName","differenceFound","componentIndex","pathIndex","slice","getNextParentPaths","parentPaths","setParentPath","menuAnchor","setMenuAnchor","allChildItems","allCountedItems","localItems","matchingItems","localItem","matchingItem","currentTarget","anchorEl","Boolean","handleMenuClick","newCountedItems","includeItem","GroupContainer","createItemLabel","flatItems","toDelete","GearTab","createGearLabel","childNames","Set","add","from","getChildNames","newSubGear","newGear","handleUpdateGear","bar","flexGrow","CharacterCreator","useEffect","fetch","then","response","json","catch","error","console","message","stack","magic","spellData","gearData","selectedTabPanel","selectedTab","setSelectedTab","drawerOpen","setDrawerOpen","AppBar","position","Toolbar","edge","Tabs","_event","newValue","Tab","Drawer","theme","createMuiTheme","palette","App","useReducer","characterJSON","loadCharacters","selectedCharacterKey","loadSelectedCharacter","selectedCharacterRef","loadedCharacter","Provider","ThemeProvider","CssBaseline","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.44da7418.chunk.js","sourcesContent":["import { Contact } from \"./contact\";\r\nimport { Spells } from \"./magic\";\r\nimport { Qualities } from \"./quality\";\r\nimport { Item } from \"./item\";\r\n\r\nexport enum MetaType {\r\n    Dwarf = \"Dwarf\",\r\n    Elf = \"Elf\",\r\n    Human = \"Human\",\r\n    Ork = \"Ork\",\r\n    Troll = \"Troll\",\r\n}\r\n\r\nexport type NamedProperty = {\r\n    name: string;\r\n    rating: number;\r\n};\r\n\r\nexport type Attribute = NamedProperty;\r\n\r\nexport type Skill = NamedProperty;\r\n\r\nexport type CharacterRef = {\r\n    key: number;\r\n    name: string;\r\n    streetName: string;\r\n};\r\n\r\nexport type Character = CharacterRef & {\r\n    metaType: MetaType;\r\n    attributes: Attribute[];\r\n    qualities: Qualities;\r\n    activeSkills: Skill[];\r\n    knowledgeSkills: Skill[];\r\n    languageSkills: Skill[];\r\n    contacts: Contact[];\r\n    spells: Spells;\r\n    // gear: any;\r\n    gear: Item[];\r\n};\r\n\r\nexport function isAwakened(character: Character): boolean {\r\n    return character.qualities.positive.find(q => q === \"Adept\" || q === \"Magician\") !== undefined;\r\n}","import { Character, MetaType } from \"../model/character\";\r\n\r\nconst DEFAULT_KEY = -1;\r\nconst DEFAULT_CHARACTER: Character = {\r\n    key: DEFAULT_KEY,\r\n    name: \"\",\r\n    streetName: \"\",\r\n    metaType: MetaType.Human,\r\n    attributes: [\r\n        { name: \"Body\", rating: 3 },\r\n        { name: \"Agility\", rating: 3 },\r\n        { name: \"Reaction\", rating: 3 },\r\n        { name: \"Strength\", rating: 3 },\r\n        { name: \"Charisma\", rating: 3 },\r\n        { name: \"Intuition\", rating: 3 },\r\n        { name: \"Logic\", rating: 3 },\r\n        { name: \"Willpower\", rating: 3 },\r\n        { name: \"Edge\", rating: 3 },\r\n        { name: \"Magic\", rating: 3 },\r\n    ],\r\n    qualities: { positive: [], negative: [] },\r\n    activeSkills: [],\r\n    knowledgeSkills: [],\r\n    languageSkills: [],\r\n    contacts: [],\r\n    spells: {\r\n        combat: [],\r\n        detection: [],\r\n        health: [],\r\n        illusion: [],\r\n        manipulation: [],\r\n    },\r\n    gear: [],\r\n    // gear: {\r\n    //     weapons: {\r\n    //         meleeWeapons: {\r\n    //             unarmed: [],\r\n    //             clubs: [],\r\n    //             clades: [],\r\n    //             exoticMeleeWeapons: [],\r\n    //         },\r\n    //         projectileAndThrowingWeapons: {\r\n    //             throwingWeapons: [],\r\n    //             bows: [],\r\n    //             crossbows: [],\r\n    //             arrowheads: [],\r\n    //         },\r\n    //         lessThanLethal: {\r\n    //             tasers: [],\r\n    //             specialRangedWeapons: [],\r\n    //         },\r\n    //         firearms: {\r\n    //             holdOutPistols: [],\r\n    //             lightPistols: [],\r\n    //             heavyPistols: [],\r\n    //             subMachineguns: [],\r\n    //             shotguns: [],\r\n    //             assaultRifles: [],\r\n    //             sportRifles: [],\r\n    //             sniperRifles: [],\r\n    //             assaultCannons: [],\r\n    //             lightMachineguns: [],\r\n    //             mediumMachineguns: [],\r\n    //             heavyMachineguns: [],\r\n    //             ammunitionTypes: [],\r\n    //             firearmAccessories: [],\r\n    //         },\r\n    //         grenadesAndRockets: {\r\n    //             grenades: [],\r\n    //             grenadeLaunchers: [],\r\n    //             rockets: [],\r\n    //             rocketLaunchers: []\r\n    //         },\r\n    //     },\r\n    //     clothingAndArmor: {\r\n    //         clothing: [],\r\n    //         armor: [],\r\n    //         armorModifications: [],\r\n    //         helmetsAndShields: [],\r\n    //     },\r\n    //     augmentations: {\r\n    //         cyberAndBiowareGrades: [],\r\n    //         headware: [],\r\n    //         eyeware: [],\r\n    //         earware: [],\r\n    //         bodyware: [],\r\n    //         cyberlimbs: [],\r\n    //         cyberlimbEnhancements: [],\r\n    //         cyberlimbAccessories: [],\r\n    //         cyberMeleeWeapons: [],\r\n    //         basicBioware: [],\r\n    //         culturedBioware: [],\r\n    //     },\r\n    //     tech: {\r\n    //         electronics: {\r\n    //             commlink: [],\r\n    //             coomlinkUpgrades: [],\r\n    //             commlinkAccessories: [],\r\n    //         },\r\n    //         surveillance: {\r\n    //             imagingDevicies: [],\r\n    //             imagingEnhancements: [],\r\n    //             audioDevices: [],\r\n    //             audioEnhancements: [],\r\n    //             sensorPackages: [],\r\n    //             sensorFunctions: [],\r\n    //         },\r\n    //         security: {\r\n    //             locks: [],\r\n    //             restraints: [],\r\n    //             breakingAndEnteringTools: [],\r\n    //             disguises: [],\r\n    //         },\r\n    //         datachipsAndSoftware: {\r\n    //             matrixPrograms: [],\r\n    //             skillsoftPrograms: [],\r\n    //             dataPrograms: [],\r\n    //             simsemse: [],\r\n    //             areprograms: [],\r\n    //         },\r\n    //         tools: [],\r\n    //         survivalGear: [],\r\n    //         grapplegun: [],\r\n    //     },\r\n    //     medicalEquipment: {\r\n    //         biotech: [],\r\n    //         slapPatches: [],\r\n    //         docwagonContracts: [],\r\n    //     },\r\n    //     chemicals: {\r\n    //         drugs: [],\r\n    //         toxins: [],\r\n    //         compounds: [],\r\n    //     },\r\n    //     explosives: {\r\n    //         explosives: [],\r\n    //         detonators: [],\r\n    //     },\r\n    //     magicalEquipment: {\r\n    //         spellFormulae: [],\r\n    //         spellFetish: [],\r\n    //         foci: [],\r\n    //         magicalSupplies: [],\r\n    //     },\r\n    //     vehiclesAndDrones: {\r\n    //         bikes: [],\r\n    //         cars: [],\r\n    //         trucks: [],\r\n    //         securityVehicles: [],\r\n    //         microDroens: [],\r\n    //         miniDrones: [],\r\n    //         smallDrones: [],\r\n    //         mediumDrones: [],\r\n    //         largeDrones: [],\r\n    //         vehicleModifications: [],\r\n    //     },\r\n    // }\r\n};\r\n\r\nexport function getDefaultCharacter(): Character {\r\n    return { ...DEFAULT_CHARACTER };\r\n}\r\n\r\nexport function isDefaultCharacter(character: Character): boolean {\r\n    return JSON.stringify(DEFAULT_CHARACTER) === JSON.stringify(character);\r\n}\r\n\r\nexport function hasDefaultKey(character: Character): boolean {\r\n    return character.key === DEFAULT_KEY;\r\n}","import { Character, CharacterRef } from \"./model/character\";\r\nimport { CustomItem } from \"./model/custom-item\";\r\nimport { getDefaultCharacter } from \"./data/default-character\";\r\nimport { Dictionary } from \"./model/dictionary\";\r\n\r\nconst CHARACTER_KEY = \"character\";\r\n\r\nfunction createCharacterKey(key: number): string {\r\n    return `${CHARACTER_KEY}:${key}`;\r\n}\r\n\r\nexport function loadCharacters(): CharacterRef[] {\r\n    const characters: CharacterRef[] = [getDefaultCharacter()];\r\n    for (let i = 0; i < localStorage.length; i++) {\r\n        const key = localStorage.key(i);\r\n        if (key === null) {\r\n            continue;\r\n        }\r\n        // charater:1337\r\n        if (/^character:\\d+$/i.test(key)) {\r\n            const characterJSON = localStorage.getItem(key);\r\n            if (characterJSON) {\r\n                const { key, name, streetName } = JSON.parse(characterJSON);\r\n                characters.push({ key, name, streetName });\r\n            }\r\n        }\r\n    }\r\n    characters.sort((a, b) => a.key - b.key);\r\n    return characters;\r\n}\r\n\r\nexport function loadCharacter(key: number): Character | undefined {\r\n    if (key === -1) {\r\n        return getDefaultCharacter();\r\n    }\r\n    const character = localStorage.getItem(createCharacterKey(key));\r\n    if (character) {\r\n        return JSON.parse(character);\r\n    } else {\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport function saveCharacter(character: Character) {\r\n    localStorage.setItem(createCharacterKey(character.key), JSON.stringify(character));\r\n}\r\n\r\nexport function clearCharacter(character: Character) {\r\n    localStorage.removeItem(createCharacterKey(character.key));\r\n}\r\n\r\nconst SELECTED_CHARACTER_KEY = \"selected-character\";\r\n\r\nexport function loadSelectedCharacter(): number {\r\n    const selectedCharacter = localStorage.getItem(SELECTED_CHARACTER_KEY);\r\n    if (selectedCharacter) {\r\n        return parseInt(selectedCharacter);\r\n    } else {\r\n        return -1;\r\n    }\r\n}\r\n\r\nexport function saveSelectedCharacter(key: number) {\r\n    localStorage.setItem(SELECTED_CHARACTER_KEY, key.toString());\r\n}\r\n\r\nexport function clearSelectedCharacter() {\r\n    localStorage.removeItem(SELECTED_CHARACTER_KEY);\r\n}\r\n\r\nconst CUSTOM_ITEM_KEY = \"custom-item\";\r\n\r\nfunction createCustomItemKey(path: string, name: string): string {\r\n    return `${CUSTOM_ITEM_KEY}:${path}.${name}}`;\r\n}\r\n\r\nexport function loadCustomItems(): Dictionary<CustomItem> {\r\n    const customItems: Dictionary<CustomItem> = {};\r\n    for (let i = 0; i < localStorage.length; i++) {\r\n        const key = localStorage.key(i);\r\n        if (key === null) {\r\n            // not a custom item\r\n            continue;\r\n        }\r\n        /*\r\n        custom-item:category.group.name => [\r\n            \"custom-item:category.group.name\",\r\n            \"category.group\",\r\n            \"name\"\r\n        ]\r\n        */\r\n        const result = /^custom-item:(?:((?:(?:\\w+)(?:\\.)?)*)\\.)?(\\w+)$/i.exec(key);\r\n        if (result) {\r\n            const path = result[1];\r\n            const itemJSON = localStorage.getItem(key);\r\n            if (itemJSON) {\r\n                const item = JSON.parse(itemJSON);\r\n                customItems[path] = item;\r\n            }\r\n        }\r\n    }\r\n    return customItems;\r\n}\r\n\r\nexport function saveCustomItem(path: string, item: CustomItem) {\r\n    const key = createCustomItemKey(path, item.Name);\r\n    localStorage.setItem(key, JSON.stringify(item));\r\n}\r\n\r\nexport function clearCustomItem(path: string, item: CustomItem) {\r\n    const key = createCustomItemKey(path, item.Name);\r\n    localStorage.removeItem(key);\r\n}","import { MetaType } from \"./character\";\r\n\r\nexport function getMetaTypeCost(metaType: MetaType): number {\r\n    switch (metaType) {\r\n        case MetaType.Human:\r\n            return 0;\r\n        case MetaType.Ork:\r\n            return 40;\r\n        case MetaType.Dwarf:\r\n            return 50;\r\n        case MetaType.Elf:\r\n            return 60;\r\n        case MetaType.Troll:\r\n            return 80;\r\n        default:\r\n            throw new Error(`Unknown meta-type '${metaType}'`);\r\n    }\r\n}","import { MetaType, Attribute, Character, isAwakened } from \"./character\";\r\n\r\nexport function getAttributeModifier(metaType: MetaType, attribute: Attribute): number {\r\n    switch (metaType) {\r\n        case MetaType.Dwarf:\r\n            switch (attribute.name) {\r\n                case \"Body\":\r\n                    return 1;\r\n                case \"Reaction\":\r\n                    return -1;\r\n                case \"Strength\":\r\n                    return 2;\r\n                case \"Willpower\":\r\n                    return 1;\r\n            }\r\n            break;\r\n        case MetaType.Elf:\r\n            switch (attribute.name) {\r\n                case \"Agility\":\r\n                    return 1;\r\n                case \"Charisma\":\r\n                    return 2;\r\n            }\r\n            break;\r\n        case MetaType.Human:\r\n            switch (attribute.name) {\r\n                case \"Edge\":\r\n                    return 1;\r\n            }\r\n            break;\r\n        case MetaType.Ork:\r\n            switch (attribute.name) {\r\n                case \"Body\":\r\n                    return 3;\r\n                case \"Strength\":\r\n                    return 2;\r\n                case \"Charisma\":\r\n                    return -1;\r\n                case \"Logic\":\r\n                    return -1;\r\n            }\r\n            break;\r\n        case MetaType.Troll:\r\n            switch (attribute.name) {\r\n                case \"Body\":\r\n                    return 4;\r\n                case \"Agility\":\r\n                    return -1;\r\n                case \"Strength\":\r\n                    return 4;\r\n                case \"Charisma\":\r\n                    return -2;\r\n                case \"Intuition\":\r\n                    return -1;\r\n                case \"Logic\":\r\n                    return -1;\r\n            }\r\n            break;\r\n    }\r\n    return 0;\r\n}\r\n\r\nexport function getAttributeCost(rating: number): number {\r\n    switch (rating) {\r\n        case 1:\r\n            return -25;\r\n        case 2:\r\n            return -15;\r\n        case 3:\r\n            return 0;\r\n        case 4:\r\n            return 20;\r\n        case 5:\r\n            return 45;\r\n        case 6:\r\n            return 75;\r\n        case 7:\r\n            return 110;\r\n        default:\r\n            throw new Error(`Unsupported attribute rating ${rating}`);\r\n    }\r\n}\r\n\r\nexport function getAttributesCost(character: Character): number {\r\n    const awakened = isAwakened(character);\r\n    let cost = 0;\r\n    for (const attribute of character.attributes) {\r\n        if (attribute.name === \"Magic\" && !awakened) {\r\n            // character could be awakened, have their Magic attribute, then be mundane\r\n            // ignore any Magic changes in this case\r\n            continue;\r\n        }\r\n        cost += getAttributeCost(attribute.rating);\r\n    }\r\n    return cost;\r\n}","import { Skill, Character } from \"./character\";\r\nimport { CustomItem } from \"./custom-item\";\r\n\r\nexport type Skills = {\r\n    active: CustomItem[];\r\n    knowledge: CustomItem[];\r\n    language: CustomItem[];\r\n};\r\n\r\nexport function getActiveSkillCost(rating: number): number {\r\n    switch (rating) {\r\n        case -1:\r\n            return 0;\r\n        case 1:\r\n            return 5;\r\n        case 3:\r\n            return 15;\r\n        case 5:\r\n            return 30;\r\n        default:\r\n            throw new Error(`Unsupported skill rating ${rating}`);\r\n    }\r\n}\r\n\r\nexport function getActiveSkillsCost(activeSkills: Skill[]): number {\r\n    return activeSkills.map(s => getActiveSkillCost(s.rating)).reduce((a, b) => a + b, 0);\r\n}\r\n\r\nexport function getKnowledgeSkillCost(rating: number): number {\r\n    switch (rating) {\r\n        case 1:\r\n            return 2;\r\n        case 3:\r\n            return 7;\r\n        case 5:\r\n            return 15;\r\n        default:\r\n            throw new Error(`Unsupported skill rating ${rating}`);\r\n    }\r\n}\r\n\r\nexport function getKnowledgeSkillsCost(knowledgeSkills: Skill[]): number {\r\n    return knowledgeSkills.map(s => getKnowledgeSkillCost(s.rating)).reduce((a, b) => a + b, 0);\r\n}\r\n\r\nexport function getFreeKnowledgeSkillPoints(character: Character): number {\r\n    const intuition = character.attributes.find(a => a.name === \"Intuition\");\r\n    if (intuition === undefined) {\r\n        throw new Error(`Character '${character.streetName}' has no attribute 'Intuition'`);\r\n    }\r\n    const logic = character.attributes.find(a => a.name === \"Logic\");\r\n    if (logic === undefined) {\r\n        throw new Error(`Character '${character.streetName}' has no attribute 'Logic'`);\r\n    }\r\n    return (intuition.rating + logic.rating) * 10;\r\n}\r\n\r\nexport function getSkillsCost(character: Character): number {\r\n    const activeSkillCost = getActiveSkillsCost(character.activeSkills);\r\n    const knowledgeSkillCost = getKnowledgeSkillsCost(character.knowledgeSkills);\r\n    // exclude native language\r\n    const languageSkillCost = getKnowledgeSkillsCost(character.languageSkills);\r\n    const freeKnowledgePoints = getFreeKnowledgeSkillPoints(character);\r\n    return activeSkillCost + Math.max(knowledgeSkillCost + languageSkillCost - freeKnowledgePoints, 0);\r\n}","import { CustomItem } from \"./custom-item\";\r\n\r\nexport type Qualities = {\r\n    positive: string[];\r\n    negative: string[]\r\n};\r\n\r\nexport type AllQualities = {\r\n    positive: CustomItem[];\r\n    negative: CustomItem[];\r\n}\r\n\r\nexport function getQualitiesCost(selectedQualities: string[], allQualities: CustomItem[]): number {\r\n    let cost = 0;\r\n    for (const selected of selectedQualities) {\r\n        const quality = allQualities.find(q => q.Name === selected);\r\n        if (!quality) {\r\n            throw new Error(`Could not find quality with name '${selected}' in list '${JSON.stringify(allQualities)}'`);\r\n        }\r\n        cost += parseInt(quality.Cost!);\r\n    }\r\n    return cost;\r\n}\r\n\r\nexport function getAllQualitiesCost(selectedQualities: { positive: string[], negative: string[] }, allQualities: AllQualities): number {\r\n    let cost = 0;\r\n    cost += getQualitiesCost(selectedQualities.positive, allQualities.positive);\r\n    cost += getQualitiesCost(selectedQualities.negative, allQualities.negative);\r\n    return cost;\r\n}","import { Character } from \"./character\";\r\nimport { getMetaTypeCost } from \"./meta-type\";\r\nimport { getAttributesCost } from \"./attributes\";\r\nimport { getSkillsCost } from \"./skills\";\r\nimport { getAllQualitiesCost } from \"./quality\";\r\nimport { State } from \"./state\";\r\n\r\nexport type Karma = {\r\n    total: number;\r\n    spent: number;\r\n    available: number;\r\n};\r\n\r\nconst STARTING_KARMA = 500;\r\n\r\nexport function getDefaultKarma(): Karma {\r\n    return {\r\n        total: STARTING_KARMA,\r\n        spent: 0,\r\n        available: STARTING_KARMA\r\n    };\r\n}\r\n\r\nexport function getCharacterKarma(karma: Karma, character: Character, state: State): Karma {\r\n    const { total } = karma;\r\n    let spent = 0;\r\n    spent += getMetaTypeCost(character.metaType);\r\n    spent += getAllQualitiesCost(character.qualities, state.allQualities);\r\n    spent += getAttributesCost(character);\r\n    spent += getSkillsCost(character);\r\n    const available = total - spent;\r\n    return { total, spent, available };\r\n}","import { Reducer } from \"react\";\r\nimport { State } from \"./model/state\";\r\nimport { getDefaultCharacter, isDefaultCharacter, hasDefaultKey } from \"./data/default-character\";\r\nimport { Character, CharacterRef } from \"./model/character\";\r\nimport { saveCharacter, clearCharacter, loadCharacter, saveCustomItem } from \"./persistance\";\r\nimport { getDefaultKarma, getCharacterKarma } from \"./model/karma\";\r\nimport { AllQualities } from \"./model/quality\";\r\nimport { Skills } from \"./model/skills\";\r\nimport { CustomItem } from \"./model/custom-item\";\r\nimport { Spells } from \"./model/magic\";\r\nimport { Gear } from \"./model/gear\";\r\nimport { Dictionary } from \"./model/dictionary\";\r\n\r\nexport enum ActionType {\r\n    UpdateCharacter = \"updateCharacter\",\r\n    SaveCharacter = \"saveCharacter\",\r\n    ClearCharacter = \"clearCharacter\",\r\n    SelectCharacter = \"selectCharacter\",\r\n    LoadQualities = \"loadQualities\",\r\n    LoadSkills = \"loadSkills\",\r\n    LoadContacts = \"loadContacts\",\r\n    LoadSpells = \"loadSpells\",\r\n    LoadGear = \"loadGear\",\r\n    LoadCustomItems = \"loadCustomItems\",\r\n    AddCustomItem = \"addCustomItem\"\r\n}\r\n\r\nexport type Action = {\r\n    type: ActionType;\r\n    data?: any;\r\n};\r\n\r\nexport type UpdateCharacterData = Character;\r\nexport type SelectCharacterData = CharacterRef;\r\nexport type LoadQualitiesData = AllQualities;\r\nexport type LoadSkillsData = Skills;\r\nexport type LoadContactsData = CustomItem[];\r\nexport type LoadSpellsData = Spells;\r\nexport type LoadGearData = Dictionary<Gear[]>;\r\nexport type LoadCustomItemsData = Dictionary<CustomItem>;\r\nexport type AddCustomItemData = { path: string, item: CustomItem };\r\n\r\nexport const reducer: Reducer<State, Action> = (state: State, action: Action): State => {\r\n    switch (action.type) {\r\n        case ActionType.UpdateCharacter: {\r\n            const selectedCharacter = action.data as UpdateCharacterData;\r\n            const karma = getCharacterKarma(state.karma, selectedCharacter, state);\r\n            return { ...state, selectedCharacter, karma };\r\n        }\r\n        case ActionType.SaveCharacter: {\r\n            if (hasDefaultKey(state.selectedCharacter)) {\r\n                // character has not been saved yet\r\n                if (isDefaultCharacter(state.selectedCharacter)) {\r\n                    // don't save copies of the empty character\r\n                    break;\r\n                }\r\n                state.selectedCharacter.key = Date.now();\r\n                const { key, name, streetName } = state.selectedCharacter;\r\n                state.characters.push({ key, name, streetName });\r\n            }\r\n            // the list of characters is not saved separatly - it is constructed from all the available characters\r\n            saveCharacter(state.selectedCharacter);\r\n            return { ...state};\r\n        }\r\n        case ActionType.ClearCharacter: {\r\n            clearCharacter(state.selectedCharacter);\r\n            const characters = state.characters\r\n                .filter(c => c.key !== state.selectedCharacter.key)\r\n                .map(({ key, name, streetName }) => ({ key, name, streetName }));\r\n            return { ...state, characters, selectedCharacter: getDefaultCharacter(), karma: getDefaultKarma() };\r\n        }\r\n        case ActionType.SelectCharacter: {\r\n            const characterRef = action.data as SelectCharacterData;\r\n            // Loading the app with a saved character can throw an error calculating karma cost, as the available data (qualities, etc) have not been loaded yet\r\n            // saveSelectedCharacter(characterRef.key);\r\n            const selectedCharacter = loadCharacter(characterRef.key);\r\n            if (!selectedCharacter) {\r\n                throw new Error(`Could not find saved character ${JSON.stringify(characterRef)}`);\r\n            }\r\n            const karma = getCharacterKarma(state.karma, selectedCharacter, state);\r\n            return { ...state, selectedCharacter, karma};\r\n        }\r\n        case ActionType.LoadQualities: {\r\n            const allQualities = action.data as LoadQualitiesData;\r\n            return { ...state, allQualities };\r\n        }\r\n        case ActionType.LoadSkills: {\r\n            const allSkills = action.data as LoadSkillsData;\r\n            return { ...state, allSkills };\r\n        }\r\n        case ActionType.LoadContacts: {\r\n            const allContacts = action.data as LoadContactsData;\r\n            return { ...state, allContacts}\r\n        }\r\n        case ActionType.LoadGear: {\r\n            const allGear = action.data as LoadGearData;\r\n            return { ...state, allGear };\r\n        }\r\n        case ActionType.LoadSpells: {\r\n            const allSpells = action.data as LoadSpellsData;\r\n            return { ...state, allSpells };\r\n        }\r\n        case ActionType.LoadCustomItems: {\r\n            const customItems = action.data as LoadCustomItemsData;\r\n            return { ...state, customItems };\r\n        }\r\n        case ActionType.AddCustomItem: {\r\n            const newItem = action.data as AddCustomItemData;\r\n            // persist item in local storage for later\r\n            saveCustomItem(newItem.path, newItem.item);\r\n            const customItems = { ...state.customItems };\r\n            customItems[newItem.path] = newItem.item;\r\n            return { ...state, customItems };\r\n        }\r\n    }\r\n    return { ...state };\r\n}\r\n\r\nexport const INITIAL_STATE: State = {\r\n    characters: [],\r\n    selectedCharacter: getDefaultCharacter(),\r\n    karma: getDefaultKarma(),\r\n    allQualities: { positive: [], negative: [] },\r\n    allSkills: { active: [], knowledge: [], language: [] },\r\n    allContacts: [],\r\n    allSpells: { combat: [], detection: [], health: [], illusion: [], manipulation: [] },\r\n    allGear: {},\r\n    customItems: {},\r\n};","import { createContext, Dispatch, useContext } from \"react\";\r\nimport { State } from \"./model/state\";\r\nimport { Action, INITIAL_STATE } from \"./reducer\";\r\n\r\nexport const DispatchContext = createContext<Dispatch<Action>>(() => {});\r\n\r\nexport const useDispatch = (): Dispatch<Action> => {\r\n    return useContext(DispatchContext);\r\n}\r\n\r\nexport const StateContext = createContext<State>(INITIAL_STATE);\r\n\r\nexport const useGlobalState = <K extends keyof State>(property: K) => {\r\n    const state = useContext(StateContext);\r\n    return state[property];\r\n}","import React, { FC } from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { CharacterRef } from \"../model/character\";\r\n\r\n\r\ntype Props = {\r\n    character: CharacterRef;\r\n};\r\n\r\nconst CharacterName: FC<Props> = (props: Props) => {\r\n    const { character } = props;\r\n    const { name, streetName } = character;\r\n    if (!name && !streetName) {\r\n        return <Typography>= New Character =</Typography>;\r\n    }\r\n    if (!streetName) {\r\n        return <Typography>{name}</Typography>\r\n    }\r\n    if (!name) {\r\n        return <Typography>{streetName}</Typography>\r\n    }\r\n    return <Typography>{name} aka {streetName}</Typography>\r\n};\r\n\r\nexport default CharacterName;","import React, { FC } from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\r\nimport { useGlobalState, useDispatch } from \"../context\";\r\nimport CharacterName from \"./CharacterName\";\r\nimport { CharacterRef } from \"../model/character\";\r\nimport { ActionType, SelectCharacterData } from \"../reducer\";\r\n\r\nconst SelectCharacter: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const characters = useGlobalState(\"characters\");\r\n\r\n    const onCharacterClick = (character: CharacterRef) => {\r\n        const data: SelectCharacterData = character;\r\n        dispatch({ type: ActionType.SelectCharacter, data });\r\n    };\r\n    return (\r\n        <List subheader={\r\n            <ListSubheader>Characters</ListSubheader>\r\n            }\r\n            >\r\n            {\r\n                characters.map(c => (\r\n                    <ListItem key={c.key} onClick={() => onCharacterClick(c)}>\r\n                        <CharacterName character={c} />\r\n                    </ListItem>\r\n                ))\r\n            }\r\n        </List>\r\n    )\r\n};\r\n\r\nexport default SelectCharacter;","import { MetaType } from \"../model/character\";\r\n\r\nexport const ALL_META_TYPES: MetaType[] = [\r\n    MetaType.Human,\r\n    MetaType.Ork,\r\n    MetaType.Dwarf,\r\n    MetaType.Elf,\r\n    MetaType.Troll\r\n];\r\n","import React, { FC, Fragment, useState } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { CustomItem } from \"../model/custom-item\";\r\n\r\nexport type SelectableItem = CustomItem & {\r\n\tselected: boolean;\r\n};\r\n\r\nconst useStyles = makeStyles(({\r\n\tcontent: {\r\n\t\twidth: \"100%\",\r\n\t},\r\n\theader: {\r\n\t\tdisplay: \"flex\",\r\n\t},\r\n\tname: {\r\n\t\tminWidth: 300,\r\n\t\tmaxWidth: 300,\r\n\t\ttextAlign: \"left\",\r\n\t},\r\n\tavailability: {\r\n\t\tminWidth: 100,\r\n\t\tmaxWidth: 100,\r\n\t\ttextAlign: \"center\",\r\n\t},\r\n\tcost: {\r\n\t\tminWidth: 100,\r\n\t\tmaxWidth: 100,\r\n\t\ttextAlign: \"right\",\r\n\t},\r\n\tul: {\r\n\t\tpadding: 0,\r\n\t},\r\n}));\r\n\r\ntype Props = {\r\n\topen: boolean;\r\n\tonClose: () => void;\r\n\ttitle: string;\r\n\titems: SelectableItem[];\r\n\tonItemSelectionChange: (item: SelectableItem) => void;\r\n\tincludeAvailability: boolean;\r\n\tincludeCost: boolean;\r\n\tallowNewItems: boolean;\r\n\tallowMultiSelection: boolean;\r\n};\r\nconst PickerDialog: FC<Props> = (props: Props) => {\r\n\tconst { open, onClose, title, items, onItemSelectionChange, includeAvailability, includeCost, allowNewItems, allowMultiSelection } = props;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tconst [newItemName, setNewItemName] = useState(\"\");\r\n\tconst [newItemAvailability, setNewItemAvailability] = useState(\"\");\r\n\tconst [newItemCost, setNewItemCost] = useState(\"\");\r\n\r\n\tconst onUpdateNewItem = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tconst value = event.target.value;\r\n\t\tswitch (event.target.id) {\r\n\t\t\tcase \"new-item-name\": {\r\n\t\t\t\tsetNewItemName(value);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase \"new-item-availability\": {\r\n\t\t\t\tsetNewItemAvailability(value);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase \"new-item-cost\": {\r\n\t\t\t\tsetNewItemCost(value);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tconst onCreateNewItem = () => {\r\n\t\tconst item: SelectableItem = { Name: newItemName, selected: true };\r\n\t\tif (includeAvailability) {\r\n\t\t\titem.Availability = newItemAvailability;\r\n\t\t}\r\n\t\tif (includeCost) {\r\n\t\t\titem.Cost = newItemCost;\r\n\t\t}\r\n\t\tonItemSelectionChange(item);\r\n\t\t// clear the new item fields after adding a new item (don't want fat-finger duplicates)\r\n\t\tsetNewItemName(\"\");\r\n\t\tsetNewItemAvailability(\"\");\r\n\t\tsetNewItemCost(\"\");\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Dialog open={open} onClose={onClose}>\r\n\t\t\t<DialogTitle>{title}</DialogTitle>\r\n\t\t\t<DialogContent className={classes.content}>\r\n\t\t\t\t<List>\r\n\t\t\t\t\t<ListItem key=\"header\" className={classes.header}>\r\n\t\t\t\t\t\t<Typography className={classes.name}>Name</Typography>\r\n\t\t\t\t\t\t{ includeAvailability ? <Typography className={classes.availability}>i.availability</Typography> : null }\r\n\t\t\t\t\t\t{ includeCost ? <Typography className={classes.cost}>Cost</Typography> : null }\r\n\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tallowNewItems ?\r\n\t\t\t\t\t\t<ListItem key=\"new-item\">\r\n\t\t\t\t\t\t\t<TextField id=\"new-item-name\" label=\"Custom\" value={newItemName} onChange={onUpdateNewItem} className={classes.name} variant=\"outlined\" />\r\n\t\t\t\t\t\t\t{ includeAvailability ? <TextField id=\"new-item-availability\" label=\"Availability\" value={newItemAvailability} onChange={onUpdateNewItem} className={classes.availability} variant=\"outlined\" /> : null }\r\n\t\t\t\t\t\t\t{ includeCost ? <TextField id=\"new-item-cost\" label=\"Cost\" value={newItemCost} onChange={onUpdateNewItem} className={classes.cost} variant=\"outlined\" /> : null }\r\n\t\t\t\t\t\t\t<IconButton aria-label=\"create\" onClick={onCreateNewItem} color=\"secondary\" size=\"small\">\r\n\t\t\t\t\t\t\t\t<AddIcon />\r\n\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\tnull\r\n\t\t\t\t\t}\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\titems.map(item => (\r\n\t\t\t\t\t\t\t<ListItem key={item.Name}>\r\n\t\t\t\t\t\t\t\t<ListItemText className={classes.name}>{item.Name}</ListItemText>\r\n\t\t\t\t\t\t\t\t{ includeAvailability ? <ListItemText className={classes.availability}>{item.Availability}</ListItemText> : null }\r\n\t\t\t\t\t\t\t\t{ includeCost ? <ListItemText className={classes.cost}>{item.Cost}</ListItemText> : null }\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tallowMultiSelection ?\r\n\t\t\t\t\t\t\t\t\t<Fragment>\r\n\t\t\t\t\t\t\t\t\t\t<IconButton aria-label=\"add\" onClick={() => onItemSelectionChange({ ...item, selected: true })} color=\"secondary\" size=\"small\">\r\n\t\t\t\t\t\t\t\t\t\t\t<AddIcon />\r\n\t\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t\t\t<IconButton aria-label=\"remove\" onClick={() => onItemSelectionChange({ ...item, selected: false })} disabled={!item.selected} color=\"secondary\" size=\"small\">\r\n\t\t\t\t\t\t\t\t\t\t\t<RemoveIcon />\r\n\t\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t\t</Fragment>\r\n\t\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t\t<IconButton aria-label={item.selected ? \"remove\" : \"add\"} onClick={() => onItemSelectionChange({ ...item, selected: !item.selected })} color=\"secondary\" size=\"small\">\r\n\t\t\t\t\t\t\t\t\t\t{ item.selected ? <RemoveIcon /> : <AddIcon /> }\r\n\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t\t))\r\n\t\t\t\t\t}\r\n\t\t\t\t</List>\r\n\t\t\t</DialogContent>\r\n\t\t</Dialog>\r\n\t);\r\n};\r\n\r\nexport default PickerDialog;","import React, { FC, Fragment, useState } from \"react\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PickerDialog, { SelectableItem } from \"./PickerDialog\";\r\n\r\nconst NAME_INDEX = 0;\r\nconst COST = \"Cost\";\r\nconst AVAILABILITY = \"Availability\";\r\n\r\nconst findName = (value: any): string => {\r\n\tconst nameProp = Object.keys(value)[NAME_INDEX];\r\n\tconst name = value[nameProp];\r\n\tif (name === undefined) {\r\n\t\tthrow new Error(`Could not find a name for value '${JSON.stringify(value)}'`);\r\n\t}\r\n\treturn name as string;\r\n};\r\n\r\nconst findCost = (value: any): string => {\r\n\tconst cost = value[COST];\r\n\tif (cost === undefined) {\r\n\t\t// throw new Error(`Could not find a cost for value '${JSON.stringify(value)}'`);\r\n\t\treturn \"0\";\r\n\t}\r\n\treturn cost;\r\n};\r\n\r\nconst findAvailability = (value: any): string => {\r\n\tconst availability = value[AVAILABILITY];\r\n\tif (availability === undefined) {\r\n\t\t// throw new Error(`Could not find an availability for value '${JSON.stringify(value)}'`);\r\n\t\treturn \"-\";\r\n\t}\r\n\treturn availability;\r\n};\r\n\r\nconst createSelectableItem = (value: any, selectedValueNames: string[], includeAvailability: boolean, includeCost: boolean): SelectableItem => {\r\n\tconst Name = findName(value);\r\n\tconst Availability = includeAvailability ? findAvailability(value) : undefined;\r\n\tconst Cost = includeCost ? findCost(value) : undefined;\r\n\tconst selected = selectedValueNames.find(n => n === Name) !== undefined;\r\n\treturn { Name, Cost, Availability, selected\t};\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n    editButton: {\r\n        paddingLeft: 10,\r\n    },\r\n});\r\n\r\ntype Props = {\r\n\tbreadcrums: string[];\r\n\tvalues: any[];\r\n\tselectedValueNames: string[];\r\n\taddValue: (name: string) => void;\r\n\tremoveValue: (name: string) => void;\r\n\tincludeAvailability?: boolean;\r\n\tincludeCost?: boolean;\r\n\tallowNewValues?: boolean;\r\n\tcreateValue?: (value: any) => void;\r\n\tallowMultiSelection?: boolean;\r\n};\r\nconst PickerButton: FC<Props> = (props: Props) => {\r\n\tconst { breadcrums, values, selectedValueNames, addValue, removeValue, includeAvailability=false, includeCost=false, allowNewValues: allowNewItems=false, createValue, allowMultiSelection=false } = props;\r\n\t\r\n\tconst classes = useStyles();\r\n\r\n\tconst [open, setOpen] = useState(false);\r\n\tconst onOpen = () => setOpen(true);\r\n\tconst onClose = () => setOpen(false);\r\n\r\n\tconst title = breadcrums.join(\" - \");\r\n\r\n\tconst items = values.map(v => createSelectableItem(v, selectedValueNames, includeAvailability, includeCost));\r\n\r\n\tconst onItemSelectionChange = (item: SelectableItem) => {\r\n\t\tconst { Name, Availability, Cost, selected } = item;\r\n\t\tif (selected) {\r\n\t\t\taddValue(Name);\r\n\t\t\tif (values.find(v => findName(v) === Name) === undefined) {\r\n\t\t\t\t// new item\r\n\t\t\t\tconst value = { Name, Availability, Cost };\r\n\t\t\t\tif (!createValue) {\r\n\t\t\t\t\tthrow new Error(`Attempting to create new item '${JSON.stringify(value)}' with no createValue prop`);\r\n\t\t\t\t}\r\n\t\t\t\tcreateValue(value);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tremoveValue(Name);\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<IconButton aria-label=\"add\" onClick={onOpen} color=\"secondary\" size=\"medium\" className={classes.editButton} disableRipple>\r\n\t\t\t\t<EditIcon />\r\n\t\t\t</IconButton>\r\n\t\t\t<PickerDialog\r\n\t\t\t\topen={open}\r\n\t\t\t\tonClose={onClose}\r\n\t\t\t\ttitle={title}\r\n\t\t\t\titems={items}\r\n\t\t\t\tonItemSelectionChange={onItemSelectionChange}\r\n\t\t\t\tincludeAvailability={includeAvailability}\r\n\t\t\t\tincludeCost={includeCost}\r\n\t\t\t\tallowNewItems={allowNewItems}\r\n\t\t\t\tallowMultiSelection={allowMultiSelection}\r\n\t\t\t/>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default PickerButton;","import { Dictionary } from \"./dictionary\";\r\n\r\nexport type CustomItem = {\r\n    Name: string;\r\n    Availability?: string;\r\n    Cost?: string;\r\n};\r\n\r\nexport function getChildItems(customItems: Dictionary<CustomItem>, parentPath: string): CustomItem[] {\r\n\tconst items: CustomItem[] = [];\r\n\tfor (const path in customItems) {\r\n\t\tif (path.startsWith(parentPath)) {\r\n\t\t\titems.push(customItems[path]);\r\n\t\t}\r\n\t}\r\n\treturn items;\r\n}","import React, { FC, Fragment } from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { useGlobalState, useDispatch } from \"../context\";\r\nimport PickerButton from \"./PickerButton\";\r\nimport { CustomItem, getChildItems } from \"../model/custom-item\";\r\nimport { AddCustomItemData, ActionType } from \"../reducer\";\r\n\r\nconst useStyles = makeStyles({\r\n\theader: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"row\",\r\n\t},\r\n\theaderLabel: {\r\n\t\tlineHeight: 3,\r\n\t\tmarginLeft: 16\r\n\t},\r\n});\r\n\r\ntype Props = {\r\n\tfontWeight: number;\r\n\tbreadcrums: string[];\r\n\tnames: string[];\r\n\tallValues: CustomItem[];\r\n\tonNamesUpdated: (updatedValues: string[]) => void;\r\n};\r\nconst PropertyLeafNode: FC<Props> = (props: Props) => {\r\n\tconst { fontWeight, breadcrums, names, allValues, onNamesUpdated } = props;\r\n\r\n\tconst classes = useStyles();\r\n\tconst dispatch = useDispatch();\r\n\r\n\tnames.sort();\r\n\r\n\tconst customItems = useGlobalState(\"customItems\");\r\n\r\n\tconst parentPath = breadcrums.join(\".\");\r\n    allValues.push(...getChildItems(customItems, parentPath));\r\n    allValues.sort((a, b) => {\r\n\t\tif (a.Name === undefined || b.Name === undefined) {\r\n\t\t\tthrow new Error(`Value missing 'Name' property under '${parentPath}': ${JSON.stringify(allValues)}`);\r\n\t\t}\r\n\t\treturn a.Name.localeCompare(b.Name)\r\n\t});\r\n\r\n\tconst header = breadcrums[breadcrums.length - 1];\r\n\r\n\tconst getCost = (name: string): number => {\r\n\t\tconst value = allValues.find(v => v.Name === name);\r\n\t\tif (!value) {\r\n\t\t\tthrow new Error(`Could not find value with name '${name}'`);\r\n\t\t}\r\n\t\treturn parseInt(value.Cost!);\r\n\t};\r\n\r\n\tconst addValue = (name: string) => {\r\n\t\tconst newValues = [...names, name];\r\n\t\tonNamesUpdated(newValues);\r\n\t};\r\n\r\n\tconst removeValue = (name: string) => {\r\n\t\tconst newValues = [...names];\r\n\t\tconst index = newValues.findIndex(v => v === name);\r\n\t\tif (index < 0) {\r\n\t\t\tthrow new Error(`Could not find value with name '${name}'`);\r\n\t\t}\r\n\t\tnewValues.splice(index, 1);\r\n\t\tonNamesUpdated(newValues);\r\n\t};\r\n\r\n\tconst createNewValue = (item: CustomItem) => {\r\n\t\tconst path = `${parentPath}.${item.Name}`;\r\n        const data: AddCustomItemData = { path, item: item };\r\n        dispatch({ type: ActionType.AddCustomItem, data });\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<div className={classes.header}>\r\n\t\t\t\t<PickerButton\r\n\t\t\t\t\tbreadcrums={breadcrums}\r\n\t\t\t\t\tvalues={allValues}\r\n\t\t\t\t\tselectedValueNames={names}\r\n\t\t\t\t\taddValue={addValue}\r\n\t\t\t\t\tremoveValue={removeValue}\r\n\t\t\t\t\tallowNewValues\r\n\t\t\t\t\tcreateValue={createNewValue}\r\n\t\t\t\t\tincludeCost\r\n\t\t\t\t/>\r\n\t\t\t\t<Typography className={classes.headerLabel} style={{fontWeight}}>{header}</Typography>\r\n\t\t\t</div>\r\n\t\t\t<List>\r\n\t\t\t\t{\r\n\t\t\t\t\tnames.map(n => (\r\n\t\t\t\t\t\t<ListItem key={n}>\r\n\t\t\t\t\t\t\t<ListItemText>{n} ({getCost(n)})</ListItemText>\r\n\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t))\r\n\t\t\t\t}\r\n\t\t\t</List>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default PropertyLeafNode;","import React, { FC, Fragment } from \"react\";\r\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\r\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\r\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { isArray } from \"util\";\r\nimport { sentenceCase } from \"change-case\";\r\nimport { CustomItem } from \"../model/custom-item\";\r\nimport PropertyLeafNode from \"./PropertyLeafNode\";\r\n\r\nconst fontWeights = [700, 600, 500, 400, 300, 200, 100];\r\n\r\ntype Props = {\r\n\trootCost?: number;\r\n\tparentPath: string;\r\n\tname: string;\r\n\tvalue: any;\r\n\tall: any;\r\n\tonValueUpdated: (updatedValue: any) => void;\r\n};\r\nconst PropertyNode: FC<Props> = (props: Props) => {\r\n\tconst { rootCost = -1, parentPath, name, value, all, onValueUpdated } = props;\r\n\t\r\n\tconst label = sentenceCase(name);\r\n\tconst fontWeight = fontWeights[parentPath.split(\".\").length - 1];\r\n\r\n\tif (isArray(value)) {\r\n\t\t// leaf-node\r\n\t\tconst breadcrums = getBreadcrums(parentPath, name);\r\n\t\tconst names = value as string[];\r\n\t\tconst allValues = all as CustomItem[];\r\n\t\tconst onNamesUpdated = (updatedNames: string[]) => {\r\n\t\t\tonValueUpdated(updatedNames);\r\n\t\t};\r\n\r\n\t\treturn (\r\n\t\t\t<PropertyLeafNode\r\n\t\t\t\tfontWeight={fontWeight-100}\r\n\t\t\t\tbreadcrums={breadcrums}\r\n\t\t\t\tnames={names}\r\n\t\t\t\tallValues={allValues}\r\n\t\t\t\tonNamesUpdated={onNamesUpdated}\r\n\t\t\t/>\r\n\t\t)\r\n\t} else {\r\n\t\tconst isRoot = parentPath.split(\".\").length === 1;\r\n\t\t// branch-node\r\n\t\tconst children: JSX.Element[] = [];\r\n\t\tfor (const childName of Object.keys(all)) {\r\n\t\t\tconst childAll = all[childName];\r\n\t\t\tconst childPath = `${parentPath}.${childName}`;\r\n\t\t\t// set the empty value early rather than passing down undefined\r\n\t\t\tconst defaultValue = isArray(childAll) ? [] : {};\r\n\t\t\t// looping through all's properties, may not exist in value\r\n\t\t\tconst childValue = value[childName] || defaultValue;\r\n\t\t\t\r\n\t\t\tconst onChildValueUpdated = (updatedChildValue: any) => {\r\n\t\t\t\tconst updatedValue = { ...value };\r\n\t\t\t\tupdatedValue[childName] = updatedChildValue;\r\n\t\t\t\tonValueUpdated(updatedValue);\r\n\t\t\t};\r\n\t\t\tchildren.push(\r\n\t\t\t\t<PropertyNode\r\n\t\t\t\t\tkey={childName}\r\n\t\t\t\t\tparentPath={childPath}\r\n\t\t\t\t\tname={childName}\r\n\t\t\t\t\tvalue={childValue}\r\n\t\t\t\t\tall={childAll}\r\n\t\t\t\t\tonValueUpdated={onChildValueUpdated}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<Fragment>\r\n\t\t\t\t<ExpansionPanel defaultExpanded={true}>\r\n\t\t\t\t\t<ExpansionPanelSummary expandIcon={<ExpandMoreIcon />} >\r\n\t\t\t\t\t\t<Typography style={{fontWeight}}>{label}{ isRoot ? (` (${rootCost})`) : null}</Typography>\r\n\t\t\t\t\t</ExpansionPanelSummary>\r\n\t\t\t\t\t<ExpansionPanelDetails>\r\n\t\t\t\t\t\t<div>{ children }</div>\r\n\t\t\t\t\t</ExpansionPanelDetails>\r\n\t\t\t\t</ExpansionPanel>\r\n\t\t\t</Fragment>\r\n\t\t)\r\n\t}\r\n};\r\n\r\nexport default PropertyNode;\r\n\r\nfunction getBreadcrums(parentPath: string, name: string): string[] {\r\n\tconst breadcrums: string[] = [];\r\n\t// parentPath uses camelCase (because its JSON)\r\n\t// breadcrums use sentenceCase (because its to be shown to users)\r\n\tfor (const name of parentPath.split(\".\")) {\r\n\t\tbreadcrums.push(sentenceCase(name));\r\n\t}\r\n\tbreadcrums.push(sentenceCase(name));\r\n\treturn breadcrums;\r\n}","import React, { FC, Fragment } from \"react\";\r\nimport PropertyNode from \"./PropertyNode\";\r\n\r\ntype Props = {\r\n\trootCost: number;\r\n\trootName: string;\r\n\trootValue: any;\r\n\trootAll: any;\r\n\tonRootUpdated: (updatedRootValue: any) => void;\r\n};\r\nconst PropertyTree: FC<Props> = (props: Props) => {\r\n\tconst { rootCost, rootName, rootValue, rootAll, onRootUpdated } = props;\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<PropertyNode\r\n\t\t\t\trootCost={rootCost}\r\n\t\t\t\tparentPath={rootName}\r\n\t\t\t\tname={rootName}\r\n\t\t\t\tvalue={rootValue}\r\n\t\t\t\tall={rootAll}\r\n\t\t\t\tonValueUpdated={onRootUpdated}\r\n\t\t\t/>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default PropertyTree;","import React, { FC, Fragment } from \"react\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport { Character as CharacterData, MetaType } from \"../model/character\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\nimport { ALL_META_TYPES } from \"../data/meta-types\";\r\nimport { getMetaTypeCost } from \"../model/meta-type\";\r\nimport PropertyTree from \"./PropertyTree\";\r\nimport { getAllQualitiesCost } from \"../model/quality\";\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    header: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        marginLeft: 5,\r\n        marginRight: 5,\r\n        marginBottom: 10,\r\n    },\r\n    field: {\r\n        marginRight: 10,\r\n        marginTop: 20,\r\n    },\r\n    divider: {\r\n        margin: 5,\r\n    }\r\n});\r\n\r\nconst CharacterTab: FC = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const character = useGlobalState(\"selectedCharacter\");\r\n    const allQualities = useGlobalState(\"allQualities\");\r\n    const { name, streetName, metaType, qualities } = character;\r\n\r\n    const cost = getAllQualitiesCost(qualities, allQualities);\r\n\r\n    const onCharacterUpdated = (updatedCharacter: CharacterData) => {\r\n        const data: UpdateCharacterData = updatedCharacter;\r\n        dispatch({ type: ActionType.UpdateCharacter, data });\r\n    };\r\n\r\n    const onQualitiesUpdated = (updatedQualities: { positive: string[], negative: string[] }) => {\r\n        const data: UpdateCharacterData = { ...character, qualities: updatedQualities };\r\n\t\tdispatch({ type: ActionType.UpdateCharacter, data });\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className={classes.header}>\r\n                <TextField id-=\"name\" label=\"Name\" value={name} onChange={e => onCharacterUpdated({ ...character, name: e.target.value})} className={classes.field} variant=\"outlined\" />\r\n                <TextField id-=\"street-name\" label=\"Street Name\" value={streetName} onChange={e => onCharacterUpdated({ ...character, streetName: e.target.value})} className={classes.field} variant=\"outlined\" />\r\n                <Select id=\"meta-type\" value={metaType} displayEmpty onChange={e => onCharacterUpdated({ ...character, metaType: e.target.value as MetaType})} className={classes.field} variant=\"outlined\">\r\n                    {ALL_META_TYPES.map(t => <MenuItem key={t} value={t}>{t} ({getMetaTypeCost(t)})</MenuItem>)}\r\n                </Select>\r\n            </div>\r\n            <PropertyTree\r\n                rootCost={cost}\r\n                rootName=\"qualities\"\r\n                rootValue={qualities}\r\n                rootAll={allQualities}\r\n                onRootUpdated={onQualitiesUpdated}\r\n            />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default CharacterTab;","import React, { FC } from \"react\";\r\n\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { NamedProperty } from \"../model/character\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: \"flex\",\r\n        height: 50,\r\n        marginTop: 20,\r\n    },\r\n    name: {\r\n        width: 200\r\n    },\r\n    slider: {\r\n        width: 300,\r\n        marginRight: 10,\r\n    },\r\n});\r\n\r\ntype Props = {\r\n    property: NamedProperty;\r\n    onUpdate: (property: NamedProperty) => void;\r\n    min: number;\r\n    max: number;\r\n    step: number;\r\n    formatDisplayValue: (rating: number) => string;\r\n    computeCost: (rating: number) => number;\r\n};\r\n\r\nconst Property: FC<Props> = (props: Props) => {\r\n    const { property, onUpdate, min, max, step, formatDisplayValue, computeCost } = props;\r\n    const { name, rating } = property;\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleChange = (e: React.ChangeEvent<any>, rating: number | number[]) => {\r\n        if (Array.isArray(rating)) {\r\n            throw new Error(`Property element '${e.target.id}' has an array of values instead of a single value: [${rating.join(\", \")}]`);\r\n        }\r\n        onUpdate({\r\n            name,\r\n            rating: rating\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Typography gutterBottom className={classes.name}>{name}</Typography>\r\n            <div className={classes.slider}>\r\n                <Slider\r\n                    step={step}\r\n                    min={min}\r\n                    max={max}\r\n                    value={rating}\r\n                    marks\r\n                    valueLabelDisplay=\"on\"\r\n                    onChange={handleChange}\r\n                    valueLabelFormat={(value: number, _index: number) => formatDisplayValue(value)}\r\n                />\r\n            </div>\r\n            <Typography gutterBottom>({computeCost(rating)})</Typography>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Property;","import React, { FC } from \"react\";\r\n\r\nimport { Skill as SkillData } from \"../model/character\";\r\nimport Property from \"./Property\";\r\n\r\ntype Props = {\r\n    skill: SkillData;\r\n\tonUpdate: (skill: SkillData) => void;\r\n\tcomputeCost: (rating: number) => number;\r\n};\r\n\r\nconst Skill: FC<Props> = (props: Props) => {\r\n    const { skill, onUpdate, computeCost } = props;\r\n\r\n    return (\r\n        <Property\r\n            property={skill}\r\n            onUpdate={onUpdate}\r\n            min={1}\r\n            max={5}\r\n            step={2}\r\n            formatDisplayValue={value => value.toString()}\r\n            computeCost={computeCost}\r\n            />\r\n    );\r\n}\r\n\r\nexport default Skill;","import React, { FC, Fragment } from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\r\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\r\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { Skill as SkillData } from \"../model/character\";\r\nimport { CustomItem, getChildItems } from \"../model/custom-item\";\r\nimport { AddCustomItemData, ActionType } from \"../reducer\";\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport PickerButton from \"./PickerButton\";\r\nimport Skill from \"./Skill\";\r\n\r\nconst useStyles = makeStyles({\r\n    header: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        marginBottom: 20,\r\n        paddingLeft: 16,\r\n        paddingTop: 12,\r\n    },\r\n    headerLabel: {\r\n        lineHeight: 3,\r\n        fontWeight: 700,\r\n    },\r\n});\r\n\r\ntype Props = {\r\n    breadcrums: string[];\r\n\tskills: SkillData[];\r\n\tallSkills: CustomItem[];\r\n    headerLabel: string;\r\n    computeSkillCost: (rating: number) => number;\r\n\tonSkillsUpdated: (updatedSkills: SkillData[]) => void;\r\n};\r\nconst SkillList: FC<Props> = (props: Props) => {\r\n\tconst { breadcrums, skills, allSkills, headerLabel, computeSkillCost, onSkillsUpdated } = props;\r\n\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const customItems = useGlobalState(\"customItems\");\r\n\r\n    skills.sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n    const parentPath = breadcrums.join(\".\");\r\n    allSkills.push(...getChildItems(customItems, parentPath));\r\n    allSkills.sort((a, b) => a.Name.localeCompare(b.Name));\r\n\r\n    const onSkillUpdate = (skill: SkillData) => {\r\n        const newSkills = [ ...skills ];\r\n        const skillIndex = skills.findIndex(s => s.name === skill.name);\r\n        if (skillIndex > -1) {\r\n            if (skill.rating > 0) {\r\n                newSkills[skillIndex] = skill;\r\n            } else {\r\n                newSkills.splice(skillIndex, 1);\r\n            }\r\n        } else if (skill.rating > 0) {\r\n            newSkills.push(skill);\r\n        }\r\n        onSkillsUpdated(newSkills);\r\n    };\r\n    \r\n    const addSkill = (name: string) => {\r\n        onSkillUpdate({ name, rating: 1 });\r\n    };\r\n\r\n    const removeSkill = (name: string) => {\r\n        onSkillUpdate({ name, rating: -1 });\r\n    };\r\n\r\n    const createNewSkill = (item: CustomItem) => {\r\n        const path = `${parentPath}.${item.Name}`;\r\n        const data: AddCustomItemData = { path, item: item };\r\n        dispatch({ type: ActionType.AddCustomItem, data });\r\n    };\r\n\r\n\treturn (\r\n        <Fragment>\r\n            <ExpansionPanel defaultExpanded={true}>\r\n                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\r\n                    <FormControlLabel\r\n                        onClick={(event) => event.stopPropagation()}\r\n                        onFocus={(event) => event.stopPropagation()}\r\n                        control={<PickerButton\r\n                            breadcrums={breadcrums}\r\n                            values={allSkills}\r\n                            selectedValueNames={skills.map(s => s.name)}\r\n                            addValue={addSkill}\r\n                            removeValue={removeSkill}\r\n                            allowNewValues\r\n                            createValue={createNewSkill}\r\n                        />}\r\n                        label=\"\"\r\n                    />\r\n                    <Typography className={classes.headerLabel}>{headerLabel}</Typography>\r\n                </ExpansionPanelSummary>\r\n                <ExpansionPanelDetails>\r\n                    <List>\r\n                    {\r\n                        skills.map(s => (\r\n                            <ListItem key={s.name}>\r\n                                <Skill skill={s} onUpdate={onSkillUpdate} computeCost={computeSkillCost} />\r\n                            </ListItem>\r\n                        ))\r\n                    }\r\n                    </List>\r\n                </ExpansionPanelDetails>\r\n            </ExpansionPanel>\r\n        </Fragment>\r\n\t);\r\n};\r\n\r\nexport default SkillList;","import React, { FC } from \"react\";\r\nimport { useDispatch, useGlobalState } from \"../context\"\r\nimport { Skill as SkillData } from \"../model/character\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\nimport { getActiveSkillsCost, getActiveSkillCost } from \"../model/skills\";\r\nimport SkillList from \"./SkillList\";\r\n\r\nconst breadcrums = [\"Skills\", \"Active\"];\r\n\r\nconst ActiveSkillList: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const character = useGlobalState(\"selectedCharacter\");\r\n    const allSkills = useGlobalState(\"allSkills\");\r\n\r\n    const { activeSkills } = character;\r\n\r\n    const activeSkillsCost = getActiveSkillsCost(activeSkills);\r\n    const headerLabel = `Active Skills (${activeSkillsCost})`;\r\n\r\n    const allActiveSkills = [...allSkills.active];\r\n\r\n    const onSkillsUpdated = (activeSkills: SkillData[]) => {\r\n        const data: UpdateCharacterData = { ...character, activeSkills };\r\n        dispatch({ type: ActionType.UpdateCharacter, data });\r\n    }\r\n    return (\r\n        <SkillList\r\n            breadcrums={breadcrums}\r\n            skills={activeSkills}\r\n            allSkills={allActiveSkills}\r\n            headerLabel={headerLabel}\r\n            computeSkillCost={getActiveSkillCost}\r\n            onSkillsUpdated={onSkillsUpdated}\r\n        />\r\n    );\r\n}\r\n\r\nexport default ActiveSkillList;","import React, { FC } from \"react\";\r\nimport { useDispatch, useGlobalState } from \"../context\"\r\nimport { Skill as SkillData } from \"../model/character\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\nimport { getKnowledgeSkillsCost, getFreeKnowledgeSkillPoints, getKnowledgeSkillCost } from \"../model/skills\";\r\nimport SkillList from \"./SkillList\";\r\n\r\nconst breadcrums = [\"Skills\", \"Knowledge\"];\r\n\r\nconst KnowledgeSkillList: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const character = useGlobalState(\"selectedCharacter\");\r\n\tconst allSkills = useGlobalState(\"allSkills\");\r\n\r\n\tconst { knowledgeSkills } = character;\r\n\r\n\tconst knowledgeSkillsCost = getKnowledgeSkillsCost(knowledgeSkills);\r\n    const freeKnowledgeSkillPoints = getFreeKnowledgeSkillPoints(character);\r\n    const totalCost = knowledgeSkillsCost - freeKnowledgeSkillPoints;\r\n    const headerLabel = `Knowledge Skills (${knowledgeSkillsCost} - ${freeKnowledgeSkillPoints} = ${totalCost})`;\r\n\r\n    const allKnowledgeSkills = [...allSkills.knowledge];\r\n\r\n    const onSkillsUpdated = (knowledgeSkills: SkillData[]) => {\r\n        const data: UpdateCharacterData = { ...character, knowledgeSkills };\r\n        dispatch({ type: ActionType.UpdateCharacter, data });\r\n    };\r\n\r\n    return (\r\n        <SkillList\r\n            breadcrums={breadcrums}\r\n            skills={knowledgeSkills}\r\n            allSkills={allKnowledgeSkills}\r\n            headerLabel={headerLabel}\r\n            computeSkillCost={getKnowledgeSkillCost}\r\n            onSkillsUpdated={onSkillsUpdated}\r\n        />\r\n    );\r\n}\r\n\r\nexport default KnowledgeSkillList;","import React, { FC } from \"react\";\r\nimport { useDispatch, useGlobalState } from \"../context\"\r\nimport { Skill as SkillData } from \"../model/character\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\nimport { getKnowledgeSkillsCost, getKnowledgeSkillCost } from \"../model/skills\";\r\nimport SkillList from \"./SkillList\";\r\n\r\nconst breadcrums = [\"Skills\", \"Language\"];\r\n\r\nconst LanguageSkillList: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const character = useGlobalState(\"selectedCharacter\");\r\n\tconst allSkills = useGlobalState(\"allSkills\");\r\n\r\n\tconst { languageSkills } = character;\r\n\r\n\tconst languageSkillsCost = getKnowledgeSkillsCost(languageSkills);\r\n    const headerLabel = `Language Skills (${languageSkillsCost}) + Native`;\r\n\r\n    const allLanguageSkills = [...allSkills.language];\r\n\r\n    const onSkillsUpdated = (languageSkills: SkillData[]) => {\r\n        const data: UpdateCharacterData = { ...character, languageSkills };\r\n        dispatch({ type: ActionType.UpdateCharacter, data });\r\n    };\r\n\r\n    return (\r\n        <SkillList\r\n            breadcrums={breadcrums}\r\n            skills={languageSkills}\r\n            allSkills={allLanguageSkills}\r\n            headerLabel={headerLabel}\r\n            computeSkillCost={getKnowledgeSkillCost}\r\n            onSkillsUpdated={onSkillsUpdated}\r\n        />\r\n    );\r\n}\r\n\r\nexport default LanguageSkillList;","import React, { FC, Fragment } from \"react\";\r\nimport ActiveSkillList from \"./ActiveSkillList\";\r\nimport KnowledgeSkillList from \"./KnowledgeSkillList\";\r\nimport LanguageSkillList from \"./LanguageSkillList\";\r\n\r\nconst SkillsTab: FC = () => {\r\n    return (\r\n        <Fragment>\r\n            <ActiveSkillList />\r\n            <KnowledgeSkillList />\r\n            <LanguageSkillList />\r\n        </Fragment>\r\n    )\r\n};\r\n\r\nexport default SkillsTab;","import React, { FC, Fragment } from \"react\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport ShoppingCartIcon from \"@material-ui/icons/ShoppingCart\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useGlobalState } from \"../context\";\r\n\r\nconst useStyles = makeStyles({\r\n    badge: {\r\n        marginLeft: 50,\r\n    },\r\n});\r\n\r\nconst Karma: FC = () => {\r\n    const classes = useStyles();\r\n    const karma = useGlobalState(\"karma\");\r\n    const { total, spent, available } = karma;\r\n    return (\r\n        <Fragment>\r\n            <Badge className={classes.badge} badgeContent={total} color=\"primary\" max={1000} showZero>\r\n                <ShoppingCartIcon />\r\n            </Badge>\r\n            <Badge className={classes.badge} badgeContent={spent} color=\"error\" max={1000} showZero>\r\n                <ShoppingCartIcon />\r\n            </Badge>\r\n            <Badge className={classes.badge} badgeContent={available} color=\"secondary\" max={1000} showZero>\r\n                <ShoppingCartIcon />\r\n            </Badge>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Karma;","import React, { FC } from \"react\";\r\n\r\nimport { Attribute as AttributeData, MetaType } from \"../model/character\";\r\nimport { getAttributeModifier, getAttributeCost } from \"../model/attributes\";\r\nimport Property from \"./Property\";\r\n\r\ntype Props = {\r\n    attribute: AttributeData;\r\n    metaType: MetaType;\r\n    onUpdate: (attribute: AttributeData) => void;\r\n};\r\n\r\nconst Attribute: FC<Props> = (props: Props) => {\r\n    const { attribute, metaType, onUpdate } = props;\r\n    const modifier = getAttributeModifier(metaType, attribute);\r\n\r\n    const formatDisplayValue = (rating: number): string => (rating + modifier).toString();\r\n\r\n    return (\r\n        <Property property={attribute} onUpdate={onUpdate} min={1} max={7} step={1} formatDisplayValue={formatDisplayValue} computeCost={getAttributeCost} />\r\n    );\r\n};\r\n\r\nexport default Attribute;","import React, { FC, Fragment } from \"react\";\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Attribute from \"./Attribute\";\r\nimport { Attribute as AttributeData, isAwakened } from \"../model/character\";\r\nimport { ActionType } from \"../reducer\";\r\nimport { getAttributesCost } from \"../model/attributes\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n    header: {\r\n        marginBottom: 20,\r\n        paddingLeft: 16,\r\n        paddingTop: 12,\r\n        fontWeight: 700,\r\n    }\r\n});\r\n\r\nconst AttributeList: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const character = useGlobalState(\"selectedCharacter\");\r\n    const classes = useStyles();\r\n\r\n    const { attributes, metaType } = character;\r\n\r\n    const filteredAttributes = attributes.filter(a => isAwakened(character) || a.name !== \"Magic\");\r\n\r\n    const attributesCost = getAttributesCost(character);\r\n\r\n    const onUpdate = (attribute: AttributeData) => {\r\n        const newAttributes = [ ...attributes ];\r\n        const attributeIndex = newAttributes.findIndex(a => a.name === attribute.name);\r\n        newAttributes[attributeIndex] = attribute;\r\n        dispatch({\r\n            type: ActionType.UpdateCharacter,\r\n            data: { ...character, attributes: newAttributes }\r\n        });\r\n    };\r\n    return (\r\n        <Fragment>\r\n            <Typography className={classes.header}>Attributes ({attributesCost})</Typography>\r\n            <List>\r\n                {\r\n                    filteredAttributes.map(a => (\r\n                        <ListItem key={a.name}>\r\n                            <Attribute attribute={a} metaType={metaType} onUpdate={onUpdate} />\r\n                        </ListItem>\r\n                    ))\r\n                }\r\n            </List>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default AttributeList;","import React, { FC } from \"react\";\r\nimport AttributeList from \"./AttributeList\";\r\n\r\nconst AttributesTab: FC = () => {\r\n\treturn (\r\n\t\t<AttributeList />\r\n\t);\r\n};\r\n\r\nexport default AttributesTab;","import { Character } from \"./character\";\r\n\r\nexport type Contact = {\r\n\tname: string;\r\n\tconnection: number;\r\n\tloyalty: number;\r\n};\r\n\r\nexport function getContactRatingCost(rating: number): number {\r\n\tswitch (rating) {\r\n\t\tcase 1:\r\n\t\t\treturn 2;\r\n\t\tcase 3:\r\n\t\t\treturn 7;\r\n\t\tcase 5:\r\n\t\t\treturn 15;\r\n\t\tdefault:\r\n\t\t\tthrow new Error();\r\n\t}\r\n}\r\n\r\nexport function getContactCost(contact: Contact): number {\r\n\tlet cost = 0;\r\n\tcost += getContactRatingCost(contact.connection);\r\n\tcost += getContactRatingCost(contact.loyalty);\r\n\treturn cost;\r\n}\r\n\r\nexport function getFreeContactPoints(character: Character): number {\r\n    const charisma = character.attributes.find(a => a.name === \"Charisma\");\r\n    if (charisma === undefined) {\r\n        throw new Error(`Character '${character.streetName}' has no attribute 'Charisma'`);\r\n    }\r\n    const willpower = character.attributes.find(a => a.name === \"Willpower\");\r\n    if (willpower === undefined) {\r\n        throw new Error(`Character '${character.streetName}' has no attribute 'Willpower'`);\r\n    }\r\n    return (charisma.rating + willpower.rating) * 10;\r\n}\r\n\r\nexport function getAllContactsCost(character: Character): number {\r\n\treturn character.contacts.map(c => getContactCost(c)).reduce((a, b) => a + b, 0);\r\n}","import React, { FC, Fragment } from \"react\";\r\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\r\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\r\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { Contact as ContactData, getContactCost, getContactRatingCost } from \"../model/contact\";\r\nimport Property from \"./Property\";\r\nimport { NamedProperty } from \"../model/character\";\r\n\r\nconst useStyles = makeStyles({\r\n\theaderLabel: {\r\n\t\tfontWeight: 700,\r\n\t},\r\n\tdetails: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"column\",\r\n\t},\r\n\trating: {\r\n\t\tmarginBottom: 20,\r\n\t}\r\n});\r\n\r\ntype Props = {\r\n\tcontact: ContactData;\r\n\tonUpdate: (contact: ContactData) => void;\r\n};\r\nconst Contact: FC<Props> = (props: Props) => {\r\n\tconst { contact, onUpdate } = props;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tconst contactCost = getContactCost(contact);\r\n\r\n\tconst connection: NamedProperty = { name: \"Connection\", rating: contact.connection };\r\n\tconst onUpdateConnection = (updatedConnection: NamedProperty) => {\r\n\t\tconst updatedContact = { ...contact, connection: updatedConnection.rating };\r\n\t\tonUpdate(updatedContact);\r\n\t};\r\n\tconst loyalty: NamedProperty = { name: \"Loyalty\", rating: contact.loyalty };\r\n\tconst onUpdateLoyalty = (updatedLoyalty: NamedProperty) => {\r\n\t\tconst updatedContact = { ...contact, loyalty: updatedLoyalty.rating };\r\n\t\tonUpdate(updatedContact);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<ExpansionPanel defaultExpanded={true}>\r\n\t\t\t\t<ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\r\n\t\t\t\t\t<Typography className={classes.headerLabel}>{contact.name} ({contactCost})</Typography>\r\n\t\t\t\t</ExpansionPanelSummary>\r\n\t\t\t\t<ExpansionPanelDetails>\r\n\t\t\t\t\t<div className={classes.details}>\r\n\t\t\t\t\t\t<div className={classes.rating}>\r\n\t\t\t\t\t\t\t<Property\r\n\t\t\t\t\t\t\t\tproperty={connection}\r\n\t\t\t\t\t\t\t\tonUpdate={onUpdateConnection}\r\n\t\t\t\t\t\t\t\tmin={1}\r\n\t\t\t\t\t\t\t\tmax={3}\r\n\t\t\t\t\t\t\t\tstep={2}\r\n\t\t\t\t\t\t\t\tformatDisplayValue={(value => value.toString())}\r\n\t\t\t\t\t\t\t\tcomputeCost={getContactRatingCost}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className={classes.rating}>\r\n\t\t\t\t\t\t\t<Property\r\n\t\t\t\t\t\t\t\tproperty={loyalty}\r\n\t\t\t\t\t\t\t\tonUpdate={onUpdateLoyalty}\r\n\t\t\t\t\t\t\t\tmin={1}\r\n\t\t\t\t\t\t\t\tmax={5}\r\n\t\t\t\t\t\t\t\tstep={2}\r\n\t\t\t\t\t\t\t\tformatDisplayValue={(value => value.toString())}\r\n\t\t\t\t\t\t\t\tcomputeCost={getContactRatingCost}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</ExpansionPanelDetails>\r\n\t\t\t</ExpansionPanel>\r\n\t\t</Fragment>\r\n\t);\r\n}\r\n\r\nexport default Contact;","import React, { FC, Fragment } from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport PickerButton from \"./PickerButton\";\r\nimport Contact from \"./Contact\";\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport { Contact as ContactData, getAllContactsCost, getFreeContactPoints } from \"../model/contact\";\r\nimport { UpdateCharacterData, ActionType, AddCustomItemData } from \"../reducer\";\r\nimport { getChildItems, CustomItem } from \"../model/custom-item\";\r\n\r\nconst useStyles = makeStyles({\r\n\theader: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"row\",\r\n\t},\r\n\theaderLabel: {\r\n\t\tlineHeight: 3,\r\n\t\tfontWeight: 700,\r\n\t},\r\n});\r\n\r\nconst breadcrums = [\"Contacts\"];\r\nconst parentPath = breadcrums.join(\".\");\r\n\r\nconst ContactList: FC = () => {\r\n\tconst classes = useStyles();\r\n\tconst dispatch = useDispatch();\r\n\tconst character = useGlobalState(\"selectedCharacter\");\r\n\tconst allContacts = useGlobalState(\"allContacts\");\r\n\tconst customItems = useGlobalState(\"customItems\");\r\n\tconst { contacts: selectedContacts } = character;\r\n\r\n\tselectedContacts.sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n\tconst contactsCost = getAllContactsCost(character);\r\n\tconst freeContactPoints = getFreeContactPoints(character);\r\n    const totalCost = contactsCost - freeContactPoints;\r\n\tconst headerLabel = `Contacts (${contactsCost} - ${freeContactPoints} = ${totalCost})`;\r\n\t\r\n\tallContacts.push(...getChildItems(customItems, parentPath));\r\n    allContacts.sort((a, b) => a.Name.localeCompare(b.Name));\r\n\r\n\tconst onContactUpdate = (contact: ContactData) => {\r\n\t\tconst newContacts = [...selectedContacts];\r\n\t\tconst contactIndex = selectedContacts.findIndex(s => s.name === contact.name);\r\n\t\tif (contactIndex > -1) {\r\n\t\t\tif (contact.connection > 0 && contact.loyalty > 0) {\r\n\t\t\t\tnewContacts[contactIndex] = contact;\r\n\t\t\t} else {\r\n\t\t\t\tnewContacts.splice(contactIndex, 1);\r\n\t\t\t}\r\n\t\t} else if (contact.connection > 0 && contact.loyalty > 0) {\r\n\t\t\tnewContacts.push(contact);\r\n\t\t}\r\n\t\tconst data: UpdateCharacterData = { ...character, contacts: newContacts };\r\n\t\tdispatch({ type: ActionType.UpdateCharacter, data });\r\n\t};\r\n\r\n\tconst addContact = (name: string) => {\r\n\t\tonContactUpdate({ name, connection: 1, loyalty: 1 });\r\n\t};\r\n\r\n\tconst removeContact = (name: string) => {\r\n\t\tonContactUpdate({ name, connection: -1, loyalty: -1 });\r\n\t};\r\n\r\n\tconst createNewContact = (item: CustomItem) => {\r\n        const path = `${parentPath}.${item.Name}`;\r\n        const data: AddCustomItemData = { path, item: item };\r\n        dispatch({ type: ActionType.AddCustomItem, data });\r\n    };\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<div className={classes.header}>\r\n\t\t\t\t<PickerButton\r\n\t\t\t\t\tbreadcrums={breadcrums}\r\n\t\t\t\t\tvalues={allContacts}\r\n\t\t\t\t\tselectedValueNames={selectedContacts.map(s => s.name)}\r\n\t\t\t\t\taddValue={addContact}\r\n\t\t\t\t\tremoveValue={removeContact}\r\n\t\t\t\t\tallowNewValues\r\n\t\t\t\t\tcreateValue={createNewContact}\r\n\t\t\t\t/>\r\n\t\t\t\t<Typography className={classes.headerLabel}>{headerLabel}</Typography>\r\n\t\t\t</div>\r\n\t\t\t<List>\r\n\t\t\t\t{\r\n\t\t\t\t\tselectedContacts.map(c => (\r\n\t\t\t\t\t\t<ListItem key={c.name}>\r\n\t\t\t\t\t\t\t<Contact contact={c} onUpdate={onContactUpdate} />\r\n\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t))\r\n\t\t\t\t}\r\n\t\t\t\t</List>\r\n\t\t</Fragment>\r\n\t);\r\n}\r\n\r\nexport default ContactList;","import React, { FC } from \"react\";\r\nimport ContactList from \"./ContactList\";\r\n\r\nconst ContactsTab: FC = () => {\r\n\treturn (\r\n\t\t<ContactList />\r\n\t);\r\n}\r\n\r\nexport default ContactsTab;","import { Character } from \"./character\";\r\n\r\nexport type Spells = {\r\n\tcombat: string[],\r\n\tdetection: string[],\r\n\thealth: string[],\r\n\tillusion: string[],\r\n\tmanipulation: string[],\r\n};\r\n\r\nexport function getSpellCost(): number {\r\n\treturn 5;\r\n}\r\n\r\nexport function getSpellsCost(spells: string[]): number {\r\n\treturn getSpellCost() * spells.length;\r\n}\r\n\r\nexport function getCharacterSpellsCost(character: Character): number {\r\n\tlet cost = 0;\r\n\tcost += getSpellsCost(character.spells.combat);\r\n\tcost += getSpellsCost(character.spells.detection);\r\n\tcost += getSpellsCost(character.spells.health);\r\n\tcost += getSpellsCost(character.spells.illusion);\r\n\tcost += getSpellsCost(character.spells.manipulation);\r\n\treturn cost;\r\n}\r\n\r\nexport type Magic = {\r\n\tspells: Spells;\r\n};","import React, { FC } from \"react\";\r\nimport PropertyTree from \"./PropertyTree\";\r\nimport { useGlobalState, useDispatch } from \"../context\";\r\nimport { Spells, getCharacterSpellsCost } from \"../model/magic\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\n\r\nconst MagicTab: FC = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst character = useGlobalState(\"selectedCharacter\");\r\n\tconst { spells } = character;\r\n\tconst allSpells = useGlobalState(\"allSpells\");\r\n\r\n\tconst cost = getCharacterSpellsCost(character);\r\n\r\n\tconst onSpellsUpdated = (updatedSpells: Spells) => {\r\n\t\tconst data: UpdateCharacterData = { ...character, spells: updatedSpells };\r\n\t\tdispatch({ type: ActionType.UpdateCharacter, data });\r\n\t};\r\n\treturn (\r\n\t\t<PropertyTree rootCost={cost} rootName=\"spells\" rootValue={spells} rootAll={allSpells} onRootUpdated={onSpellsUpdated} />\r\n\t);\r\n};\r\n\r\nexport default MagicTab;","import { sentenceCase } from \"change-case\";\r\n\r\nexport type Dictionary<T> = { [key: string]: T };\r\n\r\nexport function getNextParentPaths<T>(values: Dictionary<T>): Map<string,string> {\r\n\tconst parentPathToName = new Map<string,string>();\r\n\tconst paths = Object.keys(values).map(p => p.split(\".\"));\r\n\tlet differenceFound = false;\r\n\tlet componentIndex = 0;\r\n\twhile (!differenceFound) {\r\n\t\tif (componentIndex >= paths[0].length) {\r\n\t\t\tthrow new Error(`Searched through all path components and found no differences`);\r\n\t\t}\r\n\t\tfor (let pathIndex = 1; pathIndex < paths.length; pathIndex++) {\r\n\t\t\tif (paths[0][componentIndex] !== paths[pathIndex][componentIndex]) {\r\n\t\t\t\tdifferenceFound = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcomponentIndex++;\r\n\t}\r\n\tfor (const path of paths) {\r\n\t\tconst parentPath = path.slice(0, componentIndex).join(\".\");\r\n\t\tconst name = path[componentIndex - 1];\r\n\t\tparentPathToName.set(parentPath, sentenceCase(name));\r\n\t}\r\n\treturn parentPathToName;\r\n}\r\n\r\nexport function getChildNames<T>(values: Dictionary<T>, parentPath: string): string[] {\r\n\tconst childNames = new Set<string>();\r\n\tconst parents = parentPath.split(\".\");\r\n\tfor (const path of findChildPaths(values, parentPath)) {\r\n\t\tconst components = path.split(\".\");\r\n\t\tchildNames.add(components[parents.length]);\r\n\t}\r\n\treturn Array.from(childNames);\r\n}\r\n\r\nexport function getChildValues<T>(values: Dictionary<T[]>, parentPath: string): T[] {\r\n\tconst childValues: T[] = [];\r\n\tfor (const path of findChildPaths(values, parentPath)) {\r\n\t\tchildValues.push(...values[path]);\r\n\t}\r\n\treturn childValues;\r\n}\r\n\r\nexport function getChildSet<T>(values: Dictionary<T[]>, parentPath: string): Dictionary<T[]> {\r\n\tconst subset: Dictionary<T[]> = {};\r\n\tfor (const path of findChildPaths(values, parentPath)) {\r\n\t\tsubset[path] = values[path];\r\n\t}\r\n\treturn subset;\r\n}\r\n\r\nfunction findChildPaths<T>(values: Dictionary<T>, parentPath: string): string[] {\r\n\tconst childPaths: string[] = [];\r\n\tconst parents = parentPath.split(\".\");\r\n\tfor (const path of Object.keys(values)) {\r\n\t\tconst components = path.split(\".\");\r\n\t\tif (components.length < parents.length) {\r\n\t\t\tthrow new Error(`Child paths '${path}' must be longer than parent paths '${parentPath}'`);\r\n\t\t}\r\n\t\tlet match = true;\r\n\t\tfor (let i = 0; i < parents.length; i++) {\r\n\t\t\tif (parents[i] !== components[i]) {\r\n\t\t\t\tmatch = false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (match) {\r\n\t\t\tchildPaths.push(path);\r\n\t\t}\r\n\t}\r\n\treturn childPaths;\r\n}","import React, { FC } from \"react\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n\troot: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"row\",\r\n\t\tflexWrap: \"wrap\",\r\n\t\tjustifyContent: \"flex-start\"\r\n\t},\r\n\tchip: {\r\n\t\tmarginRight: 10,\r\n\t\tmarginBottom: 10,\r\n\t}\r\n});\r\n\r\ntype Props = {\r\n\tvalues: any[];\r\n\tcreateChipLabel: (value: any) => string;\r\n\tonDeleteValue: (value: any) => void;\r\n};\r\nconst ChipCollection: FC<Props> = (props: Props) => {\r\n\tconst { values, createChipLabel, onDeleteValue } = props;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\treturn (\r\n\t\t<div className={classes.root}>\r\n\t\t\t{\r\n\t\t\t\tvalues.map(v =>\r\n\t\t\t\t\t<Chip\r\n\t\t\t\t\t\tclassName={classes.chip}\r\n\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\tlabel={createChipLabel(v)}\r\n\t\t\t\t\t\tonDelete={() => onDeleteValue(v)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ChipCollection;","import { Dictionary } from \"./dictionary\";\r\n\r\nexport type Item = {\r\n\tpath: string;\r\n\tname: string;\r\n} & Dictionary<string>;\r\n\r\nexport function getItemSubset(items: Item[], parentPath: string): Item[] {\r\n\tconst subItems: Item[] = [];\r\n\tfor (const item of items) {\r\n\t\tif (item.path === parentPath || item.path.startsWith(`${parentPath}.`)) {\r\n\t\t\tsubItems.push(item);\r\n\t\t}\r\n\t}\r\n\treturn subItems;\r\n}","import React, { FC } from \"react\";\r\nimport { Item } from \"../model/item\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n\troot: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"row\",\r\n\t\tpadding: 10,\r\n\t\tmargin: 10,\r\n\t},\r\n\tname: {\r\n\t\twidth: 400,\r\n\t\ttextAlign: \"left\",\r\n\t},\r\n\tcost: {\r\n\t\twidth: 150,\r\n\t},\r\n});\r\n\r\ntype Props = {\r\n\titem: Item;\r\n\tonUpdateItem: (item: Item) => void;\r\n};\r\nconst ItemPickerCard: FC<Props> = (props: Props) => {\r\n\tconst { item, onUpdateItem } = props;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tconst count = parseInt(item.count);\r\n\r\n\tconst handleAdd = () => {\r\n\t\tonUpdateItem({ ...item, count: (count + 1).toString() });\r\n\t};\r\n\r\n\tconst handleRemove = () => {\r\n\t\tonUpdateItem({ ...item, count: Math.max(count - 1, 0).toString() });\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Paper\r\n\t\t\tclassName={classes.root}\r\n\t\t\televation={3}\r\n\t\t>\r\n\t\t\t<Typography className={classes.name} style={{lineHeight: \"36px\"}}>{item.name}</Typography>\r\n\t\t\t<span className={classes.cost}>\r\n\t\t\t\t<Badge badgeContent={count} color=\"secondary\">\r\n\t\t\t\t\t<Typography style={{lineHeight: \"36px\"}}>({item.cost})</Typography>\r\n\t\t\t\t</Badge>\r\n\t\t\t</span>\r\n\t\t\t<ButtonGroup>\r\n\t\t\t\t<Button onClick={handleAdd}>\r\n\t\t\t\t\t<AddIcon />\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Button onClick={handleRemove}>\r\n\t\t\t\t\t<RemoveIcon />\r\n\t\t\t\t</Button>\r\n\t\t\t</ButtonGroup>\r\n\t\t</Paper>\r\n\t);\r\n};\r\n\r\nexport default ItemPickerCard;","import React, { FC, Fragment } from \"react\";\r\nimport { Item } from \"../model/item\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport ItemPickerCard from \"./ItemPickerCard\";\r\n\r\nconst useStyles = makeStyles({\r\n\titems: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"column\",\r\n\t}\r\n});\r\n\r\ntype RowProps = {\r\n\tindex: number;\r\n\tstyle: any;\r\n};\r\n\r\ntype Props = {\r\n\tlabel: string;\r\n\titems: Item[];\r\n\tonUpdateItems: (newItems: Item[]) => void;\r\n};\r\nconst ItemPickerSection: FC<Props> = (props: Props) => {\r\n\tconst { items, onUpdateItems } = props;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tconst handleUpdate = (item: Item) => {\r\n\t\tconst newItems = [...items];\r\n\t\tconst index = items.findIndex(i => i.name === item.name);\r\n\t\tnewItems[index] = item;\r\n\t\tonUpdateItems(newItems);\r\n\t};\r\n\r\n\t// const Row = (props: RowProps) => {\r\n\t// \tconst { index } = props;\r\n\t// \tconst item = items[index];\r\n\t// \treturn <ItemPickerCard item={item} onUpdateItem={handleUpdate} />;\r\n\t// }\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<Divider />\r\n\t\t\t<div className={classes.items}>\r\n\t\t\t\t{\r\n\t\t\t\t\titems\r\n\t\t\t\t\t?\r\n\t\t\t\t\titems.map(i =>\r\n\t\t\t\t\t\t<ItemPickerCard\r\n\t\t\t\t\t\t\titem={i}\r\n\t\t\t\t\t\t\tonUpdateItem={handleUpdate}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)\r\n\t\t\t\t\t:\r\n\t\t\t\t\t<div>No items</div>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t\t{/* <List\r\n\t\t\t\theight={600}\r\n\t\t\t\titemCount={items.length}\r\n\t\t\t\titemSize={() => 56}\r\n\t\t\t\twidth={550}\r\n\t\t\t>\r\n\t\t\t\t{Row}\r\n\t\t\t</List> */}\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default ItemPickerSection;","import React, { FC, useState, ChangeEvent } from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport { Item } from \"../model/item\";\r\nimport { Dictionary } from \"../model/dictionary\";\r\nimport { sentenceCase } from \"change-case\";\r\nimport ItemPickerSection from \"./ItemPickerSection\";\r\n\r\n\r\ntype Props = {\r\n\topen: boolean;\r\n\tonClose: () => void;\r\n\ttitle: string;\r\n\tallItems: Dictionary<Item[]>;\r\n\tonUpdateAllItems: (newItems: Dictionary<Item[]>) => void;\r\n};\r\nconst ItemPickerDialog: FC<Props> = (props: Props) => {\r\n\tconst { open, onClose, title, allItems, onUpdateAllItems } = props;\r\n\r\n\tconst allPaths = Object.keys(allItems);\r\n\r\n\tconst paths = [...allPaths];\r\n\r\n\tconst pathToLabel = new Map<string,string>();\r\n\tfor (const path of paths) {\r\n\t\tconst components = path.split(\".\");\r\n\t\tconst finalComponent = components[components.length - 1];\r\n\t\tconst label = sentenceCase(finalComponent);\r\n\t\tpathToLabel.set(path, label);\r\n\t}\r\n\r\n\tconst [group, setGroup] = useState(paths[0]);\r\n\r\n\t// once the dialog is rendered the state is 'remembered' for next use which could be different data\r\n\tif (paths.find(p => p === group) === undefined) {\r\n\t\tsetGroup(paths[0]);\r\n\t}\r\n\r\n\tconst handleGroupChange = (event: ChangeEvent<any>) => {\r\n\t\tsetGroup(event.target.value);\r\n\t};\r\n\r\n\tconst handleUpdateItems = (subItems: Item[]) => {\r\n\t\tconst newAllItems: Dictionary<Item[]> = { ...allItems };\r\n\t\tnewAllItems[group] = subItems;\r\n\t\tonUpdateAllItems(newAllItems);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Dialog open={open} onClose={onClose}>\r\n\t\t\t<DialogTitle>{title}</DialogTitle>\r\n\t\t\t<DialogContent>\r\n\t\t\t\t{\r\n\t\t\t\t\tpaths.length > 1\r\n\t\t\t\t\t?\r\n\t\t\t\t\t<Select\r\n\t\t\t\t\t\tid=\"group\"\r\n\t\t\t\t\t\tvalue={group}\r\n\t\t\t\t\t\tdisplayEmpty\r\n\t\t\t\t\t\tonChange={handleGroupChange}\r\n\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpaths.map(p => (\r\n\t\t\t\t\t\t\t\t<MenuItem\r\n\t\t\t\t\t\t\t\t\tkey={p}\r\n\t\t\t\t\t\t\t\t\tvalue={p}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{pathToLabel.get(p)!}\r\n\t\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</Select>\r\n\t\t\t\t\t:\r\n\t\t\t\t\tnull\r\n\t\t\t\t}\r\n\t\t\t\t<ItemPickerSection\r\n\t\t\t\t\tlabel={pathToLabel.get(group)!}\r\n\t\t\t\t\titems={allItems[group]}\r\n\t\t\t\t\tonUpdateItems={handleUpdateItems}\r\n\t\t\t\t/>\r\n\t\t\t</DialogContent>\r\n\t\t</Dialog>\r\n\t);\r\n};\r\n\r\nexport default ItemPickerDialog;","import { Dictionary } from \"./dictionary\";\r\nimport { isArray } from \"util\";\r\nimport { Item } from \"./item\";\r\n\r\nexport type Gear = {\r\n\tavailability: string;\r\n\tcost: string;\r\n\tcostLabel: string;\r\n} & Item;\r\n\r\nexport const gearRoot = \"gear\";\r\n\r\nexport function transformAllGear(allData: any): Dictionary<Gear[]> {\r\n\tconst allGear: Dictionary<Gear[]> = {};\r\n\ttransformAllGearInner(gearRoot, allData, allGear);\r\n\treturn allGear;\r\n}\r\n\r\nfunction transformAllGearInner(parentPath: string, parentData: any, allGear: Dictionary<Gear[]>) {\r\n\tfor (const childName of Object.keys(parentData)) {\r\n\t\tconst childPath = `${parentPath}.${childName}`;\r\n\t\tconst childData = parentData[childName];\r\n\t\tif (isArray(childData)) {\r\n\t\t\tconst values = childData as any[];\r\n\t\t\tconst items: Gear[] = [];\r\n\t\t\tfor (const item of values.map(v => transformGearItem(parentPath, v))) {\r\n\t\t\t\t// gear with multiple versions need to be split into separate items\r\n\t\t\t\tif (/^([\\w-\\s]+)\\s+\\(([\\w-\\s]+(,\\s*)?)+\\)$/i.test(item.name)) {\r\n\t\t\t\t\titems.push(...splitGearItems(parentPath, item));\r\n\t\t\t\t} else {\r\n\t\t\t\t\titems.push(item);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor (const item of items) {\r\n\t\t\t\tfinalizeGearItem(item);\r\n\t\t\t}\r\n\t\t\tallGear[childPath] = items;\r\n\t\t} else {\r\n\t\t\ttransformAllGearInner(childPath, childData, allGear);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction transformGearItem(parentPath: string, data: any): Gear {\r\n\tconst item: Gear = {\r\n\t\tpath: parentPath,\r\n\t\tname: \"[NAME]\",\r\n\t\tavailability: \"[AVAILABILITY]\",\r\n\t\tcost: \"[COST]\",\r\n\t\tcostLabel: \"[COST]\"\r\n\t};\r\n\tfor (const propName of Object.keys(data)) {\r\n\t\tconst propValue = data[propName];\r\n\t\tif (propName === \"Name\") {\r\n\t\t\titem.name = propValue as string;\r\n\t\t} else if (propName === \"Availability\") {\r\n\t\t\titem.availability = propValue as string;\r\n\t\t} else if (propName === \"Cost\") {\r\n\t\t\titem.costLabel = propValue as string;\r\n\t\t} else {\r\n\t\t\t// assume a string (not that it actually matters)\r\n\t\t\titem[propName] = propValue as string;\r\n\t\t}\r\n\t}\r\n\treturn item;\r\n}\r\n\r\nfunction splitGearItems(parentPath: string, item: Gear): Gear[] {\r\n\tconst itemVersions: Gear[] = [];\r\n\t/*\r\n\t\"Some Thingy (1, 2, 3)\" => [\r\n\t\t\"Some Thingy (A, B, C)\"\r\n\t\t\"Some Thingy\",\r\n\t\t\"A, B, C\"\r\n\t]\r\n\t*/\r\n\tconst groupResult = /^([\\w-\\s]+)\\s+\\(((?:(?:[\\w-\\s]+)(?:,\\s*)?)+)\\)$/i.exec(item.name);\r\n\tif (groupResult === null) {\r\n\t\tthrow new Error(`Gear item's name '${item.name}' does not contain multiple ratings`);\r\n\t}\r\n\tconst namePrefix = groupResult[1];\r\n\tconst nameSuffixes = groupResult[2].split(\",\").map(r => r.trim());\r\n\tconst itemCount = nameSuffixes.length;\r\n\tfor (let i = 0; i < itemCount; i++) {\r\n\t\tconst itemVersion: Gear = {\r\n\t\t\tpath: parentPath,\r\n\t\t\tname: `${namePrefix} - ${nameSuffixes[i]}`,\r\n\t\t\tavailability: \"[AVAILABILITY]\",\r\n\t\t\tcost: \"[COST]\",\r\n\t\t\tcostLabel: \"[COST]\"\r\n\t\t};\r\n\t\tfor (const propName of Object.keys(item)) {\r\n\t\t\t// use lower-case names as this is the Gear object, not the raw object from the JSON file\r\n\t\t\tif (propName === \"name\") {\r\n\t\t\t\t// skip name - it is already set\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif (propName === \"cost\") {\r\n\t\t\t\t// skip cost - it is determined in the finalize step, after splitting\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// all other properties are strings\r\n\t\t\tconst propValue = item[propName] as string;\r\n\t\t\tconst splitValues = propValue.split(\",\").map(v => v.trim());\r\n\t\t\tif (splitValues.length === 1) {\r\n\t\t\t\t// same value for all versions\r\n\t\t\t\titemVersion[propName] = propValue;\r\n\t\t\t} else if (splitValues.length === itemCount) {\r\n\t\t\t\titemVersion[propName] = splitValues[i];\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error(`Properties should have a single value or the same amount as there are version names ${itemCount} - found ${splitValues.length}`);\r\n\t\t\t}\r\n\t\t}\r\n\t\titemVersions.push(itemVersion);\r\n\t}\r\n\treturn itemVersions;\r\n}\r\n\r\nfunction finalizeGearItem(item: Gear) {\r\n\t/*\r\n\t1000\r\n\t+500\r\n\tx2\r\n\t50 (per dose)\r\n\t*/\r\n\tconst costResult = /^(?:x|\\+)?(\\d+)\\s*(?:\\(([\\w\\s]+)\\))?$/i.exec(item.costLabel);\r\n\tif (costResult) {\r\n\t\titem.cost = costResult[1];\r\n\t\tif (isNaN(parseInt(item.cost))) {\r\n\t\t\tthrow new Error(`Gear item '${item.name}' has unsupported cost label '${item.costLabel}'`);\r\n\t\t}\r\n\t} else {\r\n\t\titem.cost = \"0\";\r\n\t}\r\n}\r\n\r\nconst itemCostMap = new Map<string,number>();\r\nexport function findItemCost(item: Item, allGear: Dictionary<Gear[]>): number {\r\n\tconst key = `${item.path}.${item.name}`;\r\n\tif (itemCostMap.has(key)) {\r\n\t\treturn itemCostMap.get(key)!;\r\n\t}\r\n\tconst subGear = allGear[item.path];\r\n\tconst gear = subGear.find(g => g.name === item.name);\r\n\tif (!gear) {\r\n\t\tthrow new Error(`Could not find gear with name '${item.name}' in list '${JSON.stringify(subGear)}' under path '${item.path}'`);\r\n\t}\r\n\r\n\tconst cost = parseInt(gear.cost);\r\n\titemCostMap.set(key, cost);\r\n\treturn cost;\r\n}\r\n\r\nexport function createSavedItem(path: string, item: Item): Item {\r\n\tconst { name, count, grade } = item;\r\n\tconst savedItem = { path, name, count, grade };\r\n\t// do not want to save optional properties\r\n\t// grade (used, alpha, beta, delta) only applies to augmentations\r\n\tif (grade !== undefined) {\r\n\t\tsavedItem.grade = grade;\r\n\t}\r\n\treturn savedItem;\r\n}","import React, { FC, Fragment, useState } from \"react\";\r\nimport { Dictionary, getNextParentPaths } from \"../model/dictionary\";\r\nimport { Item, getItemSubset } from \"../model/item\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport ItemPickerDialog from \"./ItemPickerDialog\";\r\nimport { Menu, MenuItem } from \"@material-ui/core\";\r\nimport { createSavedItem } from \"../model/gear\";\r\nimport { getChildSet } from \"../model/dictionary\";\r\nimport { sentenceCase } from \"change-case\";\r\n\r\ntype Props = {\r\n\ttitle: string;\r\n\titems: Item[];\r\n\tallItems: Dictionary<Item[]>;\r\n\tonUpdateItems: (newItems: Item[]) => void;\r\n};\r\nconst ItemPickerButton: FC<Props> = (props: Props) => {\r\n\tconst { title, items, allItems, onUpdateItems } = props;\r\n\r\n\tconst [open, setOpen] = useState(false);\r\n\tconst handleClose = () => setOpen(false);\r\n\r\n\tconst parentPathsToName = getNextParentPaths(allItems);\r\n\r\n\tconst parentPaths: string[] = [];\r\n\tfor (const parentPath of parentPathsToName.keys()) {\r\n\t\tparentPaths.push(parentPath);\r\n\t}\r\n\r\n\tconst [parentPath, setParentPath] = useState(parentPaths[0]);\r\n\r\n\tconst [menuAnchor, setMenuAnchor] = useState<HTMLButtonElement | null>(null);\r\n\r\n\tconst handleMenuClick = (parentPath: string) => {\r\n\t\tsetParentPath(parentPath);\r\n\t\tsetMenuAnchor(null);\r\n\t\tsetOpen(true);\r\n\t};\r\n\r\n\tconst allChildItems = getChildSet(allItems, parentPath);\r\n\r\n\tconst allCountedItems: Dictionary<Item[]> = {};\r\n\tfor (const path of Object.keys(allChildItems)) {\r\n\t\tconst localItems = [...allChildItems[path]];\r\n\t\tconst matchingItems = getItemSubset(items, parentPath);\r\n\t\tfor (const localItem of localItems) {\r\n\t\t\tconst matchingItem = matchingItems.find(i => i.name === localItem.name);\r\n\t\t\tif (matchingItem) {\r\n\t\t\t\tlocalItem.count = matchingItem.count;\r\n\t\t\t} else {\r\n\t\t\t\tlocalItem.count = \"0\";\r\n\t\t\t}\r\n\t\t}\r\n\t\tallCountedItems[path] = localItems;\r\n\t}\r\n\r\n\tconst handleUpdateAllItems = (newCountedItems: Dictionary<Item[]>) => {\r\n\t\tconst newItems: Item[] = [...items];\r\n\r\n\t\tfor (const path of Object.keys(newCountedItems)) {\r\n\t\t\tfor (const localItem of newCountedItems[path]) {\r\n\t\t\t\tconst includeItem = parseInt(localItem.count) > 0;\r\n\t\t\t\tconst index = newItems.findIndex(i => i.path === path && i.name === localItem.name);\r\n\t\t\t\tif (index > -1) {\r\n\t\t\t\t\tif (includeItem) {\r\n\t\t\t\t\t\tnewItems[index] = createSavedItem(path, localItem);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnewItems.splice(index, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (includeItem) {\r\n\t\t\t\t\tnewItems.push(createSavedItem(path, localItem));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tonUpdateItems(newItems);\r\n\t};\r\n\t\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<IconButton\r\n\t\t\t\tonClick={event => setMenuAnchor(event.currentTarget)}\r\n\t\t\t\tcolor=\"secondary\"\r\n\t\t\t\tsize=\"medium\"\r\n\t\t\t\tdisableRipple\r\n\t\t\t>\r\n\t\t\t\t<EditIcon />\r\n\t\t\t</IconButton>\r\n\t\t\t<Menu\r\n\t\t\t\tanchorEl={menuAnchor}\r\n\t\t\t\topen={Boolean(menuAnchor)}\r\n\t\t\t\tonClose={() => setMenuAnchor(null)}\r\n\t\t\t>\r\n\t\t\t\t{\r\n\t\t\t\t\tparentPaths.map(p => (\r\n\t\t\t\t\t\t<MenuItem key={p} onClick={() => {handleMenuClick(p)}}>\r\n\t\t\t\t\t\t\t{sentenceCase(parentPathsToName.get(p)!)}\r\n\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t))\r\n\t\t\t\t}\r\n\t\t\t</Menu>\r\n\t\t\t<ItemPickerDialog\r\n\t\t\t\topen={open}\r\n\t\t\t\tonClose={handleClose}\r\n\t\t\t\ttitle={`${title} - ${parentPathsToName.get(parentPath)!}`}\r\n\t\t\t\tallItems={allCountedItems}\r\n\t\t\t\tonUpdateAllItems={handleUpdateAllItems}\r\n\t\t\t/>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default ItemPickerButton;","import React, { FC } from \"react\";\r\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\r\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\r\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { Dictionary } from \"../model/dictionary\";\r\nimport { Item } from \"../model/item\";\r\nimport ChipCollection from \"./ChipCollection\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport ItemPickerButton from \"./ItemPickerButton\";\r\nimport { findItemCost, Gear } from \"../model/gear\";\r\n\r\nconst useStyles = makeStyles({\r\n    headerLabel: {\r\n        lineHeight: 3,\r\n        fontWeight: 700,\r\n    },\r\n});\r\n\r\n\r\ntype Props = {\r\n\tlabel: string;\r\n\titems: Item[];\r\n\tallItems: Dictionary<Item[]>;\r\n\tcreateItemLabel: (item: Item) => string;\r\n\tonUpdateItems: (newItems: Item[]) => void;\r\n};\r\nconst GroupContainer: FC<Props> = (props: Props) => {\r\n\tconst { label, items, allItems, createItemLabel, onUpdateItems } = props;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tlet cost = 0;\r\n\tfor (const item of items) {\r\n\t\tcost += findItemCost(item, allItems as Dictionary<Gear[]>) * parseInt(item.count);\r\n\t}\r\n\r\n\tconst flatItems: Item[] = [];\r\n\tfor (const path of Object.keys(allItems)) {\r\n\t\tflatItems.push(...allItems[path]);\r\n\t}\r\n\r\n\tconst handleDelete = (toDelete: Item) => {\r\n\t\tconst newItems = [...items];\r\n\t\tconst index = newItems.findIndex(i => i.name === toDelete.name);\r\n\t\tif (index < 0) {\r\n\t\t\tthrow new Error(`Could not find item '${toDelete.name}' to delete in list '${JSON.stringify(newItems)}'`);\r\n\t\t}\r\n\t\tnewItems.splice(index, 1);\r\n\t\tonUpdateItems(newItems);\r\n\t};\r\n\r\n\tconst handleUpdateItems = (newItems: Item[]) => {\r\n\t\tonUpdateItems(newItems);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<ExpansionPanel defaultExpanded={false}>\r\n\t\t\t<ExpansionPanelSummary expandIcon={<ExpandMoreIcon />} >\r\n\t\t\t\t<FormControlLabel\r\n\t\t\t\t\tonClick={(event) => event.stopPropagation()}\r\n\t\t\t\t\tonFocus={(event) => event.stopPropagation()}\r\n\t\t\t\t\tcontrol={<ItemPickerButton\r\n\t\t\t\t\t\ttitle={label}\r\n\t\t\t\t\t\titems={items}\r\n\t\t\t\t\t\tallItems={allItems}\r\n\t\t\t\t\t\tonUpdateItems={handleUpdateItems}\r\n\t\t\t\t\t/>}\r\n\t\t\t\t\tlabel=\"\"\r\n\t\t\t\t/>\r\n\t\t\t\t<Typography className={classes.headerLabel}>{label} ({cost})</Typography>\r\n\t\t\t</ExpansionPanelSummary>\r\n\t\t\t<ExpansionPanelDetails>\r\n\t\t\t\t<ChipCollection\r\n\t\t\t\t\tvalues={items}\r\n\t\t\t\t\tcreateChipLabel={createItemLabel}\r\n\t\t\t\t\tonDeleteValue={handleDelete}\r\n\t\t\t\t/>\r\n\t\t\t</ExpansionPanelDetails>\r\n\t\t</ExpansionPanel>\r\n\t);\r\n};\r\n\r\nexport default GroupContainer;","import React, { FC, Fragment } from \"react\";\r\n// import PropertyTree from \"./PropertyTree\";\r\nimport { useGlobalState, useDispatch } from \"../context\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\nimport { getChildNames, getChildSet } from \"../model/dictionary\";\r\nimport GroupContainer from \"./GroupContainer\";\r\nimport { Item, getItemSubset } from \"../model/item\";\r\nimport { sentenceCase } from \"change-case\";\r\nimport { gearRoot, findItemCost } from \"../model/gear\";\r\n\r\nconst GearTab: FC = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst character = useGlobalState(\"selectedCharacter\");\r\n\tconst { gear } = character;\r\n\tconst allGear = useGlobalState(\"allGear\");\r\n\r\n\tconst createGearLabel= (item: Item) => {\r\n\t\tconst { name, count} = item;\r\n\t\tconst cost = findItemCost(item, allGear);\r\n\t\tif (parseInt(count) > 1) {\r\n\t\t\treturn `${name} (${cost} x ${count})`;\r\n\t\t} else {\r\n\t\t\treturn `${name} (${cost})`;\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleUpdateGear = (name: string, newSubGear: Item[]) => {\r\n\t\tconst newGear = gear.filter(g => !g.path.startsWith(`${gearRoot}.${name}`));\r\n\t\tnewGear.push(...newSubGear);\r\n\t\tconst data: UpdateCharacterData = { ...character, gear: newGear };\r\n\t\tdispatch({ type: ActionType.UpdateCharacter, data });\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t{\r\n\t\t\t\tgetChildNames(allGear, gearRoot).map(name =>\r\n\t\t\t\t\t<GroupContainer\r\n\t\t\t\t\t\tkey={name}\r\n\t\t\t\t\t\tlabel={sentenceCase(name)}\r\n\t\t\t\t\t\titems={getItemSubset(gear, `${gearRoot}.${name}`)}\r\n\t\t\t\t\t\tallItems={getChildSet(allGear, `${gearRoot}.${name}`)}\r\n\t\t\t\t\t\tcreateItemLabel={createGearLabel}\r\n\t\t\t\t\t\tonUpdateItems={newItems => handleUpdateGear(name, newItems)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default GearTab;","import React, { FC, useState, useEffect } from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SelectCharacter from \"./SelectCharacter\";\r\nimport CharacterName from \"./CharacterName\";\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport { ActionType, LoadSkillsData, LoadContactsData, LoadQualitiesData, LoadSpellsData, LoadGearData } from \"../reducer\";\r\nimport CharacterTab from \"./CharacterTab\";\r\nimport SkillsTab from \"./SkillsTab\";\r\nimport Karma from \"./Karma\";\r\nimport AttributesTab from \"./AttributesTab\";\r\nimport ContactsTab from \"./ContactsTab\";\r\nimport { isAwakened } from \"../model/character\";\r\nimport MagicTab from \"./MagicTab\";\r\nimport GearTab from \"./GearTab\";\r\nimport { transformAllGear } from \"../model/gear\";\r\n\r\nconst useStyles = makeStyles({\r\n    bar: {\r\n        flexGrow: 1,\r\n        display: \"flex\"\r\n    }\r\n});\r\n\r\nconst CharacterCreator: FC = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const selectedCharacter = useGlobalState(\"selectedCharacter\");\r\n\r\n    useEffect(() => {\r\n        fetch(\"/data/qualities.json\")\r\n            .then(response => response.json())\r\n            .then(qualities => {\r\n                const data = qualities as LoadQualitiesData;\r\n                dispatch({ type: ActionType.LoadQualities, data });\r\n            })\r\n            .catch(error => {\r\n                console.error(`Error occured loading qualities: ${error.message}\\n${error.stack}`);\r\n            });\r\n        fetch(\"/data/skills.json\")\r\n            .then(response => response.json())\r\n            .then(skills => {\r\n                const data = skills as LoadSkillsData;\r\n                dispatch({ type: ActionType.LoadSkills, data });\r\n            });\r\n        fetch(\"/data/contacts.json\")\r\n            .then(response => response.json())\r\n            .then(contacts => {\r\n                const data = contacts.all as LoadContactsData;\r\n                dispatch({ type: ActionType.LoadContacts, data });\r\n            });\r\n        fetch(\"/data/magic.json\")\r\n            .then(response => response.json())\r\n            .then(magic => {\r\n                const spellData = magic.spells as LoadSpellsData;\r\n                dispatch({ type: ActionType.LoadSpells, data: spellData });\r\n            });\r\n        fetch(\"/data/gear.json\")\r\n            .then(response => response.json())\r\n            .then(gear => {\r\n                const gearData = transformAllGear(gear) as LoadGearData;\r\n                dispatch({ type: ActionType.LoadGear, data: gearData });\r\n            });\r\n    }, [dispatch]);\r\n\r\n    const saveClickHandler = () => {\r\n        dispatch({ type: ActionType.SaveCharacter });\r\n    };\r\n    const resetClickHandler = () =>{\r\n        dispatch({ type: ActionType.ClearCharacter });\r\n    }\r\n\r\n    const [selectedTab, setSelectedTab] = useState(0);\r\n    const onTabChange = (_event: React.ChangeEvent<{}>, newValue: number) => {\r\n        setSelectedTab(newValue);\r\n    };\r\n\r\n    const awakened = isAwakened(selectedCharacter);\r\n\r\n    let selectedTabPanel: JSX.Element | null;\r\n    switch (selectedTab) {\r\n        case 0:\r\n            selectedTabPanel = <CharacterTab />\r\n            break;\r\n        case 1:\r\n            selectedTabPanel = <AttributesTab />\r\n            break;\r\n        case 2:\r\n            selectedTabPanel = <SkillsTab />\r\n            break;\r\n        case 3:\r\n            selectedTabPanel = <ContactsTab />\r\n            break;\r\n        case 4: {\r\n            if (awakened) {\r\n                selectedTabPanel = <MagicTab />\r\n            } else {\r\n                selectedTabPanel = <GearTab />\r\n            }\r\n            break;\r\n        }\r\n        case 5: {\r\n            if (awakened) {\r\n                selectedTabPanel = <GearTab />\r\n            } else {\r\n                selectedTabPanel = null;\r\n            }\r\n            break;\r\n        }\r\n        default:\r\n            throw new Error(`Unknown tab index ${selectedTab}`);\r\n    }\r\n\r\n    const [drawerOpen, setDrawerOpen] = useState(false);\r\n\r\n    const onMenuClick = () => {\r\n        setDrawerOpen(true);\r\n    }\r\n    const onDrawerClose = () => {\r\n        setDrawerOpen(false);\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <AppBar position=\"sticky\" color=\"default\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" onClick={onMenuClick} aria-label=\"menu\">\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <div className={classes.bar}>\r\n                        <CharacterName character={selectedCharacter} />\r\n                        <Karma />\r\n                    </div>\r\n                    <IconButton aria-label=\"save\" onClick={saveClickHandler} color=\"secondary\">\r\n                        <SaveIcon />\r\n                    </IconButton>\r\n                    <IconButton aria-label=\"clear\" onClick={resetClickHandler} color=\"secondary\">\r\n                        <ClearIcon />\r\n                    </IconButton>\r\n                </Toolbar>\r\n                <Tabs value={selectedTab} onChange={onTabChange}>\r\n                    <Tab label=\"Character\" />\r\n                    <Tab label=\"Attributes\" />\r\n                    <Tab label=\"Skills\" />\r\n                    <Tab label=\"Contacts\" />\r\n                    { awakened ? <Tab label=\"Magic\" /> : null }\r\n                    <Tab label=\"Gear\" />\r\n                </Tabs>\r\n            </AppBar>\r\n            {\r\n                selectedTabPanel\r\n            }\r\n            <Drawer open={drawerOpen} onClose={onDrawerClose}>\r\n                <SelectCharacter />\r\n            </Drawer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CharacterCreator;","import React, { FC, useReducer } from \"react\";\r\nimport { DispatchContext, StateContext } from \"./context\";\r\nimport { reducer, INITIAL_STATE } from \"./reducer\";\r\nimport { State } from \"./model/state\";\r\nimport { loadCharacter, loadCharacters, loadSelectedCharacter } from \"./persistance\";\r\nimport CharacterCreator from \"./component/CharacterCreator\";\r\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        type: \"dark\"\r\n    }\r\n});\r\n\r\nconst App: FC = () => {\r\n    const [state, dispatch] = useReducer(reducer, INITIAL_STATE, (s: State): State => {\r\n        const characters = loadCharacters();\r\n        const selectedCharacterKey = loadSelectedCharacter();\r\n        let selectedCharacter = s.selectedCharacter;\r\n        if (selectedCharacterKey > -1) {\r\n            const selectedCharacterRef = characters.find(c => c.key === selectedCharacterKey);\r\n            if (selectedCharacterRef) {\r\n                const loadedCharacter = loadCharacter(selectedCharacterRef.key);\r\n                if (loadedCharacter) {\r\n                    selectedCharacter = loadedCharacter;\r\n                }\r\n            }\r\n        }\r\n        return { ...s, characters, selectedCharacter };\r\n    });\r\n\r\n    return (\r\n        <DispatchContext.Provider value={dispatch}>\r\n            <StateContext.Provider value={state}>\r\n                <ThemeProvider theme={theme}>\r\n                    <CssBaseline />\r\n                    <CharacterCreator />\r\n                </ThemeProvider>\r\n            </StateContext.Provider>\r\n        </DispatchContext.Provider>\r\n    );\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}