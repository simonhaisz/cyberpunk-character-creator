{"version":3,"sources":["model/create-options.ts","data/default-create-options.ts","model/dictionary.ts","model/gear.ts","model/character.ts","data/default-character.ts","persistance.ts","model/meta-type.ts","model/modifier.ts","model/attributes.ts","model/skills.ts","model/quality.ts","reducer.ts","model/karma.ts","context.ts","component/CharacterName.tsx","component/SelectCharacter.tsx","data/meta-types.ts","component/ChipCollection.tsx","model/item.ts","component/GradeButton.tsx","component/ItemPickerCard.tsx","component/ItemPickerSection.tsx","component/ItemPickerDialog.tsx","component/ItemPickerButton.tsx","component/GroupContainer.tsx","component/QualitiesSection.tsx","component/Property.tsx","component/Professionalism.tsx","component/CharacterTab.tsx","model/custom-item.ts","component/PickerDialog.tsx","component/PickerButton.tsx","component/Skill.tsx","component/SkillList.tsx","component/ActiveSkillList.tsx","component/KnowledgeSkillList.tsx","component/LanguageSkillList.tsx","component/SkillsTab.tsx","component/Karma.tsx","component/Attribute.tsx","component/AttributeList.tsx","component/AttributesTab.tsx","model/contact.ts","component/Contact.tsx","component/ContactList.tsx","component/ContactsTab.tsx","component/MagicTab.tsx","component/GearTab.tsx","model/magic.ts","component/ReadOnlyProperty.tsx","component/ModifiableProperty.tsx","component/StatsTab.tsx","request.ts","component/ConfirmationDialog.tsx","component/ImportButton.tsx","component/ExportButton.tsx","component/LevelSelect.tsx","component/CreateOptionsPanel.tsx","component/CharacterCreator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Level","ALL_LEVELS","Street","Normal","Elite","getBaseGearAvailability","level","Error","DEFAULT_OPTIONS","karmaLevel","connectionLevel","nuyenLevel","gearLevel","transformAllItems","parentPath","parentData","allItems","transformValues","Object","keys","childName","childPath","childData","Array","isArray","itemCostMap","Map","getItemCost","item","key","path","name","has","get","items","undefined","foundItem","find","g","JSON","stringify","cost","parseInt","set","itemAvailabilityMap","getChildNames","values","childNames","Set","parents","split","findChildPaths","components","add","length","from","getChildSet","subset","childPaths","match","i","push","Grade","MetaType","gearRoot","transformGearValues","map","v","data","availability","costLabel","propName","propValue","essence","transformGearItem","test","splitGearItems","finalizeGearItem","itemVersions","groupResult","exec","namePrefix","nameSuffixes","r","trim","itemCount","itemVersion","splitValues","costResult","isNaN","computeItemCost","allGear","baseCost","multiplier","grade","getGradeCostMultipler","getItemAvailability","parseAvailability","rating","legality","baseAvailability","Number","NaN","restrictedAvailability","legalAvailability","getAvailabilityCostMultiplier","createSavedItem","count","savedItem","parseFloat","Used","Alpha","Beta","Delta","getGradeEssenceMultiplier","toPrecision","result","console","error","getCharacterGearNuyenCost","character","nuyen","gear","getCharacterGearKarmaCost","factor","getNuyenFactor","Math","ceil","isAwakened","qualities","q","getProfessionalismCost","professionalism","upgradeCharacter","originalCharacter","upgradedCharacter","options","modifiers","originalGear","upgradedGear","upgradedPath","groups","upgradedName","upgradeGear","DEFAULT_CHARACTER","streetName","metaType","Human","attributes","activeSkills","knowledgeSkills","languageSkills","contacts","spells","getDefaultCharacter","createCharacterKey","loadCharacter","localStorage","getItem","parse","saveCharacter","setItem","SELECTED_CHARACTER_KEY","createCustomItemKey","getMetaTypeCost","Ork","Dwarf","Elf","Troll","getModifier","modifier","m","getNaturalAttributeRating","attribute","a","getBaseAttributeRating","getAttributeMetaTypeModifier","getEffectiveAttributeRating","getAttributeCost","getAttributesCost","awakened","getActiveSkillCost","getActiveSkillsCost","s","reduce","b","getKnowledgeSkillCost","getKnowledgeSkillsCost","getFreeKnowledgeSkillPoints","intuition","logic","getSkillsCost","activeSkillCost","knowledgeSkillCost","languageSkillCost","freeKnowledgePoints","max","ActionType","transformQualityValues","value","getCharacterQualitiesCost","allQualities","getDefaultKarma","total","spent","available","getCharacterKarma","karma","state","reducer","action","type","UpdateCharacter","selectedCharacter","characters","handleCharacterUpdate","ImportCharacter","ClearCharacter","removeItem","filter","c","SelectCharacter","characterRef","LoadQualities","LoadSkills","allSkills","LoadContacts","allContacts","LoadGear","LoadSpells","allSpells","LoadCustomItems","customItems","AddCustomItem","newItem","Name","saveCustomItem","UpdateCreateOptions","newOptions","totalKarma","getStartingKarma","INITIAL_STATE","positive","negative","active","knowledge","language","combat","detection","health","illusion","manipulation","index","hasDefaultKey","findIndex","Date","now","DispatchContext","createContext","useDispatch","useContext","StateContext","useGlobalState","property","CharacterName","props","Typography","dispatch","List","subheader","ListSubheader","ListItem","onClick","onCharacterClick","ALL_META_TYPES","useStyles","makeStyles","root","display","flexDirection","flexWrap","justifyContent","chip","marginRight","marginBottom","ChipCollection","createChipLabel","onDeleteValue","classes","className","Badge","badgeContent","invisible","color","anchorOrigin","vertical","horizontal","Chip","label","onDelete","getItemSubset","subItems","startsWith","minWidth","maxWidth","width","GradeButton","disabled","onUpdateGrade","Button","variant","nextGrade","padding","margin","textAlign","ItemPickerCard","createCostLabel","onUpdateItem","hasAny","allowMultiple","includeAvailability","isItemAvailable","includeGrade","Paper","elevation","style","lineHeight","ButtonGroup","toString","newGrade","ItemPickerSection","onUpdateItems","handleUpdate","newItems","Divider","ItemPickerDialog","open","onClose","title","onUpdateAllItems","allPaths","paths","pathToLabel","finalComponent","sentenceCase","useState","group","setGroup","p","Dialog","DialogTitle","DialogContent","Select","id","displayEmpty","onChange","event","target","MenuItem","newAllItems","ItemPickerButton","setOpen","parentPathsToName","componentIndex","parentPathToName","differenceFound","pathIndex","slice","join","getNextParentPaths","parentPaths","setParentPath","menuAnchor","setMenuAnchor","allChildItems","allCountedItems","hasItems","localItems","matchingItems","localItem","matchingItem","matchingParents","matchingLevels","currentLevel","currentLevelMatches","getMatchingParents","matchingParentPath","maxPathDepth","maxDepth","getMaxPathDepth","useMenu","IconButton","currentTarget","size","disableRipple","anchorEl","Boolean","handleMenuClick","newCountedItems","includeItem","splice","headerLabel","fontWeight","GroupContainer","createItemLabel","createItemCostLabel","flatItems","ExpansionPanel","defaultExpanded","ExpansionPanelSummary","expandIcon","FormControlLabel","stopPropagation","onFocus","control","ExpansionPanelDetails","toDelete","QualitiesSection","createQualityCostLabel","newQualities","height","slider","Property","onUpdate","min","step","formatDisplayValue","computeCost","gutterBottom","Slider","marks","valueLabelDisplay","e","valueLabelFormat","_index","paddingTop","paddingLeft","Professionalism","newProfessionalism","header","marginLeft","alignItems","field","marginTop","divider","CharacterTab","onCharacterUpdated","updatedCharacter","TextField","id-","t","getChildItems","content","ul","PickerDialog","onItemSelectionChange","includeCost","allowNewItems","allowMultiSelection","newItemName","setNewItemName","newItemAvailability","setNewItemAvailability","newItemCost","setNewItemCost","onUpdateNewItem","aria-label","selected","Availability","Cost","ListItemText","findName","editButton","PickerButton","breadcrums","selectedValueNames","addValue","removeValue","allowNewValues","createValue","findAvailability","findCost","n","createSelectableItem","Skill","skill","SkillList","skills","computeSkillCost","onSkillsUpdated","sort","localeCompare","onSkillUpdate","newSkills","skillIndex","ActiveSkillList","activeSkillsCost","allActiveSkills","KnowledgeSkillList","knowledgeSkillsCost","freeKnowledgeSkillPoints","totalCost","allKnowledgeSkills","LanguageSkillList","languageSkillsCost","allLanguageSkills","SkillsTab","paddingRight","badge","Karma","showZero","Attribute","AttributeList","filteredAttributes","attributesCost","newAttributes","attributeIndex","AttributesTab","getContactRatingCost","getContactCost","contact","connection","loyalty","getAllContactsCost","details","Contact","contactCost","maxConnection","getMaxConnection","updatedConnection","updatedContact","updatedLoyalty","ContactList","selectedContacts","contactsCost","freeContactPoints","charisma","willpower","getFreeContactPoints","onContactUpdate","newContacts","contactIndex","ContactsTab","MagicTab","_item","newSpells","GearTab","createGearCostLabel","createGearLabel","newSubGear","newGear","handleUpdateGear","transformSpellValues","theme","palette","getContrastText","primary","main","backgroundColor","ReadOnlyProperty","Avatar","button","ModifiableProperty","updateModifier","orientation","section","StatsTab","body","agility","reaction","strength","magic","athletics","initiative","physicalBoxes","stunBoxes","sneaking","walking","running","ModifierProperty","newValue","newModifiers","modifierIndex","createPublicUrl","relativeUrl","process","ConfirmationDialog","onChoice","handleNo","DialogContentText","DialogActions","autoFocus","ImportButton","saveData","accept","hidden","files","file","reader","FileReader","onload","readAsText","log","htmlFor","Tooltip","component","ExportButton","filename","generateData","element","document","createElement","setAttribute","encodeURIComponent","appendChild","click","removeChild","LevelSelect","updateValue","selectId","labelId","FormControl","InputLabel","child","l","CreateOptionsPanel","handleOnOptionsChange","bar","flexGrow","CharacterCreator","drawerOpen","setDrawerOpen","selectedTab","setSelectedTab","useEffect","fetch","then","response","json","allData","transformAllQualities","catch","message","stack","all","spellData","transformAllSpells","gearData","transformAllGear","gearNuyenCostLabel","showDeleteConfirmation","setShowDeleteConfirmation","characterCost","skillsCost","magicCost","gearNuyenCost","getGearKarmaCost","round","selectedTabPanel","exportFileName","AppBar","position","Toolbar","edge","rawData","Tabs","_event","Tab","Drawer","createMuiTheme","App","useReducer","characterJSON","loadCharacters","selectedCharacterKey","loadSelectedCharacter","selectedCharacterRef","loadedCharacter","Provider","ThemeProvider","CssBaseline","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.489f42a3.chunk.js","sourcesContent":["export enum Level {\r\n    Street = \"Street\",\r\n    Normal = \"Normal\",\r\n    Elite = \"Elite\"\r\n}\r\n\r\nexport const ALL_LEVELS: Level[] = [\r\n    Level.Street,\r\n    Level.Normal,\r\n    Level.Elite\r\n];\r\n\r\nexport type CreateOptions = {\r\n    karmaLevel: Level;\r\n    connectionLevel: Level;\r\n    nuyenLevel: Level;\r\n    gearLevel: Level;\r\n}\r\n\r\nexport function getStartingKarma(level: Level): number {\r\n    switch (level) {\r\n        case Level.Street:\r\n            return 400;\r\n        case Level.Normal:\r\n            return 500;\r\n        case Level.Elite:\r\n            return 700;\r\n        default:\r\n            throw new Error(`Unknown level '${level}'`);\r\n    }\r\n}\r\n\r\nexport function getNuyenFactor(level: Level): number {\r\n    switch (level) {\r\n        case Level.Street:\r\n            return 10000;\r\n        case Level.Normal:\r\n            return 20000;\r\n        case Level.Elite:\r\n            return 50000;\r\n        default:\r\n            throw new Error(`Unknown level '${level}'`);\r\n    }\r\n}\r\n\r\nexport function getBaseGearAvailability(level: Level): number {\r\n    switch (level) {\r\n        case Level.Street:\r\n            return 6;\r\n        case Level.Normal:\r\n            return 12;\r\n        case Level.Elite:\r\n            return 18;\r\n        default:\r\n            throw new Error(`Unknown level '${level}'`);\r\n    }\r\n}\r\n\r\nexport function getMaxConnection(level: Level): number {\r\n    switch (level) {\r\n        case Level.Street:\r\n            return 3;\r\n        case Level.Normal:\r\n            return 5;\r\n        case Level.Elite:\r\n            return 7;\r\n        default:\r\n            throw new Error(`Unknown level '${level}'`);\r\n    }\r\n}","import { CreateOptions, Level } from \"../model/create-options\";\r\n\r\nexport const DEFAULT_OPTIONS: CreateOptions = {\r\n    karmaLevel: Level.Normal,\r\n    connectionLevel: Level.Normal,\r\n    nuyenLevel: Level.Normal,\r\n    gearLevel: Level.Normal\r\n};","import { sentenceCase } from \"change-case\";\r\nimport { Item } from \"./item\";\r\n\r\nexport type Dictionary<T> = { [key: string]: T };\r\n\r\nexport function transformAllItems<T>(parentPath: string, parentData: any, allItems: Dictionary<T[]>, transformValues: (childpath: string, childValues: any[]) => T[]) {\r\n\tfor (const childName of Object.keys(parentData)) {\r\n\t\tconst childPath = `${parentPath}.${childName}`;\r\n\t\tconst childData = parentData[childName];\r\n\t\tif (Array.isArray(childData)) {\r\n\t\t\tallItems[childPath] = transformValues(childPath, childData as any[]);\r\n\t\t} else {\r\n\t\t\ttransformAllItems(childPath, childData, allItems, transformValues);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nconst itemCostMap = new Map<string,number>();\r\nexport function getItemCost<T extends Item>(item: Item, allItems: Dictionary<T[]>): number {\r\n\tconst key = `${item.path}.${item.name}`;\r\n\tif (itemCostMap.has(key)) {\r\n\t\treturn itemCostMap.get(key)!;\r\n\t}\r\n\tconst items = allItems[item.path];\r\n\tif (items === undefined) {\r\n\t\tthrow new Error(`Could not find any items under path '${item.path}'`);\r\n\t}\r\n\tconst foundItem = items.find(g => g.name === item.name);\r\n\tif (!foundItem) {\r\n\t\tthrow new Error(`Could not find item with name '${item.name}' in list '${JSON.stringify(items)}' under path '${item.path}'`);\r\n\t}\r\n\r\n\tconst cost = parseInt(foundItem.cost!);\r\n\titemCostMap.set(key, cost);\r\n\treturn cost;\r\n}\r\n\r\nconst itemAvailabilityMap = new Map<string,string | undefined>();\r\nexport function getItemAvailability<T extends Item>(item: Item, allItems: Dictionary<T[]>): string | undefined {\r\n\tconst key = `${item.path}.${item.name}`;\r\n\tif (itemAvailabilityMap.has(key)) {\r\n\t\treturn itemAvailabilityMap.get(key)!;\r\n\t}\r\n\tconst items = allItems[item.path];\r\n\tconst foundItem = items.find(g => g.name === item.name);\r\n\tif (!foundItem) {\r\n\t\tthrow new Error(`Could not find item with name '${item.name}' in list '${JSON.stringify(items)}' under path '${item.path}'`);\r\n\t}\r\n\r\n\tconst availability = foundItem.availability;\r\n\titemAvailabilityMap.set(key, foundItem.availability);\r\n\treturn availability;\r\n}\r\n\r\nexport function getNextParentPaths<T>(values: Dictionary<T>): Map<string,string> {\r\n\tconst parentPathToName = new Map<string,string>();\r\n\tconst paths = Object.keys(values).map(p => p.split(\".\"));\r\n\tlet componentIndex: number;\r\n\tif (paths.length > 1) {\r\n\t\tlet differenceFound = false;\r\n\t\tcomponentIndex = 0;\r\n\t\twhile (!differenceFound) {\r\n\t\t\tif (componentIndex >= paths[0].length) {\r\n\t\t\t\tthrow new Error(`Searched through all path components and found no differences`);\r\n\t\t\t}\r\n\t\t\tfor (let pathIndex = 1; pathIndex < paths.length; pathIndex++) {\r\n\t\t\t\tif (paths[0][componentIndex] !== paths[pathIndex][componentIndex]) {\r\n\t\t\t\t\tdifferenceFound = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcomponentIndex++;\r\n\t\t}\r\n\t} else if (paths.length === 1) {\r\n\t\t// there is only a single path so pick the last component\r\n\t\tcomponentIndex = paths[0].length - 1;\r\n\t} else {\r\n\t\tthrow new Error(`There are no paths`);\r\n\t}\r\n\tfor (const path of paths) {\r\n\t\tconst parentPath = path.slice(0, componentIndex).join(\".\");\r\n\t\tconst name = path[componentIndex - 1];\r\n\t\tparentPathToName.set(parentPath, sentenceCase(name));\r\n\t}\r\n\treturn parentPathToName;\r\n}\r\n\r\nexport function getMatchingParents<T>(values: Dictionary<T>): string[] {\r\n\tconst paths = Object.keys(values).map(p => p.split(\".\"));\r\n\tlet matchingLevels = 0;\r\n\tfor (let i = 0; ; i++) {\r\n\t\tlet currentLevel: string | undefined;\r\n\t\tlet currentLevelMatches = true;\r\n\t\tfor (const path of paths) {\r\n\t\t\tif (i >= path.length) {\r\n\t\t\t\tcurrentLevelMatches = false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif (currentLevel === undefined) {\r\n\t\t\t\tcurrentLevel = path[i];\r\n\t\t\t} else if (currentLevel !== path[i]) {\r\n\t\t\t\tcurrentLevelMatches = false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (currentLevelMatches) {\r\n\t\t\tmatchingLevels++;\r\n\t\t} else {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\tif (matchingLevels === 0) {\r\n\t\treturn [];\r\n\t}\r\n\t// since they all match we can just grab the first path\r\n\treturn paths[0].slice(0, matchingLevels);\r\n}\r\n\r\nexport function getMaxPathDepth<T>(values: Dictionary<T>): number {\r\n\tlet maxDepth = 0;\r\n\tconst paths = Object.keys(values).map(p => p.split(\".\"));\r\n\tfor (const path of paths) {\r\n\t\tmaxDepth = Math.max(maxDepth, path.length);\r\n\t}\r\n\treturn maxDepth;\r\n}\r\n\r\nexport function getChildNames<T>(values: Dictionary<T>, parentPath: string): string[] {\r\n\tconst childNames = new Set<string>();\r\n\tconst parents = parentPath.split(\".\");\r\n\tfor (const path of findChildPaths(values, parentPath)) {\r\n\t\tconst components = path.split(\".\");\r\n\t\tchildNames.add(components[parents.length]);\r\n\t}\r\n\treturn Array.from(childNames);\r\n}\r\n\r\nexport function getChildValues<T>(values: Dictionary<T[]>, parentPath: string): T[] {\r\n\tconst childValues: T[] = [];\r\n\tfor (const path of findChildPaths(values, parentPath)) {\r\n\t\tchildValues.push(...values[path]);\r\n\t}\r\n\treturn childValues;\r\n}\r\n\r\nexport function getChildSet<T>(values: Dictionary<T[]>, parentPath: string): Dictionary<T[]> {\r\n\tconst subset: Dictionary<T[]> = {};\r\n\tfor (const path of findChildPaths(values, parentPath)) {\r\n\t\tsubset[path] = values[path];\r\n\t}\r\n\treturn subset;\r\n}\r\n\r\nfunction findChildPaths<T>(values: Dictionary<T>, parentPath: string): string[] {\r\n\tconst childPaths: string[] = [];\r\n\tconst parents = parentPath.split(\".\");\r\n\tfor (const path of Object.keys(values)) {\r\n\t\tconst components = path.split(\".\");\r\n\t\tif (components.length < parents.length) {\r\n\t\t\tthrow new Error(`Child paths '${path}' must be longer than parent paths '${parentPath}'`);\r\n\t\t}\r\n\t\tlet match = true;\r\n\t\tfor (let i = 0; i < parents.length; i++) {\r\n\t\t\tif (parents[i] !== components[i]) {\r\n\t\t\t\tmatch = false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (match) {\r\n\t\t\tchildPaths.push(path);\r\n\t\t}\r\n\t}\r\n\treturn childPaths;\r\n}","import { Dictionary, transformAllItems, getItemCost, getItemAvailability } from \"./dictionary\";\r\nimport { Item } from \"./item\";\r\nimport { Character } from \"./character\";\r\nimport { getBaseGearAvailability, getNuyenFactor, Level } from \"./create-options\";\r\n\r\nexport type Gear = {\r\n\tavailability: string;\r\n\tcost: string;\r\n\tcostLabel: string;\r\n} & Item;\r\n\r\nexport const gearRoot = \"gear\";\r\n\r\nexport function transformAllGear(allData: any): Dictionary<Gear[]> {\r\n\tconst allGear: Dictionary<Gear[]> = {};\r\n\ttransformAllItems(gearRoot, allData, allGear, transformGearValues);\r\n\treturn allGear;\r\n}\r\n\r\nfunction transformGearValues(path: string, values: any[]): Gear[] {\r\n\tconst items: Gear[] = [];\r\n\tfor (const item of values.map(v => transformGearItem(path, v))) {\r\n\t\t// gear with multiple versions need to be split into separate items\r\n\t\tif (/^([\\w-\\s]+)\\s+\\(([\\w-\\s]+(,\\s*)?)+\\)$/i.test(item.name)) {\r\n\t\t\titems.push(...splitGearItems(path, item));\r\n\t\t} else {\r\n\t\t\titems.push(item);\r\n\t\t}\r\n\t}\r\n\tfor (const item of items) {\r\n\t\tfinalizeGearItem(item);\r\n\t}\r\n\treturn items;\r\n}\r\n\r\nfunction transformGearItem(path: string, data: any): Gear {\r\n\tconst item: Gear = {\r\n\t\tpath,\r\n\t\tname: \"[NAME]\",\r\n\t\tavailability: \"[AVAILABILITY]\",\r\n\t\tcost: \"[COST]\",\r\n\t\tcostLabel: \"[COST]\"\r\n\t};\r\n\tfor (const propName of Object.keys(data)) {\r\n\t\tconst propValue = data[propName];\r\n\t\tif (propName === \"Name\") {\r\n\t\t\titem.name = propValue as string;\r\n\t\t} else if (propName === \"Availability\") {\r\n\t\t\titem.availability = propValue as string;\r\n\t\t} else if (propName === \"Cost\") {\r\n\t\t\titem.costLabel = propValue as string;\r\n\t\t} else if (propName === \"Essence\") {\r\n\t\t\titem.essence = propValue as string;\r\n\t\t} else {\r\n\t\t\t// assume a string (not that it actually matters)\r\n\t\t\titem[propName] = propValue as string;\r\n\t\t}\r\n\t}\r\n\treturn item;\r\n}\r\n\r\nfunction splitGearItems(path: string, item: Gear): Gear[] {\r\n\tconst itemVersions: Gear[] = [];\r\n\t/*\r\n\t\"Some Thingy (1, 2, 3)\" => [\r\n\t\t\"Some Thingy (A, B, C)\"\r\n\t\t\"Some Thingy\",\r\n\t\t\"A, B, C\"\r\n\t]\r\n\t*/\r\n\tconst groupResult = /^([\\w-\\s]+)\\s+\\(((?:(?:[\\w-\\s]+)(?:,\\s*)?)+)\\)$/i.exec(item.name);\r\n\tif (groupResult === null) {\r\n\t\tthrow new Error(`Gear item's name '${item.name}' does not contain multiple ratings`);\r\n\t}\r\n\tconst namePrefix = groupResult[1];\r\n\tconst nameSuffixes = groupResult[2].split(\",\").map(r => r.trim());\r\n\tconst itemCount = nameSuffixes.length;\r\n\tfor (let i = 0; i < itemCount; i++) {\r\n\t\tconst itemVersion: Gear = {\r\n\t\t\tpath,\r\n\t\t\tname: `${namePrefix} - ${nameSuffixes[i]}`,\r\n\t\t\tavailability: \"[AVAILABILITY]\",\r\n\t\t\tcost: \"[COST]\",\r\n\t\t\tcostLabel: \"[COST]\"\r\n\t\t};\r\n\t\tfor (const propName of Object.keys(item)) {\r\n\t\t\t// use lower-case names as this is the Gear object, not the raw object from the JSON file\r\n\t\t\tif (propName === \"name\") {\r\n\t\t\t\t// skip name - it is already set\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif (propName === \"cost\") {\r\n\t\t\t\t// skip cost - it is determined in the finalize step, after splitting\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// all other properties are strings\r\n\t\t\tconst propValue = item[propName] as string;\r\n\t\t\tconst splitValues = propValue.split(\",\").map(v => v.trim());\r\n\t\t\tif (splitValues.length === 1) {\r\n\t\t\t\t// same value for all versions\r\n\t\t\t\titemVersion[propName] = propValue;\r\n\t\t\t} else if (splitValues.length === itemCount) {\r\n\t\t\t\titemVersion[propName] = splitValues[i];\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error(`Properties should have a single value or the same amount as there are version names ${itemCount} - found ${splitValues.length}`);\r\n\t\t\t}\r\n\t\t}\r\n\t\titemVersions.push(itemVersion);\r\n\t}\r\n\treturn itemVersions;\r\n}\r\n\r\nfunction finalizeGearItem(item: Gear) {\r\n\t/*\r\n\t1000\r\n\t+500\r\n\tx2\r\n\t50 (per dose)\r\n\t*/\r\n\tconst costResult = /^(?:x|\\+)?(\\d+)\\s*(?:\\(([\\w\\s]+)\\))?$/i.exec(item.costLabel);\r\n\tif (costResult) {\r\n\t\titem.cost = costResult[1];\r\n\t\tif (isNaN(parseInt(item.cost))) {\r\n\t\t\tthrow new Error(`Gear item '${item.name}' has unsupported cost label '${item.costLabel}'`);\r\n\t\t}\r\n\t} else {\r\n\t\titem.cost = \"0\";\r\n\t}\r\n}\r\n\r\nexport function computeItemCost(item: Item, allGear: Dictionary<Item[]>, gearLevel: Level): number {\r\n\tconst baseCost = getItemCost(item, allGear);\r\n\tlet multiplier = 1;\r\n\tif (item.grade !== undefined) {\r\n\t\tmultiplier *= getGradeCostMultipler(item.grade as Grade) \r\n\t\tmultiplier= getGradeCostMultipler(item.grade as Grade);\r\n\t}\r\n\tconst availability = getItemAvailability(item, allGear);\r\n\tif (availability !== undefined) {\r\n\t\tmultiplier *= getAvailabilityCostMultiplier(availability, gearLevel);\r\n\t}\r\n\treturn baseCost * multiplier;\r\n}\r\n\r\nexport function createSavedItem(path: string, item: Item): Item {\r\n\tconst { name, count, grade, essence } = item;\r\n\tconst savedItem = { path, name, count, grade, essence };\r\n\t// do not want to save optional properties\r\n\t// grade (used, alpha, beta, delta) only applies to augmentations\r\n\tif (grade === undefined) {\r\n\t\tdelete savedItem.grade;\r\n\t}\r\n\tif (essence === undefined) {\r\n\t\tdelete savedItem.essence;\r\n\t}\r\n\tif (grade !== undefined && essence !== undefined) {\r\n\t\tsavedItem.essence = (parseFloat(essence) * getGradeEssenceMultiplier(grade as Grade)).toPrecision(2);\r\n\t}\r\n\treturn savedItem;\r\n}\r\n\r\nexport enum Grade {\r\n\tUsed = \"Used\",\r\n\tAlpha = \"Alpha\",\r\n\tBeta = \"Beta\",\r\n\tDelta = \"Delta\"\r\n}\r\n\r\nexport function getGradeCostMultipler(grade: Grade = Grade.Alpha): number {\r\n\tswitch (grade) {\r\n\t\tcase Grade.Used:\r\n\t\t\treturn 0.5;\r\n\t\tcase Grade.Alpha:\r\n\t\t\treturn 1;\r\n\t\tcase Grade.Beta:\r\n\t\t\treturn 5;\r\n\t\tcase Grade.Delta:\r\n\t\t\treturn 15;\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown augmentation grade '${grade}'`);\r\n\t}\r\n}\r\n\r\nexport function getGradeEssenceMultiplier(grade: Grade): number {\r\n\tswitch (grade) {\r\n\t\tcase Grade.Used:\r\n\t\t\treturn 1.2;\r\n\t\tcase Grade.Alpha:\r\n\t\t\treturn 1;\r\n\t\tcase Grade.Beta:\r\n\t\t\treturn 0.7;\r\n\t\tcase Grade.Delta:\r\n\t\t\treturn 0.5;\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown augmentation grade '${grade}'`);\r\n\t}\r\n}\r\n\r\nexport function isItemAvailable(availability: string, gearLevel: Level): boolean {\r\n\tconst { rating, legality } = parseAvailability(availability);\r\n\tconst baseAvailability = getBaseGearAvailability(gearLevel);\r\n\tswitch (legality) {\r\n\t\tcase \"L\":\r\n\t\t\treturn rating <= (baseAvailability + 12 + 6);\r\n\t\tcase \"R\":\r\n\t\t\treturn rating <= (baseAvailability + 6 + 6);\r\n\t\tcase \"F\":\r\n\t\t\treturn rating <= (baseAvailability + 6);\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown availability legality '${legality}'`);\r\n\t}\r\n}\r\n\r\nexport function getAvailabilityCostMultiplier(availability: string, gearLevel: Level): number {\r\n\tconst { rating, legality } = parseAvailability(availability);\r\n\r\n\tconst baseAvailability = getBaseGearAvailability(gearLevel);\r\n\r\n\tif (legality === \"F\") {\r\n\t\t// forbidden\r\n\t\tconst forbiddenAvailability = baseAvailability;\r\n\t\tif (rating <= forbiddenAvailability) {\r\n\t\t\treturn 1;\r\n\t\t} else if (rating <= forbiddenAvailability + 2) {\r\n\t\t\treturn 2;\r\n\t\t} else if (rating <= forbiddenAvailability + 4) {\r\n\t\t\treturn 5;\r\n\t\t} else if (rating <= forbiddenAvailability + 6) {\r\n\t\t\treturn 10;\r\n\t\t} else {\r\n\t\t\treturn Number.NaN;\r\n\t\t}\r\n\t} else if (legality === \"R\") {\r\n\t\t// restricted\r\n\t\tconst restrictedAvailability = baseAvailability + 6;\r\n\t\tif (rating <= restrictedAvailability) {\r\n\t\t\treturn 1;\r\n\t\t} else if (rating <= restrictedAvailability + 2) {\r\n\t\t\treturn 2;\r\n\t\t} else if (rating <= restrictedAvailability + 4) {\r\n\t\t\treturn 5;\r\n\t\t} else if (rating <= restrictedAvailability + 6) {\r\n\t\t\treturn 10;\r\n\t\t} else {\r\n\t\t\treturn Number.NaN;\r\n\t\t}\r\n\t} else {\r\n\t\t// legal\r\n\t\tconst legalAvailability = baseAvailability + 12;\r\n\t\tif (rating <= legalAvailability) {\r\n\t\t\treturn 1;\r\n\t\t} else if (rating <= legalAvailability + 2) {\r\n\t\t\treturn 2;\r\n\t\t} else if (rating <= legalAvailability + 4) {\r\n\t\t\treturn 5;\r\n\t\t} else if (rating <= legalAvailability + 6) {\r\n\t\t\treturn 10;\r\n\t\t} else {\r\n\t\t\treturn Number.NaN;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction parseAvailability(availability: string): { rating: number, legality: string } {\r\n\tif (availability === \"-\") {\r\n\t\treturn { rating: 1, legality: \"L\" };\r\n\t}\r\n\tconst result = /^\\+?(\\d+)(R|F)?$/i.exec(availability);\r\n\tif (!result) {\r\n\t\tconsole.error(`Unknown availability format '${availability}' - falling back to standard cost`);\r\n\t\treturn { rating: 1, legality: \"L\" };\r\n\t}\r\n\tconst rating = parseInt(result[1]);\r\n\tconst legality = result[2] || \"L\";\r\n\treturn { rating, legality };\r\n}\r\n\r\nexport function getGradeEssenseMultiplier(grade: Grade = Grade.Alpha): number {\r\n\tswitch (grade) {\r\n\t\tcase Grade.Used:\r\n\t\t\treturn 1.2;\r\n\t\tcase Grade.Alpha:\r\n\t\t\treturn 1;\r\n\t\tcase Grade.Beta:\r\n\t\t\treturn 0.7;\r\n\t\tcase Grade.Delta:\r\n\t\t\treturn 0.5;\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown augmentation grade '${grade}'`);\r\n\t}\r\n}\r\n\r\nexport function getCharacterGearNuyenCost(character: Character, allGear: Dictionary<Gear[]>, gearLevel: Level): number {\r\n\tlet nuyen = 0;\r\n\tfor (const item of character.gear) {\r\n\t\tnuyen += computeItemCost(item, allGear, gearLevel) * parseInt(item.count!);\r\n\t}\r\n\treturn nuyen;\r\n}\r\n\r\nexport function getCharacterGearKarmaCost(nuyen: number, nuyenLevel: Level): number {\r\n\t// Nuyen is bought at a rate of 5 Karma for ¥10000 / 20000 / 50000 depending upon nuyen level\r\n\t// All unspent nuyen is lost so round up\r\n\tconst factor = getNuyenFactor(nuyenLevel);\r\n\treturn Math.ceil(nuyen / factor) * 5;\r\n}\r\n\r\nexport function upgradeGear(originalGear: Item[]): Item[] {\r\n\tconst upgradedGear: Item[] = [];\r\n\r\n\tfor (const item of originalGear) {\r\n\t\tif (/^gear\\.weapons\\.grenades-and\\./i.test(item.path)) {\r\n\t\t\tconst match = /(?<toreplace>^gear\\.weapons\\.grenades-and\\.)(?<tokeep>.*)/i.exec(item.path);\r\n\t\t\tif (match === null) {\r\n\t\t\t\tthrow new Error(`'${item.path}' matched test regex but not exec regex`);\r\n\t\t\t}\r\n\t\t\tconst upgradedPath = `gear.weapons.grenades-and-rockets.${match.groups![\"tokeep\"]}`;\r\n\t\t\tupgradedGear.push({\r\n\t\t\t\t...item,\r\n\t\t\t\tpath: upgradedPath\r\n\t\t\t});\r\n\t\t} else if (/^Bow –/i.test(item.name)) {\r\n\t\t\tconst match = /(?<toreplace>^Bow –)(?<tokeep>.*)/i.exec(item.name);\r\n\t\t\tif (match === null) {\r\n\t\t\t\tthrow new Error(`'${item.name}' matched test regex but not exec regex`);\r\n\t\t\t}\r\n\t\t\tconst upgradedName = `Bow -${match.groups![\"tokeep\"]}`;\r\n\t\t\tupgradedGear.push({\r\n\t\t\t\t...item,\r\n\t\t\t\tname: upgradedName\r\n\t\t\t});\r\n\t\t} else if (/^Jammer –/i.test(item.name)) {\r\n\t\t\tconst match = /(?<toreplace>^Jammer –)(?<tokeep>.*)/i.exec(item.name);\r\n\t\t\tif (match === null) {\r\n\t\t\t\tthrow new Error(`'${item.name}' matched test regex but not exec regex`);\r\n\t\t\t}\r\n\t\t\tconst upgradedName = `Jammer -${match.groups![\"tokeep\"]}`;\r\n\t\t\tupgradedGear.push({\r\n\t\t\t\t...item,\r\n\t\t\t\tname: upgradedName\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tupgradedGear.push(item);\r\n\t\t}\r\n\t}\r\n\r\n\treturn upgradedGear;\r\n}","import { DEFAULT_OPTIONS } from \"../data/default-create-options\";\r\nimport { Contact } from \"./contact\";\r\nimport { CreateOptions } from \"./create-options\";\r\nimport { upgradeGear } from \"./gear\";\r\nimport { Item } from \"./item\";\r\n\r\nexport enum MetaType {\r\n    Dwarf = \"Dwarf\",\r\n    Elf = \"Elf\",\r\n    Human = \"Human\",\r\n    Ork = \"Ork\",\r\n    Troll = \"Troll\",\r\n}\r\n\r\nexport type NamedProperty = {\r\n    name: string;\r\n    rating: number;\r\n};\r\n\r\nexport type Attribute = NamedProperty;\r\n\r\nexport type Skill = NamedProperty;\r\n\r\nexport type CharacterRef = {\r\n    key: number;\r\n    name: string;\r\n    streetName: string;\r\n};\r\n\r\nexport type Character = CharacterRef & {\r\n    metaType: MetaType;\r\n    attributes: Attribute[];\r\n    qualities: Item[];\r\n    activeSkills: Skill[];\r\n    knowledgeSkills: Skill[];\r\n    languageSkills: Skill[];\r\n    contacts: Contact[];\r\n    spells: Item[];\r\n    gear: Item[];\r\n    options: CreateOptions;\r\n    professionalism: number;\r\n    modifiers: NamedProperty[];\r\n};\r\n\r\nexport function isAwakened(character: Character): boolean {\r\n    return character.qualities.find(q => q.name === \"Adept\" || q.name === \"Magician\") !== undefined;\r\n}\r\n\r\nexport function getProfessionalismCost(professionalism: number): number {\r\n    if (professionalism < 0 || professionalism > 6) {\r\n        throw new Error(`Professionalism must be witin the range [1..6] - found ${professionalism}`);\r\n    }\r\n    const sum = professionalism * (professionalism + 1) / 2;\r\n    return sum * 20;\r\n}\r\n\r\nexport function upgradeCharacter(originalCharacter: any): Character {\r\n    const upgradedCharacter = { ...originalCharacter };\r\n    if (upgradedCharacter.options === undefined) {\r\n        upgradedCharacter.options = { ...DEFAULT_OPTIONS };\r\n    }\r\n    if (upgradedCharacter.professionalism === undefined) {\r\n        upgradedCharacter.professionalism = 0;\r\n    }\r\n    if (upgradedCharacter.modifiers === undefined) {\r\n        upgradedCharacter.modifiers = [];\r\n    }\r\n    if (upgradedCharacter.gear === undefined) {\r\n        upgradedCharacter.gear = [];\r\n    } else {\r\n        upgradedCharacter.gear = upgradeGear(upgradedCharacter.gear);\r\n    }\r\n    return upgradedCharacter;\r\n}","import { Character, MetaType } from \"../model/character\";\r\nimport { DEFAULT_OPTIONS } from \"./default-create-options\";\r\n\r\nconst DEFAULT_KEY = -1;\r\nconst DEFAULT_CHARACTER: Character = {\r\n    key: DEFAULT_KEY,\r\n    name: \"\",\r\n    streetName: \"\",\r\n    metaType: MetaType.Human,\r\n    attributes: [\r\n        { name: \"Body\", rating: 3 },\r\n        { name: \"Agility\", rating: 3 },\r\n        { name: \"Reaction\", rating: 3 },\r\n        { name: \"Strength\", rating: 3 },\r\n        { name: \"Charisma\", rating: 3 },\r\n        { name: \"Intuition\", rating: 3 },\r\n        { name: \"Logic\", rating: 3 },\r\n        { name: \"Willpower\", rating: 3 },\r\n        { name: \"Edge\", rating: 3 },\r\n        { name: \"Magic\", rating: 3 },\r\n    ],\r\n    qualities: [],\r\n    activeSkills: [],\r\n    knowledgeSkills: [],\r\n    languageSkills: [],\r\n    contacts: [],\r\n    spells: [],\r\n    gear: [],\r\n    options: { ...DEFAULT_OPTIONS },\r\n    professionalism: 0,\r\n    modifiers: []\r\n};\r\n\r\nexport function getDefaultCharacter(): Character {\r\n    return { ...DEFAULT_CHARACTER };\r\n}\r\n\r\nexport function isDefaultCharacter(character: Character): boolean {\r\n    return JSON.stringify(DEFAULT_CHARACTER) === JSON.stringify(character);\r\n}\r\n\r\nexport function hasDefaultKey(character: Character): boolean {\r\n    return character.key === DEFAULT_KEY;\r\n}","import { Character, CharacterRef, upgradeCharacter } from \"./model/character\";\r\nimport { CustomItem } from \"./model/custom-item\";\r\nimport { getDefaultCharacter } from \"./data/default-character\";\r\nimport { Dictionary } from \"./model/dictionary\";\r\n\r\nconst CHARACTER_KEY = \"character\";\r\n\r\nfunction createCharacterKey(key: number): string {\r\n    return `${CHARACTER_KEY}:${key}`;\r\n}\r\n\r\nexport function loadCharacters(): CharacterRef[] {\r\n    const characters: CharacterRef[] = [getDefaultCharacter()];\r\n    for (let i = 0; i < localStorage.length; i++) {\r\n        const key = localStorage.key(i);\r\n        if (key === null) {\r\n            continue;\r\n        }\r\n        // charater:1337\r\n        if (/^character:\\d+$/i.test(key)) {\r\n            const characterJSON = localStorage.getItem(key);\r\n            if (characterJSON) {\r\n                const { key, name, streetName } = JSON.parse(characterJSON);\r\n                characters.push({ key, name, streetName });\r\n            }\r\n        }\r\n    }\r\n    characters.sort((a, b) => a.key - b.key);\r\n    return characters;\r\n}\r\n\r\nexport function loadCharacter(key: number): Character | undefined {\r\n    if (key === -1) {\r\n        return getDefaultCharacter();\r\n    }\r\n    const character = localStorage.getItem(createCharacterKey(key));\r\n    if (character) {\r\n        return upgradeCharacter(JSON.parse(character));\r\n    } else {\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport function saveCharacter(character: Character) {\r\n    localStorage.setItem(createCharacterKey(character.key), JSON.stringify(character));\r\n}\r\n\r\nexport function clearCharacter(character: Character) {\r\n    localStorage.removeItem(createCharacterKey(character.key));\r\n}\r\n\r\nconst SELECTED_CHARACTER_KEY = \"selected-character\";\r\n\r\nexport function loadSelectedCharacter(): number {\r\n    const selectedCharacter = localStorage.getItem(SELECTED_CHARACTER_KEY);\r\n    if (selectedCharacter) {\r\n        return parseInt(selectedCharacter);\r\n    } else {\r\n        return -1;\r\n    }\r\n}\r\n\r\nexport function saveSelectedCharacter(key: number) {\r\n    localStorage.setItem(SELECTED_CHARACTER_KEY, key.toString());\r\n}\r\n\r\nexport function clearSelectedCharacter() {\r\n    localStorage.removeItem(SELECTED_CHARACTER_KEY);\r\n}\r\n\r\nconst CUSTOM_ITEM_KEY = \"custom-item\";\r\n\r\nfunction createCustomItemKey(path: string, name: string): string {\r\n    return `${CUSTOM_ITEM_KEY}:${path}.${name}}`;\r\n}\r\n\r\nexport function loadCustomItems(): Dictionary<CustomItem> {\r\n    const customItems: Dictionary<CustomItem> = {};\r\n    for (let i = 0; i < localStorage.length; i++) {\r\n        const key = localStorage.key(i);\r\n        if (key === null) {\r\n            // not a custom item\r\n            continue;\r\n        }\r\n        /*\r\n        custom-item:category.group.name => [\r\n            \"custom-item:category.group.name\",\r\n            \"category.group\",\r\n            \"name\"\r\n        ]\r\n        */\r\n        const result = /^custom-item:(?:((?:(?:\\w+)(?:\\.)?)*)\\.)?(\\w+)$/i.exec(key);\r\n        if (result) {\r\n            const path = result[1];\r\n            const itemJSON = localStorage.getItem(key);\r\n            if (itemJSON) {\r\n                const item = JSON.parse(itemJSON);\r\n                customItems[path] = item;\r\n            }\r\n        }\r\n    }\r\n    return customItems;\r\n}\r\n\r\nexport function saveCustomItem(path: string, item: CustomItem) {\r\n    const key = createCustomItemKey(path, item.Name);\r\n    localStorage.setItem(key, JSON.stringify(item));\r\n}\r\n\r\nexport function clearCustomItem(path: string, item: CustomItem) {\r\n    const key = createCustomItemKey(path, item.Name);\r\n    localStorage.removeItem(key);\r\n}","import { MetaType } from \"./character\";\r\n\r\nexport function getMetaTypeCost(metaType: MetaType): number {\r\n    switch (metaType) {\r\n        case MetaType.Human:\r\n            return 0;\r\n        case MetaType.Ork:\r\n            return 30;\r\n        case MetaType.Dwarf:\r\n            return 30;\r\n        case MetaType.Elf:\r\n            return 40;\r\n        case MetaType.Troll:\r\n            return 60;\r\n        default:\r\n            throw new Error(`Unknown meta-type '${metaType}'`);\r\n    }\r\n}","import { Character } from \"./character\";\r\n\r\nexport function getModifier(character: Character, name: string): number {\r\n\tconst modifier = character.modifiers.find(m => m.name === name);\r\n\tif (modifier) {\r\n\t\treturn modifier.rating;\r\n\t}\r\n\treturn 0;\r\n}","import { MetaType, Character, isAwakened } from \"./character\";\r\nimport { getModifier } from \"./modifier\";\r\n\r\nexport function getBaseAttributeRating(character: Character, name: string): number {\r\n    const attribute = character.attributes.find(a => a.name === name);\r\n    if (!attribute) {\r\n        throw new Error(`Could not find attribute with name '${name}'`);\r\n    }\r\n    return attribute.rating\r\n}\r\n\r\nexport function getNaturalAttributeRating(character: Character, name: string): number {\r\n    const baseRating = getBaseAttributeRating(character, name);\r\n    const metaTypeModifier = getAttributeMetaTypeModifier(character.metaType, name);\r\n    \r\n    return baseRating + metaTypeModifier;\r\n}\r\n\r\nexport function getEffectiveAttributeRating(character: Character, name: string): number {\r\n    const naturalRating = getNaturalAttributeRating(character, name);\r\n    const modifier = getModifier(character, name);\r\n\r\n    return naturalRating + modifier;\r\n}\r\n\r\nexport function getAttributeMetaTypeModifier(metaType: MetaType, name: string): number {\r\n    switch (metaType) {\r\n        case MetaType.Dwarf:\r\n            switch (name) {\r\n                case \"Body\":\r\n                    return 1;\r\n                case \"Reaction\":\r\n                    return -1;\r\n                case \"Strength\":\r\n                    return 2;\r\n                case \"Willpower\":\r\n                    return 1;\r\n            }\r\n            break;\r\n        case MetaType.Elf:\r\n            switch (name) {\r\n                case \"Agility\":\r\n                    return 1;\r\n                case \"Charisma\":\r\n                    return 2;\r\n            }\r\n            break;\r\n        case MetaType.Human:\r\n            break;\r\n        case MetaType.Ork:\r\n            switch (name) {\r\n                case \"Body\":\r\n                    return 3;\r\n                case \"Strength\":\r\n                    return 2;\r\n                case \"Charisma\":\r\n                    return -1;\r\n                case \"Logic\":\r\n                    return -1;\r\n            }\r\n            break;\r\n        case MetaType.Troll:\r\n            switch (name) {\r\n                case \"Body\":\r\n                    return 4;\r\n                case \"Agility\":\r\n                    return -1;\r\n                case \"Strength\":\r\n                    return 4;\r\n                case \"Charisma\":\r\n                    return -2;\r\n                case \"Intuition\":\r\n                    return -1;\r\n                case \"Logic\":\r\n                    return -1;\r\n            }\r\n            break;\r\n    }\r\n    return 0;\r\n}\r\n\r\nexport function getAttributeCost(rating: number): number {\r\n    switch (rating) {\r\n        case 1:\r\n            return -25;\r\n        case 2:\r\n            return -15;\r\n        case 3:\r\n            return 0;\r\n        case 4:\r\n            return 20;\r\n        case 5:\r\n            return 45;\r\n        case 6:\r\n            return 75;\r\n        case 7:\r\n            return 110;\r\n        default:\r\n            throw new Error(`Unsupported attribute rating ${rating}`);\r\n    }\r\n}\r\n\r\nexport function getAttributesCost(character: Character): number {\r\n    const awakened = isAwakened(character);\r\n    let cost = 0;\r\n    for (const attribute of character.attributes) {\r\n        if (attribute.name === \"Magic\" && !awakened) {\r\n            // character could be awakened, have their Magic attribute, then be mundane\r\n            // ignore any Magic changes in this case\r\n            continue;\r\n        }\r\n        cost += getAttributeCost(attribute.rating);\r\n    }\r\n    return cost;\r\n}","import { Skill, Character } from \"./character\";\r\nimport { CustomItem } from \"./custom-item\";\r\n\r\nexport type Skills = {\r\n    active: CustomItem[];\r\n    knowledge: CustomItem[];\r\n    language: CustomItem[];\r\n};\r\n\r\nexport function getActiveSkillCost(rating: number): number {\r\n    switch (rating) {\r\n        case -1:\r\n            return 0;\r\n        case 1:\r\n            return 5;\r\n        case 3:\r\n            return 15;\r\n        case 5:\r\n            return 30;\r\n        case 7:\r\n            return 60;\r\n        default:\r\n            throw new Error(`Unsupported skill rating ${rating}`);\r\n    }\r\n}\r\n\r\nexport function getActiveSkillsCost(activeSkills: Skill[]): number {\r\n    return activeSkills.map(s => getActiveSkillCost(s.rating)).reduce((a, b) => a + b, 0);\r\n}\r\n\r\nexport function getKnowledgeSkillCost(rating: number): number {\r\n    switch (rating) {\r\n        case -1:\r\n            return 0;\r\n        case 1:\r\n            return 2;\r\n        case 3:\r\n            return 7;\r\n        case 5:\r\n            return 15;\r\n        case 7:\r\n            return 30;\r\n        default:\r\n            throw new Error(`Unsupported skill rating ${rating}`);\r\n    }\r\n}\r\n\r\nexport function getKnowledgeSkillsCost(knowledgeSkills: Skill[]): number {\r\n    return knowledgeSkills.map(s => getKnowledgeSkillCost(s.rating)).reduce((a, b) => a + b, 0);\r\n}\r\n\r\nexport function getFreeKnowledgeSkillPoints(character: Character): number {\r\n    const intuition = character.attributes.find(a => a.name === \"Intuition\");\r\n    if (intuition === undefined) {\r\n        throw new Error(`Character '${character.streetName}' has no attribute 'Intuition'`);\r\n    }\r\n    const logic = character.attributes.find(a => a.name === \"Logic\");\r\n    if (logic === undefined) {\r\n        throw new Error(`Character '${character.streetName}' has no attribute 'Logic'`);\r\n    }\r\n    return (intuition.rating + logic.rating) * 10;\r\n}\r\n\r\nexport function getSkillsCost(character: Character): number {\r\n    const activeSkillCost = getActiveSkillsCost(character.activeSkills);\r\n    const knowledgeSkillCost = getKnowledgeSkillsCost(character.knowledgeSkills);\r\n    // exclude native language\r\n    const languageSkillCost = getKnowledgeSkillsCost(character.languageSkills);\r\n    const freeKnowledgePoints = getFreeKnowledgeSkillPoints(character);\r\n    return activeSkillCost + Math.max(knowledgeSkillCost + languageSkillCost - freeKnowledgePoints, 0);\r\n}","import { CustomItem } from \"./custom-item\";\r\nimport { Item } from \"./item\";\r\nimport { Dictionary, transformAllItems, getItemCost } from \"./dictionary\";\r\nimport { Character } from \"./character\";\r\n\r\nexport type Quality = {\r\n    cost: string;\r\n} & Item;\r\n\r\nexport const qualitiesRoot = \"qualities\";\r\n\r\nexport function transformAllQualities(allData: any): Dictionary<Quality[]> {\r\n    const allQualities: Dictionary<Quality[]> = {};\r\n    transformAllItems(qualitiesRoot, allData, allQualities, transformQualityValues);\r\n    return allQualities;\r\n}\r\n\r\nfunction transformQualityValues(path: string, values: any[]): Quality[] {\r\n    const qualities: Quality[] = [];\r\n    for (const value of values) {\r\n        const name = value[\"Name\"];\r\n        const cost = value[\"Cost\"];\r\n        qualities.push({ path, name, cost });\r\n    }\r\n    return qualities;\r\n}\r\n\r\nexport type Qualities = {\r\n    positive: string[];\r\n    negative: string[]\r\n};\r\n\r\nexport type AllQualities = {\r\n    positive: CustomItem[];\r\n    negative: CustomItem[];\r\n}\r\n\r\nexport function getQualitiesCost(selectedQualities: string[], allQualities: CustomItem[]): number {\r\n    let cost = 0;\r\n    for (const selected of selectedQualities) {\r\n        const quality = allQualities.find(q => q.Name === selected);\r\n        if (!quality) {\r\n            throw new Error(`Could not find quality with name '${selected}' in list '${JSON.stringify(allQualities)}'`);\r\n        }\r\n        cost += parseInt(quality.Cost!);\r\n    }\r\n    return cost;\r\n}\r\n\r\nexport function getAllQualitiesCost(selectedQualities: { positive: string[], negative: string[] }, allQualities: AllQualities): number {\r\n    let cost = 0;\r\n    cost += getQualitiesCost(selectedQualities.positive, allQualities.positive);\r\n    cost += getQualitiesCost(selectedQualities.negative, allQualities.negative);\r\n    return cost;\r\n}\r\n\r\nexport function getCharacterQualitiesCost(character: Character, allQualities: Dictionary<Quality[]>): number {\r\n    let cost = 0;\r\n    for (const quality of character.qualities) {\r\n        cost += getItemCost(quality, allQualities);\r\n    }\r\n    return cost;\r\n}","import { Reducer } from \"react\";\r\nimport { State } from \"./model/state\";\r\nimport { getDefaultCharacter, hasDefaultKey } from \"./data/default-character\";\r\nimport { Character, CharacterRef, upgradeCharacter } from \"./model/character\";\r\nimport { saveCharacter, clearCharacter, loadCharacter, saveCustomItem } from \"./persistance\";\r\nimport { getDefaultKarma, getCharacterKarma } from \"./model/karma\";\r\nimport { Quality } from \"./model/quality\";\r\nimport { Skills } from \"./model/skills\";\r\nimport { CustomItem } from \"./model/custom-item\";\r\nimport { Spell } from \"./model/magic\";\r\nimport { Gear } from \"./model/gear\";\r\nimport { Dictionary } from \"./model/dictionary\";\r\nimport { DEFAULT_OPTIONS } from \"./data/default-create-options\";\r\nimport { CreateOptions, getStartingKarma } from \"./model/create-options\";\r\n\r\nexport enum ActionType {\r\n    UpdateCharacter = \"updateCharacter\",\r\n    ImportCharacter = \"importCharacter\",\r\n    ClearCharacter = \"clearCharacter\",\r\n    SelectCharacter = \"selectCharacter\",\r\n    LoadQualities = \"loadQualities\",\r\n    LoadSkills = \"loadSkills\",\r\n    LoadContacts = \"loadContacts\",\r\n    LoadSpells = \"loadSpells\",\r\n    LoadGear = \"loadGear\",\r\n    LoadCustomItems = \"loadCustomItems\",\r\n    AddCustomItem = \"addCustomItem\",\r\n    UpdateCreateOptions = \"updateCreateOptions\"\r\n}\r\n\r\nexport type Action = {\r\n    type: ActionType;\r\n    data?: any;\r\n};\r\n\r\nexport type UpdateCharacterData = Character;\r\nexport type ImportCharacterData = Character;\r\nexport type SelectCharacterData = CharacterRef;\r\nexport type LoadQualitiesData = Dictionary<Quality[]>;\r\nexport type LoadSkillsData = Skills;\r\nexport type LoadContactsData = CustomItem[];\r\nexport type LoadSpellsData = Dictionary<Spell[]>;\r\nexport type LoadGearData = Dictionary<Gear[]>;\r\nexport type LoadCustomItemsData = Dictionary<CustomItem>;\r\nexport type AddCustomItemData = { path: string, item: CustomItem };\r\nexport type UpdateCreateOptionsData = CreateOptions;\r\n\r\nexport const reducer: Reducer<State, Action> = (state: State, action: Action): State => {\r\n    switch (action.type) {\r\n        case ActionType.UpdateCharacter: {\r\n            const selectedCharacter = action.data as UpdateCharacterData;\r\n            const characters = handleCharacterUpdate(selectedCharacter, state);\r\n            const karma = getCharacterKarma(state.karma, selectedCharacter, state);\r\n            // the list of characters is not saved separatly - it is constructed from all the available characters\r\n            saveCharacter(selectedCharacter);\r\n            return { ...state, selectedCharacter, characters, karma };\r\n        }\r\n        case ActionType.ImportCharacter: {\r\n            const selectedCharacter = action.data as ImportCharacterData;\r\n            saveCharacter(upgradeCharacter(selectedCharacter));\r\n            const characters = handleCharacterUpdate(selectedCharacter, state);\r\n            const karma = getCharacterKarma(state.karma, selectedCharacter, state)\r\n            return { ...state, selectedCharacter, characters, karma };\r\n        }\r\n        case ActionType.ClearCharacter: {\r\n            clearCharacter(state.selectedCharacter);\r\n            const characters = state.characters\r\n                .filter(c => c.key !== state.selectedCharacter.key)\r\n                .map(({ key, name, streetName }) => ({ key, name, streetName }));\r\n            const selectedCharacter = getDefaultCharacter();\r\n            const karma = getDefaultKarma(selectedCharacter.options.karmaLevel);\r\n            return { ...state, characters, selectedCharacter, karma };\r\n        }\r\n        case ActionType.SelectCharacter: {\r\n            const characterRef = action.data as SelectCharacterData;\r\n            // Loading the app with a saved character can throw an error calculating karma cost, as the available data (qualities, etc) have not been loaded yet\r\n            // saveSelectedCharacter(characterRef.key);\r\n            const selectedCharacter = loadCharacter(characterRef.key);\r\n            if (!selectedCharacter) {\r\n                throw new Error(`Could not find saved character ${JSON.stringify(characterRef)}`);\r\n            }\r\n            const karma = getCharacterKarma(state.karma, selectedCharacter, state);\r\n            return { ...state, selectedCharacter, karma};\r\n        }\r\n        case ActionType.LoadQualities: {\r\n            const allQualities = action.data as LoadQualitiesData;\r\n            return { ...state, allQualities };\r\n        }\r\n        case ActionType.LoadSkills: {\r\n            const allSkills = action.data as LoadSkillsData;\r\n            return { ...state, allSkills };\r\n        }\r\n        case ActionType.LoadContacts: {\r\n            const allContacts = action.data as LoadContactsData;\r\n            return { ...state, allContacts}\r\n        }\r\n        case ActionType.LoadGear: {\r\n            const allGear = action.data as LoadGearData;\r\n            return { ...state, allGear };\r\n        }\r\n        case ActionType.LoadSpells: {\r\n            const allSpells = action.data as LoadSpellsData;\r\n            return { ...state, allSpells };\r\n        }\r\n        case ActionType.LoadCustomItems: {\r\n            const customItems = action.data as LoadCustomItemsData;\r\n            return { ...state, customItems };\r\n        }\r\n        case ActionType.AddCustomItem: {\r\n            const newItem = action.data as AddCustomItemData;\r\n            // persist item in local storage for later\r\n            saveCustomItem(newItem.path, newItem.item);\r\n            const customItems = { ...state.customItems };\r\n            customItems[newItem.path] = newItem.item;\r\n            return { ...state, customItems };\r\n        }\r\n        case ActionType.UpdateCreateOptions: {\r\n            const newOptions = action.data as UpdateCreateOptionsData;\r\n            const selectedCharacter = { ...state.selectedCharacter, options: newOptions };\r\n            const totalKarma = getStartingKarma(newOptions.karmaLevel);\r\n            const karma = getCharacterKarma({ ...state.karma, total: totalKarma }, selectedCharacter, state);\r\n            return { ...state, selectedCharacter, karma};\r\n        }\r\n    }\r\n    return { ...state };\r\n}\r\n\r\nexport const INITIAL_STATE: State = {\r\n    characters: [],\r\n    selectedCharacter: getDefaultCharacter(),\r\n    karma: getDefaultKarma(DEFAULT_OPTIONS.karmaLevel),\r\n    allQualities: { positive: [], negative: [] },\r\n    allSkills: { active: [], knowledge: [], language: [] },\r\n    allContacts: [],\r\n    allSpells: { combat: [], detection: [], health: [], illusion: [], manipulation: [] },\r\n    allGear: {},\r\n    customItems: {}\r\n};\r\n\r\nfunction handleCharacterUpdate(character: Character, state: State): CharacterRef[] {\r\n    const characters = [...state.characters];\r\n    let index: number;\r\n    if (hasDefaultKey(character)) {\r\n        // character has not been saved yet\r\n        character.key = Date.now();\r\n        index = -1;\r\n    } else {\r\n        index = characters.findIndex(c => c.key === character.key);\r\n    }\r\n    const { key, name, streetName } = character;\r\n    if (index === -1) {\r\n        characters.push({ key, name, streetName });\r\n    } else {\r\n        characters[index] = { key, name, streetName };\r\n    }\r\n    return characters;\r\n}","import { Character, getProfessionalismCost } from \"./character\";\r\nimport { getMetaTypeCost } from \"./meta-type\";\r\nimport { getAttributesCost } from \"./attributes\";\r\nimport { getSkillsCost } from \"./skills\";\r\nimport { getCharacterQualitiesCost } from \"./quality\";\r\nimport { State } from \"./state\";\r\nimport { getCharacterGearKarmaCost, getCharacterGearNuyenCost } from \"./gear\";\r\nimport { Level } from \"./create-options\";\r\n\r\nexport type Karma = {\r\n    total: number;\r\n    spent: number;\r\n    available: number;\r\n};\r\n\r\nexport function getDefaultKarma(karmaLevel: Level): Karma {\r\n    let total: number;\r\n    switch (karmaLevel) {\r\n        case Level.Street:\r\n            total = 400;\r\n            break;\r\n        case Level.Normal:\r\n            total = 500;\r\n            break;\r\n        case Level.Elite:\r\n            total = 700;\r\n            break;\r\n    }\r\n    const spent = 0;\r\n    const available = total;\r\n    return {\r\n        total,\r\n        spent,\r\n        available\r\n    };\r\n}\r\n\r\nexport function getCharacterKarma(karma: Karma, character: Character, state: State): Karma {\r\n    const { total } = karma;\r\n    let spent = 0;\r\n    spent += getMetaTypeCost(character.metaType);\r\n    spent += getCharacterQualitiesCost(character, state.allQualities);\r\n    spent += getAttributesCost(character);\r\n    spent += getSkillsCost(character);\r\n    spent += getCharacterGearKarmaCost(getCharacterGearNuyenCost(character, state.allGear, character.options.gearLevel), character.options.nuyenLevel);\r\n    spent += getProfessionalismCost(character.professionalism);\r\n    const available = total - spent;\r\n    return { total, spent, available };\r\n}","import { createContext, Dispatch, useContext } from \"react\";\r\nimport { State } from \"./model/state\";\r\nimport { Action, INITIAL_STATE } from \"./reducer\";\r\n\r\nexport const DispatchContext = createContext<Dispatch<Action>>(() => {});\r\n\r\nexport const useDispatch = (): Dispatch<Action> => {\r\n    return useContext(DispatchContext);\r\n}\r\n\r\nexport const StateContext = createContext<State>(INITIAL_STATE);\r\n\r\nexport const useGlobalState = <K extends keyof State>(property: K) => {\r\n    const state = useContext(StateContext);\r\n    return state[property];\r\n}","import React, { FC } from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { CharacterRef } from \"../model/character\";\r\n\r\n\r\ntype Props = {\r\n    character: CharacterRef;\r\n};\r\n\r\nconst CharacterName: FC<Props> = (props: Props) => {\r\n    const { character } = props;\r\n    const { name, streetName } = character;\r\n    if (!name && !streetName) {\r\n        return <Typography>= New Character =</Typography>;\r\n    }\r\n    if (!streetName) {\r\n        return <Typography>{name}</Typography>\r\n    }\r\n    if (!name) {\r\n        return <Typography>{streetName}</Typography>\r\n    }\r\n    return <Typography>{name} aka {streetName}</Typography>\r\n};\r\n\r\nexport default CharacterName;","import React, { FC } from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\r\nimport { useGlobalState, useDispatch } from \"../context\";\r\nimport CharacterName from \"./CharacterName\";\r\nimport { CharacterRef } from \"../model/character\";\r\nimport { ActionType, SelectCharacterData } from \"../reducer\";\r\n\r\nconst SelectCharacter: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const characters = useGlobalState(\"characters\");\r\n\r\n    const onCharacterClick = (character: CharacterRef) => {\r\n        const data: SelectCharacterData = character;\r\n        dispatch({ type: ActionType.SelectCharacter, data });\r\n    };\r\n    return (\r\n        <List subheader={\r\n            <ListSubheader>Characters</ListSubheader>\r\n            }\r\n            >\r\n            {\r\n                characters.map(c => (\r\n                    <ListItem key={c.key} onClick={() => onCharacterClick(c)}>\r\n                        <CharacterName character={c} />\r\n                    </ListItem>\r\n                ))\r\n            }\r\n        </List>\r\n    )\r\n};\r\n\r\nexport default SelectCharacter;","import { MetaType } from \"../model/character\";\r\n\r\nexport const ALL_META_TYPES: MetaType[] = [\r\n    MetaType.Human,\r\n    MetaType.Ork,\r\n    MetaType.Dwarf,\r\n    MetaType.Elf,\r\n    MetaType.Troll\r\n];\r\n","import React, { FC } from \"react\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport { makeStyles, Badge } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n\troot: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"row\",\r\n\t\tflexWrap: \"wrap\",\r\n\t\tjustifyContent: \"flex-start\"\r\n\t},\r\n\tchip: {\r\n\t\tmarginRight: 10,\r\n\t\tmarginBottom: 10,\r\n\t}\r\n});\r\n\r\ntype Props = {\r\n\tvalues: any[];\r\n\tcreateChipLabel: (value: any) => string;\r\n\tonDeleteValue: (value: any) => void;\r\n};\r\nconst ChipCollection: FC<Props> = (props: Props) => {\r\n\tconst { values, createChipLabel, onDeleteValue } = props;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\treturn (\r\n\t\t<div className={classes.root}>\r\n\t\t\t{\r\n\t\t\t\tvalues.map(v =>\r\n\t\t\t\t\t<Badge key={v.name} badgeContent={v.count} invisible={v.count===\"1\"} color=\"secondary\" max={99} anchorOrigin={{ vertical: \"top\", horizontal: \"left\" }}>\r\n\t\t\t\t\t\t<Chip\r\n\t\t\t\t\t\t\tclassName={classes.chip}\r\n\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\tlabel={createChipLabel(v)}\r\n\t\t\t\t\t\t\tonDelete={() => onDeleteValue(v)}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Badge>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ChipCollection;","import { Dictionary } from \"./dictionary\";\r\n\r\nexport type Item = {\r\n\tpath: string;\r\n\tname: string;\r\n} & Dictionary<string | undefined>;\r\n\r\nexport function getItemSubset(items: Item[], parentPath: string): Item[] {\r\n\tconst subItems: Item[] = [];\r\n\tfor (const item of items) {\r\n\t\tif (item.path === parentPath || item.path.startsWith(`${parentPath}.`)) {\r\n\t\t\tsubItems.push(item);\r\n\t\t}\r\n\t}\r\n\treturn subItems;\r\n}","import React, { FC } from \"react\";\r\nimport { Grade } from \"../model/gear\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n\troot: {\r\n\t\tminWidth: 78,\r\n\t\tmaxWidth: 78,\r\n\t\twidth: 78,\r\n\t},\r\n})\r\ntype Props = {\r\n\tdisabled: boolean;\r\n\tgrade: Grade;\r\n\tonUpdateGrade: (newGrade: Grade) => void;\r\n};\r\nconst GradeButton: FC<Props> = (props: Props) => {\r\n\tconst { disabled, grade, onUpdateGrade } = props;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\treturn (\r\n\t\t<Button\r\n\t\t\tclassName={classes.root}\r\n\t\t\tdisabled={disabled}\r\n\t\t\tvariant=\"outlined\"\r\n\t\t\tonClick={() => onUpdateGrade(nextGrade(grade))}\r\n\t\t>\r\n\t\t\t{grade}\r\n\t\t</Button>\r\n\t);\r\n};\r\n\r\nexport default GradeButton;\r\n\r\nfunction nextGrade(grade: Grade): Grade {\r\n\tswitch (grade)\t {\r\n\t\tcase Grade.Used:\r\n\t\t\treturn Grade.Alpha;\r\n\t\tcase Grade.Alpha:\r\n\t\t\treturn Grade.Beta;\r\n\t\tcase Grade.Beta:\r\n\t\t\treturn Grade.Delta;\r\n\t\tcase Grade.Delta:\r\n\t\t\treturn Grade.Used;\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown augmentation grade '${grade}'`);\r\n\t}\r\n}","import React, { FC } from \"react\";\r\nimport { Item } from \"../model/item\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { Grade, gearRoot, isItemAvailable } from \"../model/gear\";\r\nimport GradeButton from \"./GradeButton\";\r\nimport { useGlobalState } from \"../context\";\r\n\r\nconst useStyles = makeStyles({\r\n\troot: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"row\",\r\n\t\tpadding: 10,\r\n\t\tmargin: 10,\r\n\t},\r\n\tname: {\r\n\t\twidth: 500,\r\n\t\ttextAlign: \"left\",\r\n\t},\r\n\tavailability: {\r\n\t\twidth: 100,\r\n\t\ttextAlign: \"center\",\r\n\t},\r\n\tcost: {\r\n\t\twidth: 200,\r\n\t\ttextAlign: \"center\",\r\n\t},\r\n});\r\n\r\ntype Props = {\r\n\titem: Item;\r\n\tcreateCostLabel: (item: Item) => string;\r\n\tonUpdateItem: (newItem: Item) => void;\r\n};\r\nconst ItemPickerCard: FC<Props> = (props: Props) => {\r\n\tconst { item, createCostLabel, onUpdateItem } = props;\r\n\tconst options = useGlobalState(\"selectedCharacter\").options;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tconst count = parseInt(item.count!);\r\n\tconst costLabel = createCostLabel(item);\r\n\r\n\tconst hasAny = count > 0;\r\n\r\n\tconst allowMultiple = item.path.startsWith(gearRoot);\r\n\tconst includeAvailability = item.path.startsWith(gearRoot);\r\n\tconst available = includeAvailability ? isItemAvailable(item.availability!, options.gearLevel) : true;\r\n\tconst includeGrade = item.path.startsWith(`${gearRoot}.augmentations`);\r\n\r\n\tconst grade = item.grade as Grade || Grade.Alpha;\r\n\r\n\tconst handleAdd = () => {\r\n\t\tonUpdateItem({ ...item, count: (count + 1).toString() });\r\n\t};\r\n\r\n\tconst handleRemove = () => {\r\n\t\tonUpdateItem({ ...item, count: Math.max(count - 1, 0).toString() });\r\n\t};\r\n\r\n\tconst handleGradeToggle = (newGrade: Grade) => {\r\n\t\tconst newItem: Item = { ...item, grade: newGrade };\r\n\t\t// alpha is the default for cyber/bio and we don't want to 'dirty' all gear items with unnecessary grade properties\r\n\t\t// if it is never toggled it will never get added in the first place, so do not need to consider grade in the add/remove handlers\r\n\t\tif (newGrade === Grade.Alpha) {\r\n\t\t\tdelete newItem.grade;\r\n\t\t}\r\n\t\tonUpdateItem(newItem);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Paper\r\n\t\t\tclassName={classes.root}\r\n\t\t\televation={3}\r\n\t\t>\r\n\t\t\t<Typography className={classes.name} style={{lineHeight: \"36px\"}}>{item.name}</Typography>\r\n\t\t\t{ includeAvailability ? <Typography className={classes.availability} style={{lineHeight: \"36px\"}}>{item.availability}</Typography> : null }\r\n\t\t\t<span className={classes.cost}>\r\n\t\t\t\t<Badge badgeContent={count} color=\"secondary\">\r\n\t\t\t\t\t<Typography style={{lineHeight: \"36px\"}}>({costLabel})</Typography>\r\n\t\t\t\t</Badge>\r\n\t\t\t</span>\r\n\t\t\t<ButtonGroup>\r\n\t\t\t\t{ allowMultiple || !hasAny ? <Button onClick={handleAdd} disabled={!available}><AddIcon /></Button> : null }\r\n\t\t\t\t{ allowMultiple || hasAny ? <Button onClick={handleRemove} disabled={!available}><RemoveIcon /></Button> : null }\r\n\t\t\t\t{ includeGrade ? <GradeButton disabled={count === 0} grade={grade} onUpdateGrade={handleGradeToggle} /> : null }\r\n\t\t\t</ButtonGroup>\r\n\t\t</Paper>\r\n\t);\r\n};\r\n\r\nexport default ItemPickerCard;","import React, { FC, Fragment } from \"react\";\r\nimport { Item } from \"../model/item\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport ItemPickerCard from \"./ItemPickerCard\";\r\n\r\nconst useStyles = makeStyles({\r\n\titems: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"column\",\r\n\t}\r\n});\r\n\r\ntype Props = {\r\n\tlabel: string;\r\n\titems: Item[];\r\n\tcreateCostLabel: (item: Item) => string;\r\n\tonUpdateItems: (newItems: Item[]) => void;\r\n};\r\nconst ItemPickerSection: FC<Props> = (props: Props) => {\r\n\tconst { items, createCostLabel, onUpdateItems } = props;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tconst handleUpdate = (item: Item) => {\r\n\t\tconst newItems = [...items];\r\n\t\tconst index = items.findIndex(i => i.name === item.name);\r\n\t\tnewItems[index] = item;\r\n\t\tonUpdateItems(newItems);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<Divider />\r\n\t\t\t<div className={classes.items}>\r\n\t\t\t\t{\r\n\t\t\t\t\titems\r\n\t\t\t\t\t?\r\n\t\t\t\t\titems.map(i =>\r\n\t\t\t\t\t\t<ItemPickerCard\r\n\t\t\t\t\t\t\titem={i}\r\n\t\t\t\t\t\t\tcreateCostLabel={createCostLabel}\r\n\t\t\t\t\t\t\tonUpdateItem={handleUpdate}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)\r\n\t\t\t\t\t:\r\n\t\t\t\t\t<div>No items</div>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default ItemPickerSection;","import React, { FC, useState, ChangeEvent } from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport { Item } from \"../model/item\";\r\nimport { Dictionary } from \"../model/dictionary\";\r\nimport { sentenceCase } from \"change-case\";\r\nimport ItemPickerSection from \"./ItemPickerSection\";\r\n\r\n\r\ntype Props = {\r\n\topen: boolean;\r\n\tonClose: () => void;\r\n\ttitle: string;\r\n\tallItems: Dictionary<Item[]>;\r\n\tcreateCostLabel: (item: Item) => string;\r\n\tonUpdateAllItems: (newItems: Dictionary<Item[]>) => void;\r\n};\r\nconst ItemPickerDialog: FC<Props> = (props: Props) => {\r\n\tconst { open, onClose, title, allItems, createCostLabel, onUpdateAllItems } = props;\r\n\r\n\tconst allPaths = Object.keys(allItems);\r\n\r\n\tconst paths = [...allPaths];\r\n\r\n\tconst pathToLabel = new Map<string,string>();\r\n\tfor (const path of paths) {\r\n\t\tconst components = path.split(\".\");\r\n\t\tconst finalComponent = components[components.length - 1];\r\n\t\tconst label = sentenceCase(finalComponent);\r\n\t\tpathToLabel.set(path, label);\r\n\t}\r\n\r\n\tconst [group, setGroup] = useState(paths[0]);\r\n\r\n\t// once the dialog is rendered the state is 'remembered' for next use which could be different data\r\n\tif (paths.find(p => p === group) === undefined) {\r\n\t\tsetGroup(paths[0]);\r\n\t}\r\n\r\n\tconst handleGroupChange = (event: ChangeEvent<any>) => {\r\n\t\tsetGroup(event.target.value);\r\n\t};\r\n\r\n\tconst handleUpdateItems = (subItems: Item[]) => {\r\n\t\tconst newAllItems: Dictionary<Item[]> = { ...allItems };\r\n\t\tnewAllItems[group] = subItems;\r\n\t\tonUpdateAllItems(newAllItems);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Dialog open={open} onClose={onClose}>\r\n\t\t\t<DialogTitle>{title}</DialogTitle>\r\n\t\t\t<DialogContent>\r\n\t\t\t\t{\r\n\t\t\t\t\tpaths.length > 1\r\n\t\t\t\t\t?\r\n\t\t\t\t\t<Select\r\n\t\t\t\t\t\tid=\"group\"\r\n\t\t\t\t\t\tvalue={group}\r\n\t\t\t\t\t\tdisplayEmpty\r\n\t\t\t\t\t\tonChange={handleGroupChange}\r\n\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpaths.map(p => (\r\n\t\t\t\t\t\t\t\t<MenuItem\r\n\t\t\t\t\t\t\t\t\tkey={p}\r\n\t\t\t\t\t\t\t\t\tvalue={p}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{pathToLabel.get(p)!}\r\n\t\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</Select>\r\n\t\t\t\t\t:\r\n\t\t\t\t\tnull\r\n\t\t\t\t}\r\n\t\t\t\t<ItemPickerSection\r\n\t\t\t\t\tlabel={pathToLabel.get(group)!}\r\n\t\t\t\t\titems={allItems[group]}\r\n\t\t\t\t\tcreateCostLabel={createCostLabel}\r\n\t\t\t\t\tonUpdateItems={handleUpdateItems}\r\n\t\t\t\t/>\r\n\t\t\t</DialogContent>\r\n\t\t</Dialog>\r\n\t);\r\n};\r\n\r\nexport default ItemPickerDialog;","import React, { FC, Fragment, useState } from \"react\";\r\nimport { Dictionary, getMatchingParents, getMaxPathDepth, getNextParentPaths } from \"../model/dictionary\";\r\nimport { Item, getItemSubset } from \"../model/item\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport ItemPickerDialog from \"./ItemPickerDialog\";\r\nimport { Menu, MenuItem } from \"@material-ui/core\";\r\nimport { createSavedItem } from \"../model/gear\";\r\nimport { getChildSet } from \"../model/dictionary\";\r\nimport { sentenceCase } from \"change-case\";\r\n\r\ntype Props = {\r\n\ttitle: string;\r\n\titems: Item[];\r\n\tallItems: Dictionary<Item[]>;\r\n\tcreateCostLabel: (item: Item) => string;\r\n\tonUpdateItems: (newItems: Item[]) => void;\r\n};\r\nconst ItemPickerButton: FC<Props> = (props: Props) => {\r\n\tconst { title, items, allItems, createCostLabel, onUpdateItems } = props;\r\n\r\n\tconst [open, setOpen] = useState(false);\r\n\tconst handleClose = () => setOpen(false);\r\n\r\n\tconst parentPathsToName = getNextParentPaths(allItems);\r\n\r\n\tconst parentPaths: string[] = [];\r\n\tfor (const parentPath of parentPathsToName.keys()) {\r\n\t\tparentPaths.push(parentPath);\r\n\t}\r\n\t\r\n\tconst [parentPath, setParentPath] = useState(parentPaths[0]);\r\n\t\r\n\tconst [menuAnchor, setMenuAnchor] = useState<HTMLButtonElement | null>(null);\r\n\r\n\tconst allChildItems = getChildSet(allItems, parentPath);\r\n\t\r\n\tconst allCountedItems: Dictionary<Item[]> = {};\r\n\tlet hasItems = false;\r\n\tfor (const path of Object.keys(allChildItems)) {\r\n\t\thasItems = true;\r\n\t\tconst localItems = [...allChildItems[path]];\r\n\t\tconst matchingItems = getItemSubset(items, parentPath);\r\n\t\tfor (const localItem of localItems) {\r\n\t\t\tconst matchingItem = matchingItems.find(i => i.name === localItem.name);\r\n\t\t\tif (matchingItem) {\r\n\t\t\t\tlocalItem.count = matchingItem.count;\r\n\t\t\t\tlocalItem.grade = matchingItem.grade;\r\n\t\t\t} else {\r\n\t\t\t\tlocalItem.count = \"0\";\r\n\t\t\t}\r\n\t\t}\r\n\t\tallCountedItems[path] = localItems;\r\n\t}\r\n\r\n\tconst handleUpdateAllItems = (newCountedItems: Dictionary<Item[]>) => {\r\n\t\tconst newItems: Item[] = [...items];\r\n\r\n\t\tfor (const path of Object.keys(newCountedItems)) {\r\n\t\t\tfor (const localItem of newCountedItems[path]) {\r\n\t\t\t\tconst includeItem = parseInt(localItem.count!) > 0;\r\n\t\t\t\tconst index = newItems.findIndex(i => i.path === path && i.name === localItem.name);\r\n\t\t\t\tif (index > -1) {\r\n\t\t\t\t\tif (includeItem) {\r\n\t\t\t\t\t\tnewItems[index] = createSavedItem(path, localItem);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnewItems.splice(index, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (includeItem) {\r\n\t\t\t\t\tnewItems.push(createSavedItem(path, localItem));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tonUpdateItems(newItems);\r\n\t};\r\n\r\n\tconst matchingParents = getMatchingParents(allItems);\r\n\tconst matchingParentPath = matchingParents.join(\".\");\r\n\tconst maxPathDepth = getMaxPathDepth(allItems);\r\n\tconst useMenu = matchingParents.length + 1 < maxPathDepth;\r\n\r\n\tconst handleMenuClick = (parentPath: string) => {\r\n\t\tsetParentPath(parentPath);\r\n\t\tsetMenuAnchor(null);\r\n\t\tsetOpen(true);\r\n\t};\r\n\r\n\tconst handleButtonClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n\t\tif (useMenu) {\r\n\t\t\tsetMenuAnchor(event.currentTarget);\r\n\t\t} else {\r\n\t\t\tsetParentPath(matchingParentPath);\r\n\t\t\tsetOpen(true);\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<IconButton\r\n\t\t\t\tonClick={handleButtonClick}\r\n\t\t\t\tcolor=\"secondary\"\r\n\t\t\t\tsize=\"medium\"\r\n\t\t\t\tdisableRipple\r\n\t\t\t>\r\n\t\t\t\t<EditIcon />\r\n\t\t\t</IconButton>\r\n\t\t\t{\r\n\t\t\t\tuseMenu ?\r\n\t\t\t\t<Menu\r\n\t\t\t\t\tanchorEl={menuAnchor}\r\n\t\t\t\t\topen={Boolean(menuAnchor)}\r\n\t\t\t\t\tonClose={() => setMenuAnchor(null)}\r\n\t\t\t\t>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tparentPaths.map(p => (\r\n\t\t\t\t\t\t\t<MenuItem key={p} onClick={() => {handleMenuClick(p)}}>\r\n\t\t\t\t\t\t\t\t{sentenceCase(parentPathsToName.get(p)!)}\r\n\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t))\r\n\t\t\t\t\t}\r\n\t\t\t\t</Menu>\r\n\t\t\t\t:\r\n\t\t\t\tnull\r\n\t\t\t}\r\n\t\t\t{\r\n\t\t\t\thasItems\r\n\t\t\t\t?\r\n\t\t\t\t<ItemPickerDialog\r\n\t\t\t\t\topen={open}\r\n\t\t\t\t\tonClose={handleClose}\r\n\t\t\t\t\ttitle={\r\n\t\t\t\t\t\tuseMenu ?\r\n\t\t\t\t\t\t`${title} - ${parentPathsToName.get(parentPath)!}`\r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\ttitle\r\n\t\t\t\t\t}\r\n\t\t\t\t\tallItems={allCountedItems}\r\n\t\t\t\t\tcreateCostLabel={createCostLabel}\r\n\t\t\t\t\tonUpdateAllItems={handleUpdateAllItems}\r\n\t\t\t\t/>\r\n\t\t\t\t:\r\n\t\t\t\tnull\r\n\t\t\t}\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default ItemPickerButton;","import React, { FC } from \"react\";\r\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\r\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\r\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { Dictionary } from \"../model/dictionary\";\r\nimport { Item } from \"../model/item\";\r\nimport ChipCollection from \"./ChipCollection\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport ItemPickerButton from \"./ItemPickerButton\";\r\nimport { computeItemCost } from \"../model/gear\";\r\nimport { useGlobalState } from \"../context\";\r\n\r\nconst useStyles = makeStyles({\r\n    headerLabel: {\r\n        lineHeight: 3,\r\n        fontWeight: 700,\r\n    },\r\n});\r\n\r\n\r\ntype Props = {\r\n\tlabel: string;\r\n\titems: Item[];\r\n\tallItems: Dictionary<Item[]>;\r\n\tcreateItemLabel: (item: Item) => string;\r\n\tcreateItemCostLabel: (item: Item) => string;\r\n\tonUpdateItems: (newItems: Item[]) => void;\r\n};\r\nconst GroupContainer: FC<Props> = (props: Props) => {\r\n\tconst { label, items, allItems, createItemLabel, createItemCostLabel, onUpdateItems } = props;\r\n\tconst options = useGlobalState(\"selectedCharacter\").options;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tlet cost = 0;\r\n\tfor (const item of items) {\r\n\t\tcost += computeItemCost(item, allItems, options.gearLevel) * parseInt(item.count!);\r\n\t}\r\n\r\n\tconst flatItems: Item[] = [];\r\n\tfor (const path of Object.keys(allItems)) {\r\n\t\tflatItems.push(...allItems[path]);\r\n\t}\r\n\r\n\tconst handleDelete = (toDelete: Item) => {\r\n\t\tconst newItems = [...items];\r\n\t\tconst index = newItems.findIndex(i => i.name === toDelete.name);\r\n\t\tif (index < 0) {\r\n\t\t\tthrow new Error(`Could not find item '${toDelete.name}' to delete in list '${JSON.stringify(newItems)}'`);\r\n\t\t}\r\n\t\tnewItems.splice(index, 1);\r\n\t\tonUpdateItems(newItems);\r\n\t};\r\n\r\n\tconst handleUpdateItems = (newItems: Item[]) => {\r\n\t\tonUpdateItems(newItems);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<ExpansionPanel defaultExpanded={false}>\r\n\t\t\t<ExpansionPanelSummary expandIcon={<ExpandMoreIcon />} >\r\n\t\t\t\t<FormControlLabel\r\n\t\t\t\t\tonClick={(event) => event.stopPropagation()}\r\n\t\t\t\t\tonFocus={(event) => event.stopPropagation()}\r\n\t\t\t\t\tcontrol={<ItemPickerButton\r\n\t\t\t\t\t\ttitle={label}\r\n\t\t\t\t\t\titems={items}\r\n\t\t\t\t\t\tallItems={allItems}\r\n\t\t\t\t\t\tcreateCostLabel={createItemCostLabel}\r\n\t\t\t\t\t\tonUpdateItems={handleUpdateItems}\r\n\t\t\t\t\t/>}\r\n\t\t\t\t\tlabel=\"\"\r\n\t\t\t\t/>\r\n\t\t\t\t<Typography className={classes.headerLabel}>{label} ({cost})</Typography>\r\n\t\t\t</ExpansionPanelSummary>\r\n\t\t\t<ExpansionPanelDetails>\r\n\t\t\t\t<ChipCollection\r\n\t\t\t\t\tvalues={items}\r\n\t\t\t\t\tcreateChipLabel={createItemLabel}\r\n\t\t\t\t\tonDeleteValue={handleDelete}\r\n\t\t\t\t/>\r\n\t\t\t</ExpansionPanelDetails>\r\n\t\t</ExpansionPanel>\r\n\t);\r\n};\r\n\r\nexport default GroupContainer;","import React, { FC } from \"react\";\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport { Item } from \"../model/item\";\r\nimport { getItemCost } from \"../model/dictionary\";\r\nimport GroupContainer from \"./GroupContainer\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\n\r\nconst QualitiesSection: FC = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst character = useGlobalState(\"selectedCharacter\");\r\n\tconst { qualities } = character;\r\n\tconst allQualities = useGlobalState(\"allQualities\");\r\n\r\n\tconst createQualityCostLabel = (item: Item) => {\r\n\t\tconst cost = getItemCost(item, allQualities);\r\n\t\tif (cost > 0) {\r\n\t\t\treturn `+${cost}`;\r\n\t\t} else {\r\n\t\t\treturn `${cost}`;\r\n\t\t}\r\n\t}\r\n\r\n\tconst createQualityLabel = (item: Item) => {\r\n\t\tconst { name } = item;\r\n\t\tconst costLabel = createQualityCostLabel(item);\r\n\t\treturn `${name} (${costLabel})`;\r\n\t};\r\n\r\n\tconst handleUpdateQualities = (newQualities: Item[]) => {\r\n\t\tconst data: UpdateCharacterData = { ...character, qualities: newQualities };\r\n\t\tdispatch({ type: ActionType.UpdateCharacter, data });\r\n\t};\r\n\r\n\treturn (\r\n\t\t<GroupContainer\r\n\t\t\tlabel=\"Qualities\"\r\n\t\t\titems={qualities}\r\n\t\t\tallItems={allQualities}\r\n\t\t\tcreateItemLabel={createQualityLabel}\r\n\t\t\tcreateItemCostLabel={createQualityCostLabel}\r\n\t\t\tonUpdateItems={handleUpdateQualities}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport default QualitiesSection;","import React, { FC } from \"react\";\r\n\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { NamedProperty } from \"../model/character\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: \"flex\",\r\n        height: 50,\r\n    },\r\n    name: {\r\n        width: 200\r\n    },\r\n    slider: {\r\n        width: 300,\r\n        marginRight: 10,\r\n    },\r\n});\r\n\r\ntype Props = {\r\n    property: NamedProperty;\r\n    onUpdate: (property: NamedProperty) => void;\r\n    min: number;\r\n    max: number;\r\n    step: number;\r\n    formatDisplayValue: (rating: number) => string;\r\n    computeCost: (rating: number) => number;\r\n};\r\n\r\nconst Property: FC<Props> = (props: Props) => {\r\n    const { property, onUpdate, min, max, step, formatDisplayValue, computeCost } = props;\r\n    const { name, rating } = property;\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleChange = (e: React.ChangeEvent<any>, rating: number | number[]) => {\r\n        if (Array.isArray(rating)) {\r\n            throw new Error(`Property element '${e.target.id}' has an array of values instead of a single value: [${rating.join(\", \")}]`);\r\n        }\r\n        onUpdate({\r\n            name,\r\n            rating: rating\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Typography gutterBottom className={classes.name}>{name}</Typography>\r\n            <div className={classes.slider}>\r\n                <Slider\r\n                    step={step}\r\n                    min={min}\r\n                    max={max}\r\n                    value={rating}\r\n                    marks\r\n                    valueLabelDisplay=\"on\"\r\n                    onChange={handleChange}\r\n                    valueLabelFormat={(value: number, _index: number) => formatDisplayValue(value)}\r\n                />\r\n            </div>\r\n            <Typography gutterBottom>({computeCost(rating)})</Typography>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Property;","import { makeStyles } from \"@material-ui/core\";\r\nimport React, { FC } from \"react\";\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport { getProfessionalismCost, NamedProperty } from \"../model/character\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\nimport Property from \"./Property\";\r\n\r\nconst useStyles = makeStyles({\r\n\troot: {\r\n\t\tpaddingTop: 50,\r\n\t\tpaddingLeft: 16,\r\n\t},\r\n});\r\n\r\nconst Professionalism: FC = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst classes = useStyles();\r\n\tconst character = useGlobalState(\"selectedCharacter\");\r\n\tconst professionalism: NamedProperty = {\r\n\t\tname: \"Professionalism\",\r\n\t\trating: character.professionalism\r\n\t};\r\n\r\n\tconst formatDisplayValue = (rating: number): string => rating.toString();\r\n\r\n\tconst handleOnUpdate = (newProfessionalism: NamedProperty) => {\r\n\t\tconst data: UpdateCharacterData = { ...character };\r\n\t\tdata.professionalism = newProfessionalism.rating;\r\n\t\tdispatch({\r\n\t\t\ttype: ActionType.UpdateCharacter,\r\n\t\t\tdata\r\n\t\t});\r\n\t}\r\n\t\r\n\treturn (\r\n\t\t<div className={classes.root}>\r\n\t\t\t<Property\r\n\t\t\t\tproperty={professionalism}\r\n\t\t\t\tmin={0}\r\n\t\t\t\tmax={6}\r\n\t\t\t\tstep={1}\r\n\t\t\t\tformatDisplayValue={formatDisplayValue}\r\n\t\t\t\tcomputeCost={getProfessionalismCost}\r\n\t\t\t\tonUpdate={handleOnUpdate}\r\n\t\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Professionalism;","import React, { FC, Fragment } from \"react\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport { Character as CharacterData, MetaType } from \"../model/character\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\nimport { ALL_META_TYPES } from \"../data/meta-types\";\r\nimport { getMetaTypeCost } from \"../model/meta-type\";\r\nimport QualitiesSection from \"./QualitiesSection\";\r\nimport Professionalism from \"./Professionalism\";\r\n\r\nconst useStyles = makeStyles({\r\n    header: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        marginLeft: 5,\r\n        marginRight: 5,\r\n        marginBottom: 10,\r\n        alignItems: \"center\",\r\n    },\r\n    field: {\r\n        marginRight: 10,\r\n        marginTop: 20,\r\n    },\r\n    divider: {\r\n        margin: 5,\r\n    }\r\n});\r\n\r\nconst CharacterTab: FC = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const character = useGlobalState(\"selectedCharacter\");\r\n    const { name, streetName, metaType } = character;\r\n\r\n    const onCharacterUpdated = (updatedCharacter: CharacterData) => {\r\n        const data: UpdateCharacterData = updatedCharacter;\r\n        dispatch({ type: ActionType.UpdateCharacter, data });\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className={classes.header}>\r\n                <TextField id-=\"name\" label=\"Name\" value={name} onChange={e => onCharacterUpdated({ ...character, name: e.target.value})} className={classes.field} variant=\"outlined\" />\r\n                <TextField id-=\"street-name\" label=\"Street Name\" value={streetName} onChange={e => onCharacterUpdated({ ...character, streetName: e.target.value})} className={classes.field} variant=\"outlined\" />\r\n                <Select id=\"meta-type\" value={metaType} displayEmpty onChange={e => onCharacterUpdated({ ...character, metaType: e.target.value as MetaType})} className={classes.field} variant=\"outlined\">\r\n                    {ALL_META_TYPES.map(t => <MenuItem key={t} value={t}>{t} ({getMetaTypeCost(t)})</MenuItem>)}\r\n                </Select>\r\n                <Professionalism />\r\n            </div>\r\n            <QualitiesSection />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default CharacterTab;","import { Dictionary } from \"./dictionary\";\r\n\r\nexport type CustomItem = {\r\n    Name: string;\r\n    Availability?: string;\r\n    Cost?: string;\r\n};\r\n\r\nexport function getChildItems(customItems: Dictionary<CustomItem>, parentPath: string): CustomItem[] {\r\n\tconst items: CustomItem[] = [];\r\n\tfor (const path in customItems) {\r\n\t\tif (path.startsWith(parentPath)) {\r\n\t\t\titems.push(customItems[path]);\r\n\t\t}\r\n\t}\r\n\treturn items;\r\n}","import React, { FC, Fragment, useState } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { CustomItem } from \"../model/custom-item\";\r\n\r\nexport type SelectableItem = CustomItem & {\r\n\tselected: boolean;\r\n};\r\n\r\nconst useStyles = makeStyles(({\r\n\tcontent: {\r\n\t\twidth: \"100%\",\r\n\t},\r\n\theader: {\r\n\t\tdisplay: \"flex\",\r\n\t},\r\n\tname: {\r\n\t\tminWidth: 300,\r\n\t\tmaxWidth: 300,\r\n\t\ttextAlign: \"left\",\r\n\t},\r\n\tavailability: {\r\n\t\tminWidth: 100,\r\n\t\tmaxWidth: 100,\r\n\t\ttextAlign: \"center\",\r\n\t},\r\n\tcost: {\r\n\t\tminWidth: 100,\r\n\t\tmaxWidth: 100,\r\n\t\ttextAlign: \"right\",\r\n\t},\r\n\tul: {\r\n\t\tpadding: 0,\r\n\t},\r\n}));\r\n\r\ntype Props = {\r\n\topen: boolean;\r\n\tonClose: () => void;\r\n\ttitle: string;\r\n\titems: SelectableItem[];\r\n\tonItemSelectionChange: (item: SelectableItem) => void;\r\n\tincludeAvailability: boolean;\r\n\tincludeCost: boolean;\r\n\tallowNewItems: boolean;\r\n\tallowMultiSelection: boolean;\r\n};\r\nconst PickerDialog: FC<Props> = (props: Props) => {\r\n\tconst { open, onClose, title, items, onItemSelectionChange, includeAvailability, includeCost, allowNewItems, allowMultiSelection } = props;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tconst [newItemName, setNewItemName] = useState(\"\");\r\n\tconst [newItemAvailability, setNewItemAvailability] = useState(\"\");\r\n\tconst [newItemCost, setNewItemCost] = useState(\"\");\r\n\r\n\tconst onUpdateNewItem = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tconst value = event.target.value;\r\n\t\tswitch (event.target.id) {\r\n\t\t\tcase \"new-item-name\": {\r\n\t\t\t\tsetNewItemName(value);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase \"new-item-availability\": {\r\n\t\t\t\tsetNewItemAvailability(value);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase \"new-item-cost\": {\r\n\t\t\t\tsetNewItemCost(value);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tconst onCreateNewItem = () => {\r\n\t\tconst item: SelectableItem = { Name: newItemName, selected: true };\r\n\t\tif (includeAvailability) {\r\n\t\t\titem.Availability = newItemAvailability;\r\n\t\t}\r\n\t\tif (includeCost) {\r\n\t\t\titem.Cost = newItemCost;\r\n\t\t}\r\n\t\tonItemSelectionChange(item);\r\n\t\t// clear the new item fields after adding a new item (don't want fat-finger duplicates)\r\n\t\tsetNewItemName(\"\");\r\n\t\tsetNewItemAvailability(\"\");\r\n\t\tsetNewItemCost(\"\");\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Dialog open={open} onClose={onClose}>\r\n\t\t\t<DialogTitle>{title}</DialogTitle>\r\n\t\t\t<DialogContent className={classes.content}>\r\n\t\t\t\t<List>\r\n\t\t\t\t\t<ListItem key=\"header\" className={classes.header}>\r\n\t\t\t\t\t\t<Typography className={classes.name}>Name</Typography>\r\n\t\t\t\t\t\t{ includeAvailability ? <Typography className={classes.availability}>i.availability</Typography> : null }\r\n\t\t\t\t\t\t{ includeCost ? <Typography className={classes.cost}>Cost</Typography> : null }\r\n\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tallowNewItems ?\r\n\t\t\t\t\t\t<ListItem key=\"new-item\">\r\n\t\t\t\t\t\t\t<TextField id=\"new-item-name\" label=\"Custom\" value={newItemName} onChange={onUpdateNewItem} className={classes.name} variant=\"outlined\" />\r\n\t\t\t\t\t\t\t{ includeAvailability ? <TextField id=\"new-item-availability\" label=\"Availability\" value={newItemAvailability} onChange={onUpdateNewItem} className={classes.availability} variant=\"outlined\" /> : null }\r\n\t\t\t\t\t\t\t{ includeCost ? <TextField id=\"new-item-cost\" label=\"Cost\" value={newItemCost} onChange={onUpdateNewItem} className={classes.cost} variant=\"outlined\" /> : null }\r\n\t\t\t\t\t\t\t<IconButton aria-label=\"create\" onClick={onCreateNewItem} color=\"secondary\" size=\"small\">\r\n\t\t\t\t\t\t\t\t<AddIcon />\r\n\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\tnull\r\n\t\t\t\t\t}\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\titems.map(item => (\r\n\t\t\t\t\t\t\t<ListItem key={item.Name}>\r\n\t\t\t\t\t\t\t\t<ListItemText className={classes.name}>{item.Name}</ListItemText>\r\n\t\t\t\t\t\t\t\t{ includeAvailability ? <ListItemText className={classes.availability}>{item.Availability}</ListItemText> : null }\r\n\t\t\t\t\t\t\t\t{ includeCost ? <ListItemText className={classes.cost}>{item.Cost}</ListItemText> : null }\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tallowMultiSelection ?\r\n\t\t\t\t\t\t\t\t\t<Fragment>\r\n\t\t\t\t\t\t\t\t\t\t<IconButton aria-label=\"add\" onClick={() => onItemSelectionChange({ ...item, selected: true })} color=\"secondary\" size=\"small\">\r\n\t\t\t\t\t\t\t\t\t\t\t<AddIcon />\r\n\t\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t\t\t<IconButton aria-label=\"remove\" onClick={() => onItemSelectionChange({ ...item, selected: false })} disabled={!item.selected} color=\"secondary\" size=\"small\">\r\n\t\t\t\t\t\t\t\t\t\t\t<RemoveIcon />\r\n\t\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t\t</Fragment>\r\n\t\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t\t<IconButton aria-label={item.selected ? \"remove\" : \"add\"} onClick={() => onItemSelectionChange({ ...item, selected: !item.selected })} color=\"secondary\" size=\"small\">\r\n\t\t\t\t\t\t\t\t\t\t{ item.selected ? <RemoveIcon /> : <AddIcon /> }\r\n\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t\t))\r\n\t\t\t\t\t}\r\n\t\t\t\t</List>\r\n\t\t\t</DialogContent>\r\n\t\t</Dialog>\r\n\t);\r\n};\r\n\r\nexport default PickerDialog;","import React, { FC, Fragment, useState } from \"react\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PickerDialog, { SelectableItem } from \"./PickerDialog\";\r\n\r\nconst NAME_INDEX = 0;\r\nconst COST = \"Cost\";\r\nconst AVAILABILITY = \"Availability\";\r\n\r\nconst findName = (value: any): string => {\r\n\tconst nameProp = Object.keys(value)[NAME_INDEX];\r\n\tconst name = value[nameProp];\r\n\tif (name === undefined) {\r\n\t\tthrow new Error(`Could not find a name for value '${JSON.stringify(value)}'`);\r\n\t}\r\n\treturn name as string;\r\n};\r\n\r\nconst findCost = (value: any): string => {\r\n\tconst cost = value[COST];\r\n\tif (cost === undefined) {\r\n\t\t// throw new Error(`Could not find a cost for value '${JSON.stringify(value)}'`);\r\n\t\treturn \"0\";\r\n\t}\r\n\treturn cost;\r\n};\r\n\r\nconst findAvailability = (value: any): string => {\r\n\tconst availability = value[AVAILABILITY];\r\n\tif (availability === undefined) {\r\n\t\t// throw new Error(`Could not find an availability for value '${JSON.stringify(value)}'`);\r\n\t\treturn \"-\";\r\n\t}\r\n\treturn availability;\r\n};\r\n\r\nconst createSelectableItem = (value: any, selectedValueNames: string[], includeAvailability: boolean, includeCost: boolean): SelectableItem => {\r\n\tconst Name = findName(value);\r\n\tconst Availability = includeAvailability ? findAvailability(value) : undefined;\r\n\tconst Cost = includeCost ? findCost(value) : undefined;\r\n\tconst selected = selectedValueNames.find(n => n === Name) !== undefined;\r\n\treturn { Name, Cost, Availability, selected\t};\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n    editButton: {\r\n        paddingLeft: 10,\r\n    },\r\n});\r\n\r\ntype Props = {\r\n\tbreadcrums: string[];\r\n\tvalues: any[];\r\n\tselectedValueNames: string[];\r\n\taddValue: (name: string) => void;\r\n\tremoveValue: (name: string) => void;\r\n\tincludeAvailability?: boolean;\r\n\tincludeCost?: boolean;\r\n\tallowNewValues?: boolean;\r\n\tcreateValue?: (value: any) => void;\r\n\tallowMultiSelection?: boolean;\r\n};\r\nconst PickerButton: FC<Props> = (props: Props) => {\r\n\tconst { breadcrums, values, selectedValueNames, addValue, removeValue, includeAvailability=false, includeCost=false, allowNewValues: allowNewItems=false, createValue, allowMultiSelection=false } = props;\r\n\t\r\n\tconst classes = useStyles();\r\n\r\n\tconst [open, setOpen] = useState(false);\r\n\tconst onOpen = () => setOpen(true);\r\n\tconst onClose = () => setOpen(false);\r\n\r\n\tconst title = breadcrums.join(\" - \");\r\n\r\n\tconst items = values.map(v => createSelectableItem(v, selectedValueNames, includeAvailability, includeCost));\r\n\r\n\tconst onItemSelectionChange = (item: SelectableItem) => {\r\n\t\tconst { Name, Availability, Cost, selected } = item;\r\n\t\tif (selected) {\r\n\t\t\taddValue(Name);\r\n\t\t\tif (values.find(v => findName(v) === Name) === undefined) {\r\n\t\t\t\t// new item\r\n\t\t\t\tconst value = { Name, Availability, Cost };\r\n\t\t\t\tif (!createValue) {\r\n\t\t\t\t\tthrow new Error(`Attempting to create new item '${JSON.stringify(value)}' with no createValue prop`);\r\n\t\t\t\t}\r\n\t\t\t\tcreateValue(value);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tremoveValue(Name);\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<IconButton aria-label=\"add\" onClick={onOpen} color=\"secondary\" size=\"medium\" className={classes.editButton} disableRipple>\r\n\t\t\t\t<EditIcon />\r\n\t\t\t</IconButton>\r\n\t\t\t<PickerDialog\r\n\t\t\t\topen={open}\r\n\t\t\t\tonClose={onClose}\r\n\t\t\t\ttitle={title}\r\n\t\t\t\titems={items}\r\n\t\t\t\tonItemSelectionChange={onItemSelectionChange}\r\n\t\t\t\tincludeAvailability={includeAvailability}\r\n\t\t\t\tincludeCost={includeCost}\r\n\t\t\t\tallowNewItems={allowNewItems}\r\n\t\t\t\tallowMultiSelection={allowMultiSelection}\r\n\t\t\t/>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default PickerButton;","import React, { FC } from \"react\";\r\n\r\nimport { Skill as SkillData } from \"../model/character\";\r\nimport Property from \"./Property\";\r\n\r\ntype Props = {\r\n    skill: SkillData;\r\n\tonUpdate: (skill: SkillData) => void;\r\n\tcomputeCost: (rating: number) => number;\r\n};\r\n\r\nconst Skill: FC<Props> = (props: Props) => {\r\n    const { skill, onUpdate, computeCost } = props;\r\n\r\n    return (\r\n        <Property\r\n            property={skill}\r\n            onUpdate={onUpdate}\r\n            min={1}\r\n            max={7}\r\n            step={2}\r\n            formatDisplayValue={value => value.toString()}\r\n            computeCost={computeCost}\r\n            />\r\n    );\r\n}\r\n\r\nexport default Skill;","import React, { FC, Fragment } from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\r\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\r\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { Skill as SkillData } from \"../model/character\";\r\nimport { CustomItem, getChildItems } from \"../model/custom-item\";\r\nimport { AddCustomItemData, ActionType } from \"../reducer\";\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport PickerButton from \"./PickerButton\";\r\nimport Skill from \"./Skill\";\r\n\r\nconst useStyles = makeStyles({\r\n    header: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        marginBottom: 20,\r\n        paddingLeft: 16,\r\n        paddingTop: 12,\r\n    },\r\n    headerLabel: {\r\n        lineHeight: 3,\r\n        fontWeight: 700,\r\n    },\r\n});\r\n\r\ntype Props = {\r\n    breadcrums: string[];\r\n\tskills: SkillData[];\r\n\tallSkills: CustomItem[];\r\n    headerLabel: string;\r\n    computeSkillCost: (rating: number) => number;\r\n\tonSkillsUpdated: (updatedSkills: SkillData[]) => void;\r\n};\r\nconst SkillList: FC<Props> = (props: Props) => {\r\n\tconst { breadcrums, skills, allSkills, headerLabel, computeSkillCost, onSkillsUpdated } = props;\r\n\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const customItems = useGlobalState(\"customItems\");\r\n\r\n    skills.sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n    const parentPath = breadcrums.join(\".\");\r\n    allSkills.push(...getChildItems(customItems, parentPath));\r\n    allSkills.sort((a, b) => a.Name.localeCompare(b.Name));\r\n\r\n    const onSkillUpdate = (skill: SkillData) => {\r\n        const newSkills = [ ...skills ];\r\n        const skillIndex = skills.findIndex(s => s.name === skill.name);\r\n        if (skillIndex > -1) {\r\n            if (skill.rating > 0) {\r\n                newSkills[skillIndex] = skill;\r\n            } else {\r\n                newSkills.splice(skillIndex, 1);\r\n            }\r\n        } else if (skill.rating > 0) {\r\n            newSkills.push(skill);\r\n        }\r\n        onSkillsUpdated(newSkills);\r\n    };\r\n    \r\n    const addSkill = (name: string) => {\r\n        onSkillUpdate({ name, rating: 1 });\r\n    };\r\n\r\n    const removeSkill = (name: string) => {\r\n        onSkillUpdate({ name, rating: -1 });\r\n    };\r\n\r\n    const createNewSkill = (item: CustomItem) => {\r\n        const path = `${parentPath}.${item.Name}`;\r\n        const data: AddCustomItemData = { path, item: item };\r\n        dispatch({ type: ActionType.AddCustomItem, data });\r\n    };\r\n\r\n\treturn (\r\n        <Fragment>\r\n            <ExpansionPanel defaultExpanded={false}>\r\n                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\r\n                    <FormControlLabel\r\n                        onClick={(event) => event.stopPropagation()}\r\n                        onFocus={(event) => event.stopPropagation()}\r\n                        control={<PickerButton\r\n                            breadcrums={breadcrums}\r\n                            values={allSkills}\r\n                            selectedValueNames={skills.map(s => s.name)}\r\n                            addValue={addSkill}\r\n                            removeValue={removeSkill}\r\n                            allowNewValues\r\n                            createValue={createNewSkill}\r\n                        />}\r\n                        label=\"\"\r\n                    />\r\n                    <Typography className={classes.headerLabel}>{headerLabel}</Typography>\r\n                </ExpansionPanelSummary>\r\n                <ExpansionPanelDetails>\r\n                    <List>\r\n                    {\r\n                        skills.map(s => (\r\n                            <ListItem key={s.name}>\r\n                                <Skill skill={s} onUpdate={onSkillUpdate} computeCost={computeSkillCost} />\r\n                            </ListItem>\r\n                        ))\r\n                    }\r\n                    </List>\r\n                </ExpansionPanelDetails>\r\n            </ExpansionPanel>\r\n        </Fragment>\r\n\t);\r\n};\r\n\r\nexport default SkillList;","import React, { FC } from \"react\";\r\nimport { useDispatch, useGlobalState } from \"../context\"\r\nimport { Skill as SkillData } from \"../model/character\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\nimport { getActiveSkillsCost, getActiveSkillCost } from \"../model/skills\";\r\nimport SkillList from \"./SkillList\";\r\n\r\nconst breadcrums = [\"Skills\", \"Active\"];\r\n\r\nconst ActiveSkillList: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const character = useGlobalState(\"selectedCharacter\");\r\n    const allSkills = useGlobalState(\"allSkills\");\r\n\r\n    const { activeSkills } = character;\r\n\r\n    const activeSkillsCost = getActiveSkillsCost(activeSkills);\r\n    const headerLabel = `Active Skills (${activeSkillsCost})`;\r\n\r\n    const allActiveSkills = [...allSkills.active];\r\n\r\n    const onSkillsUpdated = (activeSkills: SkillData[]) => {\r\n        const data: UpdateCharacterData = { ...character, activeSkills };\r\n        dispatch({ type: ActionType.UpdateCharacter, data });\r\n    }\r\n    return (\r\n        <SkillList\r\n            breadcrums={breadcrums}\r\n            skills={activeSkills}\r\n            allSkills={allActiveSkills}\r\n            headerLabel={headerLabel}\r\n            computeSkillCost={getActiveSkillCost}\r\n            onSkillsUpdated={onSkillsUpdated}\r\n        />\r\n    );\r\n}\r\n\r\nexport default ActiveSkillList;","import React, { FC } from \"react\";\r\nimport { useDispatch, useGlobalState } from \"../context\"\r\nimport { Skill as SkillData } from \"../model/character\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\nimport { getKnowledgeSkillsCost, getFreeKnowledgeSkillPoints, getKnowledgeSkillCost } from \"../model/skills\";\r\nimport SkillList from \"./SkillList\";\r\n\r\nconst breadcrums = [\"Skills\", \"Knowledge\"];\r\n\r\nconst KnowledgeSkillList: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const character = useGlobalState(\"selectedCharacter\");\r\n\tconst allSkills = useGlobalState(\"allSkills\");\r\n\r\n\tconst { knowledgeSkills } = character;\r\n\r\n\tconst knowledgeSkillsCost = getKnowledgeSkillsCost(knowledgeSkills);\r\n    const freeKnowledgeSkillPoints = getFreeKnowledgeSkillPoints(character);\r\n    const totalCost = knowledgeSkillsCost - freeKnowledgeSkillPoints;\r\n    const headerLabel = `Knowledge Skills (${knowledgeSkillsCost} - ${freeKnowledgeSkillPoints} = ${totalCost})`;\r\n\r\n    const allKnowledgeSkills = [...allSkills.knowledge];\r\n\r\n    const onSkillsUpdated = (knowledgeSkills: SkillData[]) => {\r\n        const data: UpdateCharacterData = { ...character, knowledgeSkills };\r\n        dispatch({ type: ActionType.UpdateCharacter, data });\r\n    };\r\n\r\n    return (\r\n        <SkillList\r\n            breadcrums={breadcrums}\r\n            skills={knowledgeSkills}\r\n            allSkills={allKnowledgeSkills}\r\n            headerLabel={headerLabel}\r\n            computeSkillCost={getKnowledgeSkillCost}\r\n            onSkillsUpdated={onSkillsUpdated}\r\n        />\r\n    );\r\n}\r\n\r\nexport default KnowledgeSkillList;","import React, { FC } from \"react\";\r\nimport { useDispatch, useGlobalState } from \"../context\"\r\nimport { Skill as SkillData } from \"../model/character\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\nimport { getKnowledgeSkillsCost, getKnowledgeSkillCost } from \"../model/skills\";\r\nimport SkillList from \"./SkillList\";\r\n\r\nconst breadcrums = [\"Skills\", \"Language\"];\r\n\r\nconst LanguageSkillList: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const character = useGlobalState(\"selectedCharacter\");\r\n\tconst allSkills = useGlobalState(\"allSkills\");\r\n\r\n\tconst { languageSkills } = character;\r\n\r\n\tconst languageSkillsCost = getKnowledgeSkillsCost(languageSkills);\r\n    const headerLabel = `Language Skills (${languageSkillsCost}) + Native`;\r\n\r\n    const allLanguageSkills = [...allSkills.language];\r\n\r\n    const onSkillsUpdated = (languageSkills: SkillData[]) => {\r\n        const data: UpdateCharacterData = { ...character, languageSkills };\r\n        dispatch({ type: ActionType.UpdateCharacter, data });\r\n    };\r\n\r\n    return (\r\n        <SkillList\r\n            breadcrums={breadcrums}\r\n            skills={languageSkills}\r\n            allSkills={allLanguageSkills}\r\n            headerLabel={headerLabel}\r\n            computeSkillCost={getKnowledgeSkillCost}\r\n            onSkillsUpdated={onSkillsUpdated}\r\n        />\r\n    );\r\n}\r\n\r\nexport default LanguageSkillList;","import React, { FC, Fragment } from \"react\";\r\nimport ActiveSkillList from \"./ActiveSkillList\";\r\nimport KnowledgeSkillList from \"./KnowledgeSkillList\";\r\nimport LanguageSkillList from \"./LanguageSkillList\";\r\n\r\nconst SkillsTab: FC = () => {\r\n    return (\r\n        <Fragment>\r\n            <ActiveSkillList />\r\n            <KnowledgeSkillList />\r\n            <LanguageSkillList />\r\n        </Fragment>\r\n    )\r\n};\r\n\r\nexport default SkillsTab;","import React, { FC } from \"react\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport ShoppingCartIcon from \"@material-ui/icons/ShoppingCart\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useGlobalState } from \"../context\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        paddingLeft: 20,\r\n        paddingRight: 20,\r\n    },\r\n    badge: {\r\n        marginLeft: 50,\r\n    },\r\n});\r\n\r\nconst Karma: FC = () => {\r\n    const classes = useStyles();\r\n    const karma = useGlobalState(\"karma\");\r\n    const { total, spent, available } = karma;\r\n    return (\r\n        <div className={classes.root}>\r\n            <Badge className={classes.badge} badgeContent={total} color=\"primary\" max={999} showZero>\r\n                <ShoppingCartIcon />\r\n            </Badge>\r\n            <Badge className={classes.badge} badgeContent={spent} color=\"secondary\" max={999} showZero>\r\n                <ShoppingCartIcon />\r\n            </Badge>\r\n            <Badge className={classes.badge} badgeContent={available} color=\"primary\" max={999} showZero>\r\n                <ShoppingCartIcon />\r\n            </Badge>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Karma;","import React, { FC } from \"react\";\r\n\r\nimport { Attribute as AttributeData, MetaType } from \"../model/character\";\r\nimport { getAttributeMetaTypeModifier, getAttributeCost } from \"../model/attributes\";\r\nimport Property from \"./Property\";\r\n\r\ntype Props = {\r\n    attribute: AttributeData;\r\n    metaType: MetaType;\r\n    onUpdate: (attribute: AttributeData) => void;\r\n};\r\n\r\nconst Attribute: FC<Props> = (props: Props) => {\r\n    const { attribute, metaType, onUpdate } = props;\r\n    const modifier = getAttributeMetaTypeModifier(metaType, attribute.name);\r\n\r\n    const formatDisplayValue = (rating: number): string => (rating + modifier).toString();\r\n\r\n    return (\r\n        <Property property={attribute}\r\n        onUpdate={onUpdate}\r\n        min={1}\r\n        max={7}\r\n        step={1}\r\n        formatDisplayValue={formatDisplayValue}\r\n        computeCost={getAttributeCost}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Attribute;","import React, { FC, Fragment } from \"react\";\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Attribute from \"./Attribute\";\r\nimport { Attribute as AttributeData, isAwakened } from \"../model/character\";\r\nimport { ActionType } from \"../reducer\";\r\nimport { getAttributesCost } from \"../model/attributes\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n    header: {\r\n        marginBottom: 20,\r\n        paddingLeft: 16,\r\n        paddingTop: 12,\r\n        fontWeight: 700,\r\n    }\r\n});\r\n\r\nconst AttributeList: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const character = useGlobalState(\"selectedCharacter\");\r\n    const classes = useStyles();\r\n\r\n    const { attributes, metaType } = character;\r\n\r\n    const filteredAttributes = attributes.filter(a => isAwakened(character) || a.name !== \"Magic\");\r\n\r\n    const attributesCost = getAttributesCost(character);\r\n\r\n    const onUpdate = (attribute: AttributeData) => {\r\n        const newAttributes = [ ...attributes ];\r\n        const attributeIndex = newAttributes.findIndex(a => a.name === attribute.name);\r\n        newAttributes[attributeIndex] = attribute;\r\n        dispatch({\r\n            type: ActionType.UpdateCharacter,\r\n            data: { ...character, attributes: newAttributes }\r\n        });\r\n    };\r\n    return (\r\n        <Fragment>\r\n            <Typography className={classes.header}>Attributes ({attributesCost})</Typography>\r\n            <List>\r\n                {\r\n                    filteredAttributes.map(a => (\r\n                        <ListItem key={a.name}>\r\n                            <Attribute attribute={a} metaType={metaType} onUpdate={onUpdate} />\r\n                        </ListItem>\r\n                    ))\r\n                }\r\n            </List>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default AttributeList;","import React, { FC } from \"react\";\r\nimport AttributeList from \"./AttributeList\";\r\n\r\nconst AttributesTab: FC = () => {\r\n\treturn (\r\n\t\t<AttributeList />\r\n\t);\r\n};\r\n\r\nexport default AttributesTab;","import { Character } from \"./character\";\r\n\r\nexport type Contact = {\r\n\tname: string;\r\n\tconnection: number;\r\n\tloyalty: number;\r\n};\r\n\r\nexport function getContactRatingCost(rating: number): number {\r\n\tswitch (rating) {\r\n\t\tcase 1:\r\n\t\t\treturn 2;\r\n\t\tcase 3:\r\n\t\t\treturn 7;\r\n\t\tcase 5:\r\n\t\t\treturn 15;\r\n\t\tcase 7:\r\n\t\t\treturn 30;\r\n\t\tdefault:\r\n\t\t\tthrow new Error();\r\n\t}\r\n}\r\n\r\nexport function getContactCost(contact: Contact): number {\r\n\tlet cost = 0;\r\n\tcost += getContactRatingCost(contact.connection);\r\n\tcost += getContactRatingCost(contact.loyalty);\r\n\treturn cost;\r\n}\r\n\r\nexport function getFreeContactPoints(character: Character): number {\r\n    const charisma = character.attributes.find(a => a.name === \"Charisma\");\r\n    if (charisma === undefined) {\r\n        throw new Error(`Character '${character.streetName}' has no attribute 'Charisma'`);\r\n    }\r\n    const willpower = character.attributes.find(a => a.name === \"Willpower\");\r\n    if (willpower === undefined) {\r\n        throw new Error(`Character '${character.streetName}' has no attribute 'Willpower'`);\r\n    }\r\n    return (charisma.rating + willpower.rating) * 10;\r\n}\r\n\r\nexport function getAllContactsCost(character: Character): number {\r\n\treturn character.contacts.map(c => getContactCost(c)).reduce((a, b) => a + b, 0);\r\n}","import React, { FC, Fragment } from \"react\";\r\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\r\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\r\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { Contact as ContactData, getContactCost, getContactRatingCost } from \"../model/contact\";\r\nimport Property from \"./Property\";\r\nimport { NamedProperty } from \"../model/character\";\r\nimport { useGlobalState } from \"../context\";\r\nimport { getMaxConnection } from \"../model/create-options\";\r\n\r\nconst useStyles = makeStyles({\r\n\theaderLabel: {\r\n\t\tfontWeight: 700,\r\n\t},\r\n\tdetails: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"column\",\r\n\t},\r\n\trating: {\r\n\t\tmarginTop: 30,\r\n\t}\r\n});\r\n\r\ntype Props = {\r\n\tcontact: ContactData;\r\n\tonUpdate: (contact: ContactData) => void;\r\n};\r\nconst Contact: FC<Props> = (props: Props) => {\r\n\tconst { contact, onUpdate } = props;\r\n\r\n\tconst options = useGlobalState(\"selectedCharacter\").options;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tconst contactCost = getContactCost(contact);\r\n\r\n\tconst connection: NamedProperty = { name: \"Connection\", rating: contact.connection };\r\n\tconst onUpdateConnection = (updatedConnection: NamedProperty) => {\r\n\t\tconst updatedContact = { ...contact, connection: updatedConnection.rating };\r\n\t\tonUpdate(updatedContact);\r\n\t};\r\n\tconst loyalty: NamedProperty = { name: \"Loyalty\", rating: contact.loyalty };\r\n\tconst onUpdateLoyalty = (updatedLoyalty: NamedProperty) => {\r\n\t\tconst updatedContact = { ...contact, loyalty: updatedLoyalty.rating };\r\n\t\tonUpdate(updatedContact);\r\n\t};\r\n\r\n\tconst maxConnection = getMaxConnection(options.connectionLevel);\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<ExpansionPanel defaultExpanded={false}>\r\n\t\t\t\t<ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\r\n\t\t\t\t\t<Typography className={classes.headerLabel}>{contact.name} ({contactCost})</Typography>\r\n\t\t\t\t</ExpansionPanelSummary>\r\n\t\t\t\t<ExpansionPanelDetails>\r\n\t\t\t\t\t<div className={classes.details}>\r\n\t\t\t\t\t\t<div className={classes.rating}>\r\n\t\t\t\t\t\t\t<Property\r\n\t\t\t\t\t\t\t\tproperty={connection}\r\n\t\t\t\t\t\t\t\tonUpdate={onUpdateConnection}\r\n\t\t\t\t\t\t\t\tmin={1}\r\n\t\t\t\t\t\t\t\tmax={maxConnection}\r\n\t\t\t\t\t\t\t\tstep={2}\r\n\t\t\t\t\t\t\t\tformatDisplayValue={(value => value.toString())}\r\n\t\t\t\t\t\t\t\tcomputeCost={getContactRatingCost}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className={classes.rating}>\r\n\t\t\t\t\t\t\t<Property\r\n\t\t\t\t\t\t\t\tproperty={loyalty}\r\n\t\t\t\t\t\t\t\tonUpdate={onUpdateLoyalty}\r\n\t\t\t\t\t\t\t\tmin={1}\r\n\t\t\t\t\t\t\t\tmax={5}\r\n\t\t\t\t\t\t\t\tstep={2}\r\n\t\t\t\t\t\t\t\tformatDisplayValue={(value => value.toString())}\r\n\t\t\t\t\t\t\t\tcomputeCost={getContactRatingCost}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</ExpansionPanelDetails>\r\n\t\t\t</ExpansionPanel>\r\n\t\t</Fragment>\r\n\t);\r\n}\r\n\r\nexport default Contact;","import React, { FC, Fragment } from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport PickerButton from \"./PickerButton\";\r\nimport Contact from \"./Contact\";\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport { Contact as ContactData, getAllContactsCost, getFreeContactPoints } from \"../model/contact\";\r\nimport { UpdateCharacterData, ActionType, AddCustomItemData } from \"../reducer\";\r\nimport { getChildItems, CustomItem } from \"../model/custom-item\";\r\n\r\nconst useStyles = makeStyles({\r\n\theader: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"row\",\r\n\t},\r\n\theaderLabel: {\r\n\t\tlineHeight: 3,\r\n\t\tfontWeight: 700,\r\n\t},\r\n});\r\n\r\nconst breadcrums = [\"Contacts\"];\r\nconst parentPath = breadcrums.join(\".\");\r\n\r\nconst ContactList: FC = () => {\r\n\tconst classes = useStyles();\r\n\tconst dispatch = useDispatch();\r\n\tconst character = useGlobalState(\"selectedCharacter\");\r\n\tconst allContacts = useGlobalState(\"allContacts\");\r\n\tconst customItems = useGlobalState(\"customItems\");\r\n\tconst { contacts: selectedContacts } = character;\r\n\r\n\tselectedContacts.sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n\tconst contactsCost = getAllContactsCost(character);\r\n\tconst freeContactPoints = getFreeContactPoints(character);\r\n    const totalCost = contactsCost - freeContactPoints;\r\n\tconst headerLabel = `Contacts (${contactsCost} - ${freeContactPoints} = ${totalCost})`;\r\n\t\r\n\tallContacts.push(...getChildItems(customItems, parentPath));\r\n    allContacts.sort((a, b) => a.Name.localeCompare(b.Name));\r\n\r\n\tconst onContactUpdate = (contact: ContactData) => {\r\n\t\tconst newContacts = [...selectedContacts];\r\n\t\tconst contactIndex = selectedContacts.findIndex(s => s.name === contact.name);\r\n\t\tif (contactIndex > -1) {\r\n\t\t\tif (contact.connection > 0 && contact.loyalty > 0) {\r\n\t\t\t\tnewContacts[contactIndex] = contact;\r\n\t\t\t} else {\r\n\t\t\t\tnewContacts.splice(contactIndex, 1);\r\n\t\t\t}\r\n\t\t} else if (contact.connection > 0 && contact.loyalty > 0) {\r\n\t\t\tnewContacts.push(contact);\r\n\t\t}\r\n\t\tconst data: UpdateCharacterData = { ...character, contacts: newContacts };\r\n\t\tdispatch({ type: ActionType.UpdateCharacter, data });\r\n\t};\r\n\r\n\tconst addContact = (name: string) => {\r\n\t\tonContactUpdate({ name, connection: 1, loyalty: 1 });\r\n\t};\r\n\r\n\tconst removeContact = (name: string) => {\r\n\t\tonContactUpdate({ name, connection: -1, loyalty: -1 });\r\n\t};\r\n\r\n\tconst createNewContact = (item: CustomItem) => {\r\n        const path = `${parentPath}.${item.Name}`;\r\n        const data: AddCustomItemData = { path, item: item };\r\n        dispatch({ type: ActionType.AddCustomItem, data });\r\n    };\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<div className={classes.header}>\r\n\t\t\t\t<PickerButton\r\n\t\t\t\t\tbreadcrums={breadcrums}\r\n\t\t\t\t\tvalues={allContacts}\r\n\t\t\t\t\tselectedValueNames={selectedContacts.map(s => s.name)}\r\n\t\t\t\t\taddValue={addContact}\r\n\t\t\t\t\tremoveValue={removeContact}\r\n\t\t\t\t\tallowNewValues\r\n\t\t\t\t\tcreateValue={createNewContact}\r\n\t\t\t\t/>\r\n\t\t\t\t<Typography className={classes.headerLabel}>{headerLabel}</Typography>\r\n\t\t\t</div>\r\n\t\t\t<List>\r\n\t\t\t\t{\r\n\t\t\t\t\tselectedContacts.map(c => (\r\n\t\t\t\t\t\t<Contact key={c.name} contact={c} onUpdate={onContactUpdate} />\r\n\t\t\t\t\t))\r\n\t\t\t\t}\r\n\t\t\t\t</List>\r\n\t\t</Fragment>\r\n\t);\r\n}\r\n\r\nexport default ContactList;","import React, { FC } from \"react\";\r\nimport ContactList from \"./ContactList\";\r\n\r\nconst ContactsTab: FC = () => {\r\n\treturn (\r\n\t\t<ContactList />\r\n\t);\r\n}\r\n\r\nexport default ContactsTab;","import React, { FC } from \"react\";\r\nimport { useGlobalState, useDispatch } from \"../context\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\nimport { Item } from \"../model/item\";\r\nimport GroupContainer from \"./GroupContainer\";\r\n\r\nconst MagicTab: FC = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst character = useGlobalState(\"selectedCharacter\");\r\n\tconst { spells } = character;\r\n\tconst allSpells = useGlobalState(\"allSpells\");\r\n\r\n\tconst createSpellCostLabel = (_item: Item) => {\r\n\t\treturn \"5\";\r\n\t};\r\n\r\n\tconst createSpellLabel = (item: Item) => {\r\n\t\tconst { name } = item;\r\n\t\treturn `${name} (5)`;\r\n\t};\r\n\r\n\tconst handleUpdateSpells = (newSpells: Item[]) => {\r\n\t\tconst data: UpdateCharacterData = { ...character, spells: newSpells };\r\n\t\tdispatch({ type: ActionType.UpdateCharacter, data });\r\n\t};\r\n\treturn (\r\n\t\t<GroupContainer\r\n\t\t\tlabel=\"Spells\"\r\n\t\t\titems={spells}\r\n\t\t\tallItems={allSpells}\r\n\t\t\tcreateItemLabel={createSpellLabel}\r\n\t\t\tcreateItemCostLabel={createSpellCostLabel}\r\n\t\t\tonUpdateItems={handleUpdateSpells}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport default MagicTab;","import React, { FC, Fragment } from \"react\";\r\nimport { useGlobalState, useDispatch } from \"../context\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\nimport { getChildNames, getChildSet } from \"../model/dictionary\";\r\nimport GroupContainer from \"./GroupContainer\";\r\nimport { Item, getItemSubset } from \"../model/item\";\r\nimport { sentenceCase } from \"change-case\";\r\nimport { gearRoot, computeItemCost, Grade } from \"../model/gear\";\r\n\r\nconst GearTab: FC = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst character = useGlobalState(\"selectedCharacter\");\r\n\tconst options = character.options;\r\n\tconst { gear } = character;\r\n\tconst allGear = useGlobalState(\"allGear\");\r\n\r\n\tconst createGearCostLabel = (item: Item) => {\r\n\t\tconst cost = computeItemCost(item, allGear, options.gearLevel);\r\n\t\treturn `¥${cost}`;\r\n\t};\r\n\r\n\tconst createGearLabel= (item: Item) => {\r\n\t\tconst { name } = item;\r\n\t\tconst costLabel = createGearCostLabel(item);\r\n\t\tlet label = `${name} (${costLabel})`;\r\n\t\tconst augmentation = item.path.startsWith(`${gearRoot}.augmentations`);\r\n\t\tif (augmentation) {\r\n\t\t\tlabel += ` [${item.grade || Grade.Alpha}: ${item.essence || 0}E]`;\r\n\t\t}\r\n\t\treturn label;\r\n\t};\r\n\r\n\tconst handleUpdateGear = (name: string, newSubGear: Item[]) => {\r\n\t\tconst newGear = gear.filter(g => !g.path.startsWith(`${gearRoot}.${name}`));\r\n\t\tnewGear.push(...newSubGear);\r\n\t\tconst data: UpdateCharacterData = { ...character, gear: newGear };\r\n\t\tdispatch({ type: ActionType.UpdateCharacter, data });\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t{\r\n\t\t\t\tgetChildNames(allGear, gearRoot).map(name =>\r\n\t\t\t\t\t<GroupContainer\r\n\t\t\t\t\t\tkey={name}\r\n\t\t\t\t\t\tlabel={sentenceCase(name)}\r\n\t\t\t\t\t\titems={getItemSubset(gear, `${gearRoot}.${name}`)}\r\n\t\t\t\t\t\tallItems={getChildSet(allGear, `${gearRoot}.${name}`)}\r\n\t\t\t\t\t\tcreateItemLabel={createGearLabel}\r\n\t\t\t\t\t\tcreateItemCostLabel={createGearCostLabel}\r\n\t\t\t\t\t\tonUpdateItems={newItems => handleUpdateGear(name, newItems)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default GearTab;","import { Character } from \"./character\";\r\nimport { Item } from \"./item\";\r\nimport { Dictionary, transformAllItems } from \"./dictionary\";\r\n\r\nexport type Spell = {\r\n\tcost: string;\r\n} & Item;\r\n\r\nexport const spellsRoot = \"spells\";\r\n\r\nexport function transformAllSpells(allData: any): Dictionary<Spell[]> {\r\n\tconst allSpells: Dictionary<Spell[]> = {};\r\n\ttransformAllItems(spellsRoot, allData, allSpells, transformSpellValues);\r\n\treturn allSpells;\r\n}\r\n\r\nfunction transformSpellValues(path: string, values: any[]): Spell[] {\r\n\tconst spells: Spell[] = []\r\n\tfor (const value of values) {\r\n\t\tconst name = value[\"Name\"];\r\n\t\tspells.push({ path, name, cost: \"5\" });\r\n\t}\r\n\treturn spells;\r\n}\r\n\r\nexport function getSpellsCost(spells: Item[]): number {\r\n\treturn spells.length * 5;\r\n}\r\n\r\nexport function getCharacterSpellsCost(character: Character): number {\r\n\treturn getSpellsCost(character.spells);\r\n}","import React, { FC } from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n\troot: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"row\",\r\n\t\tmarginLeft: 10,\r\n\t\tmarginTop: 10,\r\n\t},\r\n\tname: {\r\n\t\tlineHeight: \"40px\"\r\n\t},\r\n\tvalue: {\r\n\t\tmarginLeft: 5,\r\n\t\tcolor: theme.palette.getContrastText(theme.palette.primary.main),\r\n\t\tbackgroundColor: theme.palette.primary.main,\r\n\t}\r\n}));\r\n\r\ntype Props = {\r\n\tname: string;\r\n\tvalue: number;\r\n}\r\nconst ReadOnlyProperty: FC<Props> = (props: Props) => {\r\n\tconst { name, value } = props;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\treturn (\r\n\t\t<div className={classes.root}>\r\n\t\t\t<Typography className={classes.name}>{name}</Typography>\r\n\t\t\t<Avatar className={classes.value}>{value}</Avatar>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ReadOnlyProperty;","import React, { FC } from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport { Button, ButtonGroup, makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n\troot: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"row\",\r\n\t\tmarginLeft: 10,\r\n\t\tmarginTop: 10,\r\n\t\talignItems: \"center\",\r\n\t\tmarginRight: 5\r\n\t},\r\n\tlabel: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"column\"\r\n\t},\r\n\tname: {\r\n\t\tlineHeight: \"40px\"\r\n\t},\r\n\tvalue: {\r\n\t\tmarginLeft: 5,\r\n\t\tcolor: theme.palette.getContrastText(theme.palette.primary.main),\r\n\t\tbackgroundColor: theme.palette.primary.main,\r\n\t},\r\n\tbutton: {\r\n\t\tpadding: 0,\r\n\t\tmarginLeft: 5,\r\n\t\tlineHeight: 1.2\r\n\t},\r\n}));\r\n\r\ntype Props = {\r\n\tname: string;\r\n\tvalue: number;\r\n\tmodifier: number;\r\n\tupdateModifier: (newValue: number) => void;\r\n}\r\nconst ModifiableProperty: FC<Props> = (props: Props) => {\r\n\tconst { name, value, modifier, updateModifier } = props;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tconst onClickPlus = () => {\r\n\t\tupdateModifier(modifier + 1);\r\n\t};\r\n\tconst onClickMinus = () => {\r\n\t\tupdateModifier(modifier - 1);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className={classes.root}>\r\n\t\t\t<Typography className={classes.name}>{name}</Typography>\r\n\t\t\t<Badge badgeContent={modifier} color=\"secondary\" max={9}>\r\n\t\t\t\t<Avatar className={classes.value}>{value + modifier}</Avatar>\r\n\t\t\t</Badge>\r\n\t\t\t<ButtonGroup orientation=\"vertical\">\r\n\t\t\t\t<Button className={classes.button} onClick={onClickPlus}>+</Button>\r\n\t\t\t\t<Button className={classes.button} onClick={onClickMinus}>-</Button>\r\n\t\t\t</ButtonGroup>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ModifiableProperty;","import React, { FC, Fragment } from \"react\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport { getEffectiveAttributeRating, getNaturalAttributeRating } from \"../model/attributes\";\r\nimport ReadOnlyProperty from \"./ReadOnlyProperty\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { isAwakened, MetaType } from \"../model/character\";\r\nimport { getModifier } from \"../model/modifier\";\r\nimport ModifiableProperty from \"./ModifiableProperty\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\n\r\nconst useStyles = makeStyles({\r\n\theader: {\r\n\t\tmarginTop: 10,\r\n\t\tmarginLeft: 5,\r\n\t},\r\n\tsection: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"row\",\r\n\t\tmarginBottom: 10,\r\n\t},\r\n});\r\n\r\nconst StatsTab: FC = () => {\r\n\r\n\tconst classes = useStyles();\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst character = useGlobalState(\"selectedCharacter\");\r\n\r\n\tconst body = getNaturalAttributeRating(character, \"Body\");\r\n\tconst agility = getNaturalAttributeRating(character, \"Agility\");\r\n\tconst reaction = getNaturalAttributeRating(character, \"Reaction\");\r\n\tconst strength = getNaturalAttributeRating(character, \"Strength\");\r\n\tconst charisma = getNaturalAttributeRating(character, \"Charisma\");\r\n\tconst intuition = getNaturalAttributeRating(character, \"Intuition\");\r\n\tconst logic = getNaturalAttributeRating(character, \"Logic\");\r\n\tconst willpower = getNaturalAttributeRating(character, \"Willpower\");\r\n\r\n\tlet essence = 6;\r\n\r\n\tfor (const item of character.gear) {\r\n\t\tif (item.essence !== undefined) {\r\n\t\t\tessence -= parseFloat(item.essence);\r\n\t\t}\r\n\t}\r\n\r\n\tconst awakened = isAwakened(character);\r\n\tlet magic = getNaturalAttributeRating(character, \"Magic\");\r\n\tconst essenceLost = Math.ceil(6 - essence);\r\n\tmagic -= essenceLost;\r\n\r\n\tconst athletics = character.activeSkills.find(s => s.name === \"Athletics\")?.rating || 0;\r\n\r\n\tconst initiative = getEffectiveAttributeRating(character, \"Reaction\") + getEffectiveAttributeRating(character, \"Intuition\");\r\n\tconst initiativePasses = 1;\r\n\r\n\tconst physicalBoxes = 8 + Math.ceil(getEffectiveAttributeRating(character, \"Body\") / 2);\r\n\tconst stunBoxes = 8 + Math.ceil(getEffectiveAttributeRating(character, \"Willpower\") / 2);\r\n\r\n\tlet sneaking = agility;\r\n\tif (character.metaType !== MetaType.Dwarf) {\r\n\t\tsneaking += 1;\r\n\t}\r\n\r\n\tlet walking = sneaking + athletics;\r\n\tif (character.metaType !== MetaType.Dwarf) {\r\n\t\twalking += 2;\r\n\t}\r\n\r\n\tconst running = walking * 2;\r\n\r\n\tconst ModifierProperty = (props: { name: string, value: number} ) => {\r\n\t\tconst {name, value} = props;\r\n\t\tconst modifier = getModifier(character, name);\r\n\t\tconst updateModifier = (newValue: number) => {\r\n\t\t\tconst newModifiers = [...character.modifiers]\r\n\t\t\tconst modifierIndex = newModifiers.findIndex(m => m.name === name);\r\n\t\t\tif (modifierIndex > -1) {\r\n\t\t\t\tnewModifiers.splice(modifierIndex, 1);\r\n\t\t\t}\r\n\t\t\tnewModifiers.push({\r\n\t\t\t\tname,\r\n\t\t\t\trating: newValue\r\n\t\t\t});\r\n\t\t\tconst data: UpdateCharacterData = { ...character, modifiers: newModifiers };\r\n\t\t\tdispatch({ type: ActionType.UpdateCharacter, data });\r\n\t\t};\r\n\t\treturn (\r\n\t\t\t<ModifiableProperty\r\n\t\t\t\tname={name}\r\n\t\t\t\tvalue={value}\r\n\t\t\t\tmodifier={modifier}\r\n\t\t\t\tupdateModifier={updateModifier}\r\n\t\t\t\t/>\r\n\t\t);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<Typography className={classes.header}>Attributes</Typography>\r\n\t\t\t<Divider />\r\n\t\t\t<div className={classes.section}>\r\n\t\t\t\t<ModifierProperty name=\"Body\" value={body} />\r\n\t\t\t\t<ModifierProperty name=\"Agility\" value={agility} />\r\n\t\t\t\t<ModifierProperty name=\"Reaction\" value={reaction} />\r\n\t\t\t\t<ModifierProperty name=\"Strength\" value={strength} />\r\n\t\t\t</div>\r\n\t\t\t<div className={classes.section}>\r\n\t\t\t\t<ModifierProperty name=\"Charisma\" value={charisma} />\r\n\t\t\t\t<ModifierProperty name=\"Intuition\" value={intuition} />\r\n\t\t\t\t<ModifierProperty name=\"Logic\" value={logic} />\r\n\t\t\t\t<ModifierProperty name=\"Willpower\" value={willpower} />\r\n\t\t\t</div>\r\n\t\t\t<div className={classes.section}>\r\n\t\t\t\t<ReadOnlyProperty name=\"Essence\" value={essence} />\r\n\t\t\t\t{\r\n\t\t\t\t\tawakened ?\r\n\t\t\t\t\t<ReadOnlyProperty name=\"Magic\" value={magic} />\r\n\t\t\t\t\t:\r\n\t\t\t\t\tnull\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t\t<Typography className={classes.header}>Initiative</Typography>\r\n\t\t\t<Divider />\r\n\t\t\t<div className={classes.section}>\r\n\t\t\t\t<ModifierProperty name=\"Initiative\" value={initiative} />\r\n\t\t\t\t<ModifierProperty name=\"Initiative Passes\" value={initiativePasses} />\r\n\t\t\t</div>\r\n\t\t\t<Typography className={classes.header}>Condition Monitor</Typography>\r\n\t\t\t<Divider />\r\n\t\t\t<div className={classes.section}>\r\n\t\t\t\t<ReadOnlyProperty name=\"Physical Boxes\" value={physicalBoxes} />\r\n\t\t\t\t<ReadOnlyProperty name=\"Stun Boxes\" value={stunBoxes} />\r\n\t\t\t</div>\r\n\t\t\t<Typography className={classes.header}>Movement</Typography>\r\n\t\t\t<Divider />\r\n\t\t\t<div className={classes.section}>\r\n\t\t\t\t<ReadOnlyProperty name=\"Sneaking\" value={sneaking} />\r\n\t\t\t\t<ReadOnlyProperty name=\"Walking\" value={walking} />\r\n\t\t\t\t<ReadOnlyProperty name=\"Running\" value={running} />\r\n\t\t\t</div>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default StatsTab;","export function createPublicUrl(relativeUrl: string): string {\r\n    return `${process.env.PUBLIC_URL}/${relativeUrl}`;\r\n}","import React, { FC } from \"react\";\r\nimport { Dialog, DialogContent, DialogActions, DialogContentText, Button } from \"@material-ui/core\";\r\n\r\ntype Props = {\r\n\topen: boolean;\r\n\tonChoice: (accept: boolean) => void;\r\n\tcontent: string;\r\n};\r\nconst ConfirmationDialog: FC<Props> = (props: Props) => {\r\n\tconst { open, onChoice, content } = props;\r\n\r\n\tconst handleYes = () => {\r\n\t\tonChoice(true);\r\n\t};\r\n\r\n\tconst handleNo = () => {\r\n\t\tonChoice(false);\r\n\t};\r\n\treturn (\r\n\t\t<Dialog\r\n\t\t\topen={open}\r\n\t\t\tonClose={handleNo}\r\n\t\t>\r\n\t\t\t<DialogContent>\r\n\t\t\t\t<DialogContentText>\r\n\t\t\t\t\t{content}\r\n\t\t\t\t</DialogContentText>\r\n\t\t\t</DialogContent>\r\n\t\t\t<DialogActions>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tonClick={handleYes}\r\n\t\t\t\t\tcolor=\"secondary\"\r\n\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t>\r\n\t\t\t\t\tYes\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tonClick={handleNo}\r\n\t\t\t\t\tcolor=\"secondary\"\r\n\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\tautoFocus\r\n\t\t\t\t>\r\n\t\t\t\t\tNo\r\n\t\t\t\t</Button>\r\n\t\t\t</DialogActions>\r\n\t\t</Dialog>\r\n\t);\r\n};\r\n\r\nexport default ConfirmationDialog;","import React, { Fragment, FC, ChangeEvent } from \"react\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport GetAppIcon from \"@material-ui/icons/GetApp\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\ntype Props = {\r\n\tsaveData: (data: string) => void;\r\n};\r\nconst ImportButton: FC<Props> = (props: Props) =>{\r\n\tconst { saveData } = props;\r\n\r\n\tconst handleFileChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n\t\tconst files = event.target.files;\r\n\t\tif (!files || files.length === 0) {\r\n\t\t\tconsole.log(`No files selected`);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst file = files[0];\r\n\t\tconst reader = new FileReader();\r\n\t\treader.onload = e => {\r\n\t\t\tif (!e.target) {\r\n\t\t\t\tthrow new Error(`Failed to load data from file '${file.name}'`);\r\n\t\t\t}\r\n\t\t\tconst data = e.target.result;\r\n\t\t\tif (!data) {\r\n\t\t\t\tthrow new Error(`File '${file.name}' has no data`);\r\n\t\t\t}\r\n\t\t\tsaveData(data as string);\r\n\t\t};\r\n\t\treader.readAsText(file);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<input\r\n\t\t\t\taccept=\"application/json\"\r\n\t\t\t\thidden\r\n\t\t\t\tid=\"import-file\"\r\n\t\t\t\ttype=\"file\"\r\n\t\t\t\tonChange={handleFileChange}\r\n\t\t\t/>\r\n\t\t\t<label htmlFor=\"import-file\">\r\n\t\t\t\t<Tooltip title=\"Import Character\">\r\n\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\tcolor=\"secondary\"\r\n\t\t\t\t\t\tcomponent=\"span\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<GetAppIcon />\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t</Tooltip>\r\n\t\t\t</label> \r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default ImportButton;","import React, { FC } from \"react\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport PublishIcon from \"@material-ui/icons/Publish\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\ntype Props = {\r\n\tfilename: string;\r\n\tgenerateData: () => string;\r\n};\r\nconst ExportButton: FC<Props> = (props: Props) => {\r\n\tconst { filename, generateData } = props;\r\n\r\n\tconst handleClick = () => {\r\n\t\tconst data = generateData();\r\n\t\tconst element = document.createElement('a');\r\n\t\telement.setAttribute('href', 'data:application/json;charset=utf-8,' + encodeURIComponent(data));\r\n\t\telement.setAttribute('download', filename);\r\n\t\r\n\t\telement.style.display = 'none';\r\n\t\tdocument.body.appendChild(element);\r\n\t\r\n\t\telement.click();\r\n\t\r\n\t\tdocument.body.removeChild(element);\r\n\t};\r\n\treturn (\r\n\t\t<Tooltip title=\"Export Character\">\r\n\t\t\t<IconButton\r\n\t\t\t\tonClick={handleClick}\r\n\t\t\t\tcolor=\"secondary\"\r\n\t\t\t>\r\n\t\t\t\t<PublishIcon />\r\n\t\t\t</IconButton>\r\n\t\t</Tooltip>\r\n\t);\r\n};\r\n\r\nexport default ExportButton;","import React, { FC } from \"react\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { ALL_LEVELS, Level } from \"../model/create-options\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n    control: {\r\n\t\tmargin: 8,\r\n\t\tminWidth: 100,\r\n\t},\r\n\tlabel: {\r\n\t\tpadding: 4,\r\n\t},\r\n});\r\n\r\ntype Props = {\r\n\tid: string;\r\n\tlabel: string;\r\n\tvalue: Level;\r\n\tupdateValue: (newValue: Level) => void;\r\n}\r\nconst LevelSelect: FC<Props> = (props: Props) => {\r\n\tconst { id, label, value, updateValue } = props;\r\n\tconst selectId = `${id}-level-select`;\r\n\tconst labelId = `${selectId}-label`;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tconst handleOnChange = (event: React.ChangeEvent<{ name?: string; value: unknown }>, child: React.ReactNode) => {\r\n\t\tupdateValue(event.target.value as Level);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<FormControl className={classes.control}>\r\n\t\t\t<InputLabel id={labelId} className={classes.label}>{label}</InputLabel>\r\n\t\t\t<Select\r\n\t\t\t\tlabelId={labelId}\r\n\t\t\t\tid={selectId}\r\n\t\t\t\tvalue={value}\r\n\t\t\t\tonChange={handleOnChange}\r\n\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tALL_LEVELS.map(l => <MenuItem key={l} value={l}>{l}</MenuItem>)\r\n\t\t\t\t\t}\r\n\t\t\t</Select>\r\n\t\t</FormControl>\r\n\t);\r\n};\r\n\r\nexport default LevelSelect;","import React, { FC } from \"react\";\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport { ActionType, UpdateCreateOptionsData } from \"../reducer\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport LevelSelect from \"./LevelSelect\";\r\nimport { CreateOptions } from \"../model/create-options\";\r\n\r\nconst useStyles = makeStyles({\r\n\troot: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"row\",\r\n\t},\r\n});\r\n\r\nconst CreateOptionsPanel: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const character = useGlobalState(\"selectedCharacter\");\r\n    const options = character.options;\r\n    const { karmaLevel, connectionLevel, nuyenLevel, gearLevel } = options;\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleOnOptionsChange = (newOptions: CreateOptions) => {\r\n        const data: UpdateCreateOptionsData = newOptions;\r\n        dispatch({ type: ActionType.UpdateCreateOptions, data });\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <LevelSelect id=\"karma\" label=\"Karma\" value={karmaLevel} updateValue={(newValue) => handleOnOptionsChange({...options, karmaLevel: newValue})} />\r\n            <LevelSelect id=\"connection\" label=\"Connection\" value={connectionLevel} updateValue={(newValue) => handleOnOptionsChange({...options, connectionLevel: newValue})} />\r\n            <LevelSelect id=\"nuyen\" label=\"Nuyen\" value={nuyenLevel} updateValue={(newValue) => handleOnOptionsChange({...options, nuyenLevel: newValue})} />\r\n            <LevelSelect id=\"gear\" label=\"Gear\" value={gearLevel} updateValue={(newValue) => handleOnOptionsChange({...options, gearLevel: newValue})} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreateOptionsPanel;","import React, { FC, useState, useEffect } from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SelectCharacter from \"./SelectCharacter\";\r\nimport CharacterName from \"./CharacterName\";\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport { ActionType, LoadSkillsData, LoadContactsData, LoadQualitiesData, LoadSpellsData, LoadGearData, ImportCharacterData } from \"../reducer\";\r\nimport CharacterTab from \"./CharacterTab\";\r\nimport SkillsTab from \"./SkillsTab\";\r\nimport Karma from \"./Karma\";\r\nimport AttributesTab from \"./AttributesTab\";\r\nimport ContactsTab from \"./ContactsTab\";\r\nimport { getProfessionalismCost, isAwakened } from \"../model/character\";\r\nimport MagicTab from \"./MagicTab\";\r\nimport GearTab from \"./GearTab\";\r\nimport { transformAllGear, getCharacterGearNuyenCost, getCharacterGearKarmaCost } from \"../model/gear\";\r\nimport { getMetaTypeCost } from \"../model/meta-type\";\r\nimport { transformAllQualities, getCharacterQualitiesCost } from \"../model/quality\";\r\nimport { getAllContactsCost } from \"../model/contact\";\r\nimport { getCharacterSpellsCost, transformAllSpells } from \"../model/magic\";\r\nimport { getSkillsCost } from \"../model/skills\";\r\nimport { getAttributesCost } from \"../model/attributes\";\r\nimport StatsTab from \"./StatsTab\";\r\nimport { createPublicUrl } from \"../request\";\r\nimport ConfirmationDialog from \"./ConfirmationDialog\";\r\nimport ImportButton from \"./ImportButton\";\r\nimport ExportButton from \"./ExportButton\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport CreateOptionsPanel from \"./CreateOptionsPanel\";\r\n\r\nconst useStyles = makeStyles({\r\n    bar: {\r\n        flexGrow: 1,\r\n        display: \"flex\",\r\n        alignItems: \"center\"\r\n    }\r\n});\r\n\r\nconst CharacterCreator: FC = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const selectedCharacter = useGlobalState(\"selectedCharacter\");\r\n    const allQualities = useGlobalState(\"allQualities\");\r\n    const allGear = useGlobalState(\"allGear\");\r\n    const options = selectedCharacter.options;\r\n\r\n    const [drawerOpen, setDrawerOpen] = useState(false);\r\n    const [selectedTab, setSelectedTab] = useState(0);\r\n\r\n    useEffect(() => {\r\n        fetch(createPublicUrl(\"data/qualities.json\"))\r\n            .then(response => response.json())\r\n            .then(qualities => {\r\n                const data = transformAllQualities(qualities) as LoadQualitiesData;\r\n                dispatch({ type: ActionType.LoadQualities, data });\r\n            })\r\n            .catch(error => {\r\n                console.error(`Error occured loading qualities: ${error.message}\\n${error.stack}`);\r\n            });\r\n        fetch(createPublicUrl(\"data/skills.json\"))\r\n            .then(response => response.json())\r\n            .then(skills => {\r\n                const data = skills as LoadSkillsData;\r\n                dispatch({ type: ActionType.LoadSkills, data });\r\n            })\r\n            .catch(error => {\r\n                console.error(`Error occured loading skills: ${error.message}\\n${error.stack}`);\r\n            });\r\n        fetch(createPublicUrl(\"data/contacts.json\"))\r\n            .then(response => response.json())\r\n            .then(contacts => {\r\n                const data = contacts.all as LoadContactsData;\r\n                dispatch({ type: ActionType.LoadContacts, data });\r\n            })\r\n            .catch(error => {\r\n                console.error(`Error occured loading contacts: ${error.message}\\n${error.stack}`);\r\n            });\r\n        fetch(createPublicUrl(\"data/magic.json\"))\r\n            .then(response => response.json())\r\n            .then(magic => {\r\n                const spellData = transformAllSpells(magic.spells) as LoadSpellsData;\r\n                dispatch({ type: ActionType.LoadSpells, data: spellData });\r\n            })\r\n            .catch(error => {\r\n                console.error(`Error occured loading magic: ${error.message}\\n${error.stack}`);\r\n            });\r\n        fetch(createPublicUrl(\"data/gear.json\"))\r\n            .then(response => response.json())\r\n            .then(gear => {\r\n                const gearData = transformAllGear(gear) as LoadGearData;\r\n                dispatch({ type: ActionType.LoadGear, data: gearData });\r\n            })\r\n            .catch(error => {\r\n                console.error(`Error occured loading gear: ${error.message}\\n${error.stack}`);\r\n            });\r\n    }, [dispatch]);\r\n\r\n    const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\r\n\r\n    const handleDelete = () =>{\r\n        setShowDeleteConfirmation(true);\r\n    };\r\n\r\n    const handleDeleteChoice = (accept: boolean) => {\r\n        if (accept) {\r\n            dispatch({ type: ActionType.ClearCharacter });\r\n        }\r\n        setShowDeleteConfirmation(false);\r\n    };\r\n\r\n    const characterCost = getMetaTypeCost(selectedCharacter.metaType) + getCharacterQualitiesCost(selectedCharacter, allQualities) + getProfessionalismCost(selectedCharacter.professionalism);\r\n    const attributesCost = getAttributesCost(selectedCharacter);\r\n    const skillsCost = getSkillsCost(selectedCharacter);\r\n    const contactsCost = getAllContactsCost(selectedCharacter);\r\n    const magicCost = getCharacterSpellsCost(selectedCharacter);\r\n    const gearNuyenCost = getCharacterGearNuyenCost(selectedCharacter, allGear, options.gearLevel);\r\n    const getGearKarmaCost = getCharacterGearKarmaCost(gearNuyenCost, selectedCharacter.options.nuyenLevel);\r\n\r\n    let gearNuyenCostLabel: string;\r\n    if (gearNuyenCost < 1000) {\r\n        gearNuyenCostLabel = `¥${gearNuyenCost}`;\r\n    } else if (gearNuyenCost < 1000000) {\r\n        gearNuyenCostLabel = `¥${Math.round(gearNuyenCost / 100) / 10}K`;\r\n    } else {\r\n        gearNuyenCostLabel = `¥${Math.round(gearNuyenCost / 100000) / 10}M`;\r\n    }\r\n\r\n    const onTabChange = (_event: React.ChangeEvent<{}>, newValue: number) => {\r\n        setSelectedTab(newValue);\r\n    };\r\n\r\n    const awakened = isAwakened(selectedCharacter);\r\n\r\n    let selectedTabPanel: JSX.Element | null;\r\n    switch (selectedTab) {\r\n        case 0:\r\n            selectedTabPanel = <CharacterTab />;\r\n            break;\r\n        case 1:\r\n            selectedTabPanel = <AttributesTab />;\r\n            break;\r\n        case 2:\r\n            selectedTabPanel = <SkillsTab />;\r\n            break;\r\n        case 3:\r\n            selectedTabPanel = <ContactsTab />;\r\n            break;\r\n        case 4: {\r\n            selectedTabPanel = <GearTab />;\r\n            break;\r\n        }\r\n        case 5: {\r\n            selectedTabPanel = <MagicTab />;\r\n            break;\r\n        }\r\n        case 6: {\r\n            selectedTabPanel = <StatsTab />;\r\n            break;\r\n        }\r\n        default:\r\n            throw new Error(`Unknown tab index ${selectedTab}`);\r\n    }\r\n\r\n    const handleShowCharacters = () => {\r\n        setDrawerOpen(true);\r\n    }\r\n    const handleCloseCharacters = () => {\r\n        setDrawerOpen(false);\r\n    }\r\n\r\n    const importCharacterData = (rawData: string) => {\r\n        const data: ImportCharacterData = JSON.parse(rawData);\r\n        dispatch({ type: ActionType.ImportCharacter, data });\r\n    };\r\n\r\n    const exportFileName = `${selectedCharacter.streetName}.json`;\r\n    const generateCharacterData = () => {\r\n        return JSON.stringify(selectedCharacter);\r\n    };\r\n    \r\n    return (\r\n        <div>\r\n            <AppBar position=\"sticky\" color=\"default\">\r\n                <Toolbar>\r\n                    <Tooltip title=\"Characters\">\r\n                        <IconButton edge=\"start\" onClick={handleShowCharacters} aria-label=\"characters\">\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <div className={classes.bar}>\r\n                        <CharacterName character={selectedCharacter} />\r\n                        <Karma />\r\n                        <CreateOptionsPanel />\r\n                    </div>\r\n                    <ImportButton saveData={importCharacterData} />\r\n                    <ExportButton filename={exportFileName} generateData={generateCharacterData} />\r\n                    <IconButton aria-label=\"clear\" onClick={handleDelete} color=\"secondary\">\r\n                        <ClearIcon />\r\n                    </IconButton>\r\n                </Toolbar>\r\n                <Tabs value={selectedTab} onChange={onTabChange} variant=\"scrollable\">\r\n                    <Tab\r\n                        label={\r\n                            <Badge badgeContent={characterCost} color=\"default\" showZero max={999}>\r\n                                Character\r\n                            </Badge>\r\n                        }\r\n                    />\r\n                    <Tab\r\n                        label={\r\n                            <Badge badgeContent={attributesCost} color=\"default\" showZero max={999}>\r\n                                Attributes\r\n                            </Badge>\r\n                        }\r\n                    />\r\n                    <Tab\r\n                        label={\r\n                            <Badge badgeContent={skillsCost} color=\"default\" showZero max={999}>\r\n                                Skills\r\n                            </Badge>\r\n                        }\r\n                    />\r\n                    <Tab\r\n                        label={\r\n                            <Badge badgeContent={contactsCost} color=\"default\" showZero max={999}>\r\n                                Contacts\r\n                            </Badge>\r\n                        }\r\n                    />\r\n                    <Tab\r\n                        label={\r\n                            <Badge badgeContent={gearNuyenCostLabel} color=\"default\" showZero max={1000000} anchorOrigin={{ vertical: \"top\", horizontal: \"left\" }}>\r\n                                <Badge badgeContent={getGearKarmaCost} color=\"default\" showZero max={999} anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}>\r\n                                    Gear\r\n                                </Badge>\r\n                            </Badge>\r\n                        }\r\n                    />\r\n                    <Tab\r\n                        disabled={!awakened}\r\n                        label={\r\n                            <Badge badgeContent={magicCost} color=\"default\" showZero max={999}>\r\n                                Magic\r\n                            </Badge>\r\n                        }\r\n                    />\r\n                    <Tab label=\"Stats\" />\r\n                </Tabs>\r\n            </AppBar>\r\n            {\r\n                selectedTabPanel\r\n            }\r\n            <Drawer open={drawerOpen} onClose={handleCloseCharacters}>\r\n                <SelectCharacter />\r\n            </Drawer>\r\n            <ConfirmationDialog\r\n                open={showDeleteConfirmation}\r\n                onChoice={handleDeleteChoice}\r\n                content=\"Are you sure you want to delete this character? All data will be lost forever.\"\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CharacterCreator;","import React, { FC, useReducer } from \"react\";\r\nimport { DispatchContext, StateContext } from \"./context\";\r\nimport { reducer, INITIAL_STATE } from \"./reducer\";\r\nimport { State } from \"./model/state\";\r\nimport { loadCharacter, loadCharacters, loadSelectedCharacter } from \"./persistance\";\r\nimport CharacterCreator from \"./component/CharacterCreator\";\r\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        type: \"dark\"\r\n    }\r\n});\r\n\r\nconst App: FC = () => {\r\n    const [state, dispatch] = useReducer(reducer, INITIAL_STATE, (s: State): State => {\r\n        const characters = loadCharacters();\r\n        const selectedCharacterKey = loadSelectedCharacter();\r\n        let selectedCharacter = s.selectedCharacter;\r\n        if (selectedCharacterKey > -1) {\r\n            const selectedCharacterRef = characters.find(c => c.key === selectedCharacterKey);\r\n            if (selectedCharacterRef) {\r\n                const loadedCharacter = loadCharacter(selectedCharacterRef.key);\r\n                if (loadedCharacter) {\r\n                    selectedCharacter = loadedCharacter;\r\n                }\r\n            }\r\n        }\r\n        return { ...s, characters, selectedCharacter };\r\n    });\r\n\r\n    return (\r\n        <DispatchContext.Provider value={dispatch}>\r\n            <StateContext.Provider value={state}>\r\n                <ThemeProvider theme={theme}>\r\n                    <CssBaseline />\r\n                    <CharacterCreator />\r\n                </ThemeProvider>\r\n            </StateContext.Provider>\r\n        </DispatchContext.Provider>\r\n    );\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}