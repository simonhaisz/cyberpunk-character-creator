{"version":3,"sources":["model/character.ts","data/default-character.ts","persistance.ts","model/meta-type.ts","model/attributes.ts","model/skills.ts","model/dictionary.ts","model/quality.ts","model/gear.ts","model/karma.ts","reducer.ts","context.ts","component/CharacterName.tsx","component/SelectCharacter.tsx","data/meta-types.ts","component/ChipCollection.tsx","model/item.ts","component/GradeButton.tsx","component/ItemPickerCard.tsx","component/ItemPickerSection.tsx","component/ItemPickerDialog.tsx","component/ItemPickerButton.tsx","component/GroupContainer.tsx","component/QualitiesSection.tsx","component/CharacterTab.tsx","model/custom-item.ts","component/PickerDialog.tsx","component/PickerButton.tsx","component/Property.tsx","component/Skill.tsx","component/SkillList.tsx","component/ActiveSkillList.tsx","component/KnowledgeSkillList.tsx","component/LanguageSkillList.tsx","component/SkillsTab.tsx","component/Karma.tsx","component/Attribute.tsx","component/AttributeList.tsx","component/AttributesTab.tsx","model/contact.ts","component/Contact.tsx","component/ContactList.tsx","component/ContactsTab.tsx","component/MagicTab.tsx","component/GearTab.tsx","model/magic.ts","component/ReadOnlyProperty.tsx","component/CombatTab.tsx","component/ConfirmationDialog.tsx","component/ExportButton.tsx","component/ImportButton.tsx","component/CharacterCreator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MetaType","isAwakened","character","undefined","qualities","find","q","name","DEFAULT_KEY","DEFAULT_CHARACTER","key","streetName","metaType","Human","attributes","rating","activeSkills","knowledgeSkills","languageSkills","contacts","spells","gear","getDefaultCharacter","CHARACTER_KEY","createCharacterKey","loadCharacter","localStorage","getItem","JSON","parse","saveCharacter","setItem","stringify","SELECTED_CHARACTER_KEY","CUSTOM_ITEM_KEY","createCustomItemKey","path","getMetaTypeCost","Ork","Dwarf","Elf","Troll","Error","getEffectiveAttributeRating","attribute","a","getAttributeModifier","getAttributeCost","getAttributesCost","awakened","cost","getActiveSkillCost","getActiveSkillsCost","map","s","reduce","b","getKnowledgeSkillCost","getKnowledgeSkillsCost","getFreeKnowledgeSkillPoints","intuition","logic","getSkillsCost","activeSkillCost","knowledgeSkillCost","languageSkillCost","freeKnowledgePoints","Math","max","transformAllItems","parentPath","parentData","allItems","transformValues","Object","keys","childName","childPath","childData","isArray","itemCostMap","Map","getItemCost","item","has","get","items","foundItem","g","parseInt","set","itemAvailabilityMap","getChildSet","values","subset","findChildPaths","childPaths","parents","split","components","length","match","i","push","qualitiesRoot","transformQualityValues","value","getCharacterQualitiesCost","allQualities","Grade","gearRoot","transformGearValues","v","data","availability","costLabel","propName","propValue","transformGearItem","test","splitGearItems","finalizeGearItem","itemVersions","groupResult","exec","namePrefix","nameSuffixes","r","trim","itemCount","itemVersion","splitValues","costResult","isNaN","computeItemCost","allGear","baseCost","multiplier","grade","getGradeCostMultipler","getItemAvailability","parseAvailability","legality","Number","NaN","getAvailabilityCostMultiplier","createSavedItem","count","savedItem","Alpha","Used","Beta","Delta","result","console","error","getCharacterGearNuyenCost","nuyen","getCharacterGearKarmaCost","ceil","ActionType","STARTING_KARMA","getDefaultKarma","total","spent","available","getCharacterKarma","karma","state","reducer","action","type","UpdateCharacter","selectedCharacter","characters","handleCharacterUpdate","ImportCharacter","ClearCharacter","removeItem","filter","c","SelectCharacter","characterRef","LoadQualities","LoadSkills","allSkills","LoadContacts","allContacts","LoadGear","LoadSpells","allSpells","LoadCustomItems","customItems","AddCustomItem","newItem","Name","saveCustomItem","INITIAL_STATE","positive","negative","active","knowledge","language","combat","detection","health","illusion","manipulation","index","hasDefaultKey","findIndex","Date","now","DispatchContext","createContext","useDispatch","useContext","StateContext","useGlobalState","property","CharacterName","props","Typography","dispatch","List","subheader","ListSubheader","ListItem","onClick","onCharacterClick","ALL_META_TYPES","useStyles","makeStyles","root","display","flexDirection","flexWrap","justifyContent","chip","marginRight","marginBottom","ChipCollection","createChipLabel","onDeleteValue","classes","className","Badge","badgeContent","invisible","color","anchorOrigin","vertical","horizontal","Chip","label","onDelete","getItemSubset","subItems","startsWith","minWidth","maxWidth","width","GradeButton","disabled","onUpdateGrade","Button","variant","nextGrade","padding","margin","textAlign","ItemPickerCard","createCostLabel","onUpdateItem","hasAny","allowMultiple","includeAvailability","isItemAvailable","includeGrade","Paper","elevation","style","lineHeight","ButtonGroup","toString","newGrade","ItemPickerSection","onUpdateItems","handleUpdate","newItems","Divider","ItemPickerDialog","open","onClose","title","onUpdateAllItems","allPaths","paths","pathToLabel","finalComponent","sentenceCase","useState","group","setGroup","p","Dialog","DialogTitle","DialogContent","Select","id","displayEmpty","onChange","event","target","MenuItem","newAllItems","ItemPickerButton","setOpen","parentPathsToName","componentIndex","parentPathToName","differenceFound","pathIndex","slice","join","getNextParentPaths","parentPaths","setParentPath","menuAnchor","setMenuAnchor","allChildItems","allCountedItems","hasItems","localItems","matchingItems","localItem","matchingItem","IconButton","currentTarget","size","disableRipple","anchorEl","Boolean","handleMenuClick","newCountedItems","includeItem","splice","headerLabel","fontWeight","GroupContainer","createItemLabel","createItemCostLabel","flatItems","ExpansionPanel","defaultExpanded","ExpansionPanelSummary","expandIcon","FormControlLabel","stopPropagation","onFocus","control","ExpansionPanelDetails","toDelete","QualitiesSection","createQualityCostLabel","newQualities","header","marginLeft","field","marginTop","divider","CharacterTab","onCharacterUpdated","updatedCharacter","TextField","id-","e","t","getChildItems","content","ul","PickerDialog","onItemSelectionChange","includeCost","allowNewItems","allowMultiSelection","newItemName","setNewItemName","newItemAvailability","setNewItemAvailability","newItemCost","setNewItemCost","onUpdateNewItem","aria-label","selected","Availability","Cost","ListItemText","findName","editButton","paddingLeft","PickerButton","breadcrums","selectedValueNames","addValue","removeValue","allowNewValues","createValue","findAvailability","findCost","n","createSelectableItem","height","slider","Property","onUpdate","min","step","formatDisplayValue","computeCost","gutterBottom","Slider","marks","valueLabelDisplay","Array","valueLabelFormat","_index","Skill","skill","paddingTop","SkillList","skills","computeSkillCost","onSkillsUpdated","sort","localeCompare","onSkillUpdate","newSkills","skillIndex","ActiveSkillList","activeSkillsCost","allActiveSkills","KnowledgeSkillList","knowledgeSkillsCost","freeKnowledgeSkillPoints","totalCost","allKnowledgeSkills","LanguageSkillList","languageSkillsCost","allLanguageSkills","SkillsTab","badge","Karma","showZero","Attribute","modifier","AttributeList","filteredAttributes","attributesCost","newAttributes","attributeIndex","AttributesTab","getContactRatingCost","getContactCost","contact","connection","loyalty","getAllContactsCost","details","Contact","contactCost","updatedConnection","updatedContact","updatedLoyalty","ContactList","selectedContacts","contactsCost","freeContactPoints","charisma","willpower","getFreeContactPoints","onContactUpdate","newContacts","contactIndex","ContactsTab","MagicTab","_item","newSpells","GearTab","createGearCostLabel","createGearLabel","childNames","Set","add","from","getChildNames","newSubGear","newGear","handleUpdateGear","spellsRoot","transformSpellValues","theme","palette","getContrastText","primary","main","backgroundColor","ReadOnlyProperty","Avatar","section","CombatTab","body","agility","reaction","athletics","initiative","physicalBoxes","stunBoxes","sneaking","walking","running","ConfirmationDialog","onChoice","handleNo","DialogContentText","DialogActions","autoFocus","ExportButton","filename","generateData","Tooltip","element","document","createElement","setAttribute","encodeURIComponent","appendChild","click","removeChild","ImportButton","saveData","accept","hidden","files","file","reader","FileReader","onload","readAsText","log","htmlFor","component","bar","flexGrow","CharacterCreator","drawerOpen","setDrawerOpen","selectedTab","setSelectedTab","useEffect","fetch","then","response","json","allData","transformAllQualities","catch","message","stack","all","magic","spellData","transformAllSpells","gearData","transformAllGear","gearNuyenCostLabel","showDeleteConfirmation","setShowDeleteConfirmation","characterCost","skillsCost","magicCost","gearNuyenCost","getGearKarmaCost","round","selectedTabPanel","exportFileName","AppBar","position","Toolbar","edge","rawData","Tabs","_event","newValue","Tab","Drawer","createMuiTheme","App","useReducer","characterJSON","loadCharacters","selectedCharacterKey","loadSelectedCharacter","selectedCharacterRef","loadedCharacter","Provider","ThemeProvider","CssBaseline","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAGYA,E,gEAmCL,SAASC,EAAWC,GACvB,YAAsFC,IAA/ED,EAAUE,UAAUC,MAAK,SAAAC,GAAC,MAAe,UAAXA,EAAEC,MAA+B,aAAXD,EAAEC,S,SApCrDP,K,cAAAA,E,UAAAA,E,cAAAA,E,UAAAA,E,eAAAA,M,KCDZ,IAAMQ,GAAe,EACfC,EAA+B,CACjCC,IAAKF,EACLD,KAAM,GACNI,WAAY,GACZC,SAAUZ,EAASa,MACnBC,WAAY,CACR,CAAEP,KAAM,OAAQQ,OAAQ,GACxB,CAAER,KAAM,UAAWQ,OAAQ,GAC3B,CAAER,KAAM,WAAYQ,OAAQ,GAC5B,CAAER,KAAM,WAAYQ,OAAQ,GAC5B,CAAER,KAAM,WAAYQ,OAAQ,GAC5B,CAAER,KAAM,YAAaQ,OAAQ,GAC7B,CAAER,KAAM,QAASQ,OAAQ,GACzB,CAAER,KAAM,YAAaQ,OAAQ,GAC7B,CAAER,KAAM,OAAQQ,OAAQ,GACxB,CAAER,KAAM,QAASQ,OAAQ,IAE7BX,UAAW,GACXY,aAAc,GACdC,gBAAiB,GACjBC,eAAgB,GAChBC,SAAU,GACVC,OAAQ,GACRC,KAAM,IAGH,SAASC,IACZ,OAAO,eAAKb,GCzBhB,IAAMc,EAAgB,YAEtB,SAASC,EAAmBd,GACxB,MAAM,GAAN,OAAUa,EAAV,YAA2Bb,GAuBxB,SAASe,EAAcf,GAC1B,IAAa,IAATA,EACA,OAAOY,IAEX,IAAMpB,EAAYwB,aAAaC,QAAQH,EAAmBd,IAC1D,OAAIR,EACO0B,KAAKC,MAAM3B,QAElB,EAID,SAAS4B,EAAc5B,GAC1BwB,aAAaK,QAAQP,EAAmBtB,EAAUQ,KAAMkB,KAAKI,UAAU9B,IAO3E,IAAM+B,EAAyB,qBAmB/B,IAAMC,EAAkB,cAExB,SAASC,EAAoBC,EAAc7B,GACvC,MAAM,GAAN,OAAU2B,EAAV,YAA6BE,EAA7B,YAAqC7B,EAArC,KCvEG,SAAS8B,EAAgBzB,GAC5B,OAAQA,GACJ,KAAKZ,EAASa,MACV,OAAO,EACX,KAAKb,EAASsC,IACV,OAAO,GACX,KAAKtC,EAASuC,MACV,OAAO,GACX,KAAKvC,EAASwC,IACV,OAAO,GACX,KAAKxC,EAASyC,MACV,OAAO,GACX,QACI,MAAM,IAAIC,MAAJ,6BAAgC9B,EAAhC,OCbX,SAAS+B,EAA4BzC,EAAsBK,GAC9D,IAAMqC,EAAY1C,EAAUY,WAAWT,MAAK,SAAAwC,GAAC,OAAIA,EAAEtC,OAASA,KAC5D,IAAKqC,EACD,MAAM,IAAIF,MAAJ,8CAAiDnC,EAAjD,MAEV,OAAOqC,EAAU7B,OAAS+B,EAAqB5C,EAAUU,SAAUgC,GAGhE,SAASE,EAAqBlC,EAAoBgC,GACrD,OAAQhC,GACJ,KAAKZ,EAASuC,MACV,OAAQK,EAAUrC,MACd,IAAK,OACD,OAAO,EACX,IAAK,WACD,OAAQ,EACZ,IAAK,WACD,OAAO,EACX,IAAK,YACD,OAAO,EAEf,MACJ,KAAKP,EAASwC,IACV,OAAQI,EAAUrC,MACd,IAAK,UACD,OAAO,EACX,IAAK,WACD,OAAO,EAEf,MACJ,KAAKP,EAASa,MACV,OAAQ+B,EAAUrC,MACd,IAAK,OACD,OAAO,EAEf,MACJ,KAAKP,EAASsC,IACV,OAAQM,EAAUrC,MACd,IAAK,OACD,OAAO,EACX,IAAK,WACD,OAAO,EACX,IAAK,WAEL,IAAK,QACD,OAAQ,EAEhB,MACJ,KAAKP,EAASyC,MACV,OAAQG,EAAUrC,MACd,IAAK,OACD,OAAO,EACX,IAAK,UACD,OAAQ,EACZ,IAAK,WACD,OAAO,EACX,IAAK,WACD,OAAQ,EACZ,IAAK,YAEL,IAAK,QACD,OAAQ,GAIxB,OAAO,EAGJ,SAASwC,EAAiBhC,GAC7B,OAAQA,GACJ,KAAK,EACD,OAAQ,GACZ,KAAK,EACD,OAAQ,GACZ,KAAK,EACD,OAAO,EACX,KAAK,EACD,OAAO,GACX,KAAK,EACD,OAAO,GACX,KAAK,EACD,OAAO,GACX,KAAK,EACD,OAAO,IACX,QACI,MAAM,IAAI2B,MAAJ,uCAA0C3B,KAIrD,SAASiC,EAAkB9C,GAC9B,IAAM+C,EAAWhD,EAAWC,GACxBgD,EAAO,EAFiD,uBAG5D,YAAwBhD,EAAUY,WAAlC,+CAA8C,CAAC,IAApC8B,EAAmC,SACnB,UAAnBA,EAAUrC,MAAqB0C,KAKnCC,GAAQH,EAAiBH,EAAU7B,UATqB,kFAW5D,OAAOmC,EC7FJ,SAASC,EAAmBpC,GAC/B,OAAQA,GACJ,KAAM,EACF,OAAO,EACX,KAAK,EACD,OAAO,EACX,KAAK,EACD,OAAO,GACX,KAAK,EACD,OAAO,GACX,QACI,MAAM,IAAI2B,MAAJ,mCAAsC3B,KAIjD,SAASqC,EAAoBpC,GAChC,OAAOA,EAAaqC,KAAI,SAAAC,GAAC,OAAIH,EAAmBG,EAAEvC,WAASwC,QAAO,SAACV,EAAGW,GAAJ,OAAUX,EAAIW,IAAG,GAGhF,SAASC,EAAsB1C,GAClC,OAAQA,GACJ,KAAK,EACD,OAAO,EACX,KAAK,EACD,OAAO,EACX,KAAK,EACD,OAAO,GACX,QACI,MAAM,IAAI2B,MAAJ,mCAAsC3B,KAIjD,SAAS2C,EAAuBzC,GACnC,OAAOA,EAAgBoC,KAAI,SAAAC,GAAC,OAAIG,EAAsBH,EAAEvC,WAASwC,QAAO,SAACV,EAAGW,GAAJ,OAAUX,EAAIW,IAAG,GAGtF,SAASG,EAA4BzD,GACxC,IAAM0D,EAAY1D,EAAUY,WAAWT,MAAK,SAAAwC,GAAC,MAAe,cAAXA,EAAEtC,QACnD,QAAkBJ,IAAdyD,EACA,MAAM,IAAIlB,MAAJ,qBAAwBxC,EAAUS,WAAlC,mCAEV,IAAMkD,EAAQ3D,EAAUY,WAAWT,MAAK,SAAAwC,GAAC,MAAe,UAAXA,EAAEtC,QAC/C,QAAcJ,IAAV0D,EACA,MAAM,IAAInB,MAAJ,qBAAwBxC,EAAUS,WAAlC,+BAEV,OAA2C,IAAnCiD,EAAU7C,OAAS8C,EAAM9C,QAG9B,SAAS+C,EAAc5D,GAC1B,IAAM6D,EAAkBX,EAAoBlD,EAAUc,cAChDgD,EAAqBN,EAAuBxD,EAAUe,iBAEtDgD,EAAoBP,EAAuBxD,EAAUgB,gBACrDgD,EAAsBP,EAA4BzD,GACxD,OAAO6D,EAAkBI,KAAKC,IAAIJ,EAAqBC,EAAoBC,EAAqB,G,qBCzD7F,SAASG,EAAqBC,EAAoBC,EAAiBC,EAA2BC,GACpG,cAAwBC,OAAOC,KAAKJ,GAApC,eAAiD,CAA5C,IAAMK,EAAS,KACbC,EAAS,UAAMP,EAAN,YAAoBM,GAC7BE,EAAYP,EAAWK,GACzBG,kBAAQD,GACXN,EAASK,GAAaJ,EAAgBI,EAAWC,GAEjDT,EAAkBQ,EAAWC,EAAWN,EAAUC,IAKrD,IAAMO,EAAc,IAAIC,IACjB,SAASC,EAA4BC,EAAYX,GACvD,IAAM9D,EAAG,UAAMyE,EAAK/C,KAAX,YAAmB+C,EAAK5E,MACjC,GAAIyE,EAAYI,IAAI1E,GACnB,OAAOsE,EAAYK,IAAI3E,GAExB,IAAM4E,EAAQd,EAASW,EAAK/C,MACtBmD,EAAYD,EAAMjF,MAAK,SAAAmF,GAAC,OAAIA,EAAEjF,OAAS4E,EAAK5E,QAClD,IAAKgF,EACJ,MAAM,IAAI7C,MAAJ,yCAA4CyC,EAAK5E,KAAjD,sBAAmEqB,KAAKI,UAAUsD,GAAlF,yBAAyGH,EAAK/C,KAA9G,MAGP,IAAMc,EAAOuC,SAASF,EAAUrC,MAEhC,OADA8B,EAAYU,IAAIhF,EAAKwC,GACdA,EAGR,IAAMyC,EAAsB,IAAIV,IAoEzB,SAASW,EAAeC,EAAyBvB,GACvD,IAAMwB,EAA0B,GAD4D,uBAE5F,YAAmBC,EAAeF,EAAQvB,GAA1C,+CAAuD,CAAC,IAA7ClC,EAA4C,QACtD0D,EAAO1D,GAAQyD,EAAOzD,IAHqE,kFAK5F,OAAO0D,EAGR,SAASC,EAAkBF,EAAuBvB,GAGjD,IAFA,IAAM0B,EAAuB,GACvBC,EAAU3B,EAAW4B,MAAM,KACjC,MAAmBxB,OAAOC,KAAKkB,GAA/B,eAAwC,CAAnC,IAAMzD,EAAI,KACR+D,EAAa/D,EAAK8D,MAAM,KAC9B,GAAIC,EAAWC,OAASH,EAAQG,OAC/B,MAAM,IAAI1D,MAAJ,uBAA0BN,EAA1B,+CAAqEkC,EAArE,MAGP,IADA,IAAI+B,GAAQ,EACHC,EAAI,EAAGA,EAAIL,EAAQG,OAAQE,IACnC,GAAIL,EAAQK,KAAOH,EAAWG,GAAI,CACjCD,GAAQ,EACR,MAGEA,GACHL,EAAWO,KAAKnE,GAGlB,OAAO4D,ECzHD,IAAMQ,EAAgB,YAQ7B,SAASC,EAAuBrE,EAAcyD,GAC1C,IAAMzF,EAAuB,GADuC,uBAEpE,YAAoByF,EAApB,+CAA4B,CAAC,IAAlBa,EAAiB,QAClBnG,EAAOmG,EAAK,KACZxD,EAAOwD,EAAK,KAClBtG,EAAUmG,KAAK,CAAEnE,OAAM7B,OAAM2C,UALmC,kFAOpE,OAAO9C,EAgCJ,SAASuG,EAA0BzG,EAAsB0G,GAC5D,IAAI1D,EAAO,EAD8F,uBAEzG,YAAsBhD,EAAUE,UAAhC,+CAA2C,CACvC8C,GAAQgC,EAD+B,QACV0B,IAHwE,kFAKzG,OAAO1D,ECnDJ,IA8IK2D,EA9ICC,EAAW,OAQxB,SAASC,EAAoB3E,EAAcyD,GAC1C,IAAMP,EAAgB,GAD2C,uBAEjE,YAAmBO,EAAOxC,KAAI,SAAA2D,GAAC,OAchC,SAA2B5E,EAAc6E,GAQxC,IAPA,IAAM9B,EAAa,CAClB/C,OACA7B,KAAM,SACN2G,aAAc,iBACdhE,KAAM,SACNiE,UAAW,UAEZ,MAAuBzC,OAAOC,KAAKsC,GAAnC,eAA0C,CAArC,IAAMG,EAAQ,KACZC,EAAYJ,EAAKG,GACN,SAAbA,EACHjC,EAAK5E,KAAO8G,EACW,iBAAbD,EACVjC,EAAK+B,aAAeG,EACG,SAAbD,EACVjC,EAAKgC,UAAYE,EAGjBlC,EAAKiC,GAAYC,EAGnB,OAAOlC,EAnC4BmC,CAAkBlF,EAAM4E,MAA3D,+CAAgE,CAAC,IAAtD7B,EAAqD,QAE3D,yCAAyCoC,KAAKpC,EAAK5E,MACtD+E,EAAMiB,KAAN,MAAAjB,EAAK,YAASkC,EAAepF,EAAM+C,KAEnCG,EAAMiB,KAAKpB,IAPoD,kFAUjE,cAAmBG,EAAnB,eAA0B,CACzBmC,EADc,MAGf,OAAOnC,EA2BR,SAASkC,EAAepF,EAAc+C,GACrC,IAAMuC,EAAuB,GAQvBC,EAAc,mDAAmDC,KAAKzC,EAAK5E,MACjF,GAAoB,OAAhBoH,EACH,MAAM,IAAIjF,MAAJ,4BAA+ByC,EAAK5E,KAApC,wCAKP,IAHA,IAAMsH,EAAaF,EAAY,GACzBG,EAAeH,EAAY,GAAGzB,MAAM,KAAK7C,KAAI,SAAA0E,GAAC,OAAIA,EAAEC,UACpDC,EAAYH,EAAa1B,OACtBE,EAAI,EAAGA,EAAI2B,EAAW3B,IAAK,CAQnC,IAPA,IAAM4B,EAAoB,CACzB9F,OACA7B,KAAK,GAAD,OAAKsH,EAAL,cAAqBC,EAAaxB,IACtCY,aAAc,iBACdhE,KAAM,SACNiE,UAAW,UAEZ,MAAuBzC,OAAOC,KAAKQ,GAAnC,eAA0C,CAArC,IAAMiC,EAAQ,KAElB,GAAiB,SAAbA,GAIa,SAAbA,EAAJ,CAKA,IAAMC,EAAYlC,EAAKiC,GACjBe,EAAcd,EAAUnB,MAAM,KAAK7C,KAAI,SAAA2D,GAAC,OAAIA,EAAEgB,UACpD,GAA2B,IAAvBG,EAAY/B,OAEf8B,EAAYd,GAAYC,MAClB,IAAIc,EAAY/B,SAAW6B,EAGjC,MAAM,IAAIvF,MAAJ,8FAAiGuF,EAAjG,oBAAsHE,EAAY/B,SAFxI8B,EAAYd,GAAYe,EAAY7B,KAKtCoB,EAAanB,KAAK2B,GAEnB,OAAOR,EAGR,SAASD,EAAiBtC,GAOzB,IAAMiD,EAAa,yCAAyCR,KAAKzC,EAAKgC,WACtE,GAAIiB,GAEH,GADAjD,EAAKjC,KAAOkF,EAAW,GACnBC,MAAM5C,SAASN,EAAKjC,OACvB,MAAM,IAAIR,MAAJ,qBAAwByC,EAAK5E,KAA7B,yCAAkE4E,EAAKgC,UAAvE,WAGPhC,EAAKjC,KAAO,IAIP,SAASoF,EAAgBnD,EAAYoD,GAC3C,IAAMC,EAAWtD,EAAYC,EAAMoD,GAC/BE,EAAa,OACEtI,IAAfgF,EAAKuD,QACRD,GAAcE,EAAsBxD,EAAKuD,OACzCD,EAAYE,EAAsBxD,EAAKuD,QAExC,IAAMxB,EFlGA,SAA6C/B,EAAYX,GAC/D,IAAM9D,EAAG,UAAMyE,EAAK/C,KAAX,YAAmB+C,EAAK5E,MACjC,GAAIoF,EAAoBP,IAAI1E,GAC3B,OAAOiF,EAAoBN,IAAI3E,GAEhC,IAAM4E,EAAQd,EAASW,EAAK/C,MACtBmD,EAAYD,EAAMjF,MAAK,SAAAmF,GAAC,OAAIA,EAAEjF,OAAS4E,EAAK5E,QAClD,IAAKgF,EACJ,MAAM,IAAI7C,MAAJ,yCAA4CyC,EAAK5E,KAAjD,sBAAmEqB,KAAKI,UAAUsD,GAAlF,yBAAyGH,EAAK/C,KAA9G,MAGP,IAAM8E,EAAe3B,EAAU2B,aAE/B,OADAvB,EAAoBD,IAAIhF,EAAKwG,GACtBA,EEqFc0B,CAAoBzD,EAAMoD,GAI/C,YAHqBpI,IAAjB+G,IACHuB,GAoDK,SAAuCvB,GAA+B,IAAD,EAC9C2B,EAAkB3B,GAAvCnG,EADmE,EACnEA,OAAQ+H,EAD2D,EAC3DA,SAEhB,MAAiB,MAAbA,EAEC/H,GAAU,EACN,EACGA,GAAU,EACb,EACGA,GAAU,GACb,EACGA,GAAU,GACb,GAEAgI,OAAOC,IAEQ,MAAbF,EAEN/H,GAAU,GACN,EACGA,GAAU,GACb,EACGA,GAAU,GACb,EACGA,GAAU,GACb,GAEAgI,OAAOC,IAIXjI,GAAU,GACN,EACGA,GAAU,GACb,EACGA,GAAU,GACb,EACGA,GAAU,GACb,GAEAgI,OAAOC,IA5FDC,CAA8B/B,IAEtCsB,EAAWC,EAGZ,SAASS,EAAgB9G,EAAc+C,GAAmB,IACxD5E,EAAuB4E,EAAvB5E,KAAM4I,EAAiBhE,EAAjBgE,MAAOT,EAAUvD,EAAVuD,MACfU,EAAY,CAAEhH,OAAM7B,OAAM4I,QAAOT,SAMvC,YAHcvI,IAAVuI,UACIU,EAAUV,MAEXU,EAUD,SAAST,IAA2D,IAArCD,EAAoC,uDAArB7B,EAAMwC,MAC1D,OAAQX,GACP,KAAK7B,EAAMyC,KACV,MAAO,GACR,KAAKzC,EAAMwC,MACV,OAAO,EACR,KAAKxC,EAAM0C,KACV,OAAO,EACR,KAAK1C,EAAM2C,MACV,OAAO,GACR,QACC,MAAM,IAAI9G,MAAJ,sCAAyCgG,EAAzC,OA+DT,SAASG,EAAkB3B,GAC1B,GAAqB,MAAjBA,EACH,MAAO,CAAEnG,OAAQ,EAAG+H,SAAU,KAE/B,IAAMW,EAAS,oBAAoB7B,KAAKV,GACxC,OAAKuC,EAME,CAAE1I,OAFM0E,SAASgE,EAAO,IAEdX,SADAW,EAAO,IAAM,MAJ7BC,QAAQC,MAAR,uCAA8CzC,EAA9C,sCACO,CAAEnG,OAAQ,EAAG+H,SAAU,MAsBzB,SAASc,EAA0B1J,EAAsBqI,GAC/D,IAAIsB,EAAQ,EADwF,uBAEpG,YAAmB3J,EAAUmB,KAA7B,+CAAmC,CAAC,IAAzB8D,EAAwB,QAClC0E,GAASvB,EAAgBnD,EAAMoD,GAAW9C,SAASN,EAAKgE,QAH2C,kFAKpG,OAAOU,EAGD,SAASC,GAA0BD,GAGzC,OAAkC,EAA3B1F,KAAK4F,KAAKF,EAAQ,M,SAzHdhD,K,YAAAA,E,cAAAA,E,YAAAA,E,eAAAA,M,KC1IZ,ICDYmD,GDCNC,GAAiB,IAEhB,SAASC,KACZ,MAAO,CACHC,MAAOF,GACPG,MAAO,EACPC,UAAWJ,IAIZ,SAASK,GAAkBC,EAAcrK,EAAsBsK,GAAsB,IAChFL,EAAUI,EAAVJ,MACJC,EAAQ,EAOZ,OANAA,GAAS/H,EAAgBnC,EAAUU,UACnCwJ,GAASzD,EAA0BzG,EAAWsK,EAAM5D,cACpDwD,GAASpH,EAAkB9C,GAC3BkK,GAAStG,EAAc5D,GAGhB,CAAEiK,QAAOC,MAFhBA,GAASN,GAA0BF,EAA0B1J,EAAWsK,EAAMjC,UAEvD8B,UADLF,EAAQC,I,SCnBlBJ,K,kCAAAA,E,kCAAAA,E,gCAAAA,E,kCAAAA,E,8BAAAA,E,wBAAAA,E,4BAAAA,E,wBAAAA,E,oBAAAA,E,kCAAAA,E,+BAAAA,Q,KA8BL,IAAMS,GAAkC,SAACD,EAAcE,GAC1D,OAAQA,EAAOC,MACX,KAAKX,GAAWY,gBACZ,IAAMC,EAAoBH,EAAOzD,KAC3B6D,EAAaC,GAAsBF,EAAmBL,GACtDD,EAAQD,GAAkBE,EAAMD,MAAOM,EAAmBL,GAGhE,OADA1I,EAAc+I,GACP,eAAKL,EAAZ,CAAmBK,oBAAmBC,aAAYP,UAEtD,KAAKP,GAAWgB,gBACZ,IAAMH,EAAoBH,EAAOzD,KACjCnF,EAAc+I,GACd,IAAMC,EAAaC,GAAsBF,EAAmBL,GACtDD,EAAQD,GAAkBE,EAAMD,MAAOM,EAAmBL,GAChE,OAAO,eAAKA,EAAZ,CAAmBK,oBAAmBC,aAAYP,UAEtD,KAAKP,GAAWiB,eRbO/K,EQcJsK,EAAMK,kBRb7BnJ,aAAawJ,WAAW1J,EAAmBtB,EAAUQ,MQc7C,IAAMoK,EAAaN,EAAMM,WACpBK,QAAO,SAAAC,GAAC,OAAIA,EAAE1K,MAAQ8J,EAAMK,kBAAkBnK,OAC9C2C,KAAI,kBAAgC,CAAE3C,IAAlC,EAAGA,IAAoCH,KAAvC,EAAQA,KAAqCI,WAA7C,EAAcA,eACvB,OAAO,eAAK6J,EAAZ,CAAmBM,aAAYD,kBAAmBvJ,IAAuBiJ,MAAOL,OAEpF,KAAKF,GAAWqB,gBACZ,IAAMC,EAAeZ,EAAOzD,KAGtB4D,EAAoBpJ,EAAc6J,EAAa5K,KACrD,IAAKmK,EACD,MAAM,IAAInI,MAAJ,yCAA4Cd,KAAKI,UAAUsJ,KAErE,IAAMf,EAAQD,GAAkBE,EAAMD,MAAOM,EAAmBL,GAChE,OAAO,eAAKA,EAAZ,CAAmBK,oBAAmBN,UAE1C,KAAKP,GAAWuB,cACZ,IAAM3E,EAAe8D,EAAOzD,KAC5B,OAAO,eAAKuD,EAAZ,CAAmB5D,iBAEvB,KAAKoD,GAAWwB,WACZ,IAAMC,EAAYf,EAAOzD,KACzB,OAAO,eAAKuD,EAAZ,CAAmBiB,cAEvB,KAAKzB,GAAW0B,aACZ,IAAMC,EAAcjB,EAAOzD,KAC3B,OAAO,eAAKuD,EAAZ,CAAmBmB,gBAEvB,KAAK3B,GAAW4B,SACZ,IAAMrD,EAAUmC,EAAOzD,KACvB,OAAO,eAAKuD,EAAZ,CAAmBjC,YAEvB,KAAKyB,GAAW6B,WACZ,IAAMC,EAAYpB,EAAOzD,KACzB,OAAO,eAAKuD,EAAZ,CAAmBsB,cAEvB,KAAK9B,GAAW+B,gBACZ,IAAMC,EAActB,EAAOzD,KAC3B,OAAO,eAAKuD,EAAZ,CAAmBwB,gBAEvB,KAAKhC,GAAWiC,cACZ,IAAMC,EAAUxB,EAAOzD,MRC5B,SAAwB7E,EAAc+C,GACzC,IAAMzE,EAAMyB,EAAoBC,EAAM+C,EAAKgH,MAC3CzK,aAAaK,QAAQrB,EAAKkB,KAAKI,UAAUmD,IQDjCiH,CAAeF,EAAQ9J,KAAM8J,EAAQ/G,MACrC,IAAM6G,EAAW,eAAQxB,EAAMwB,aAE/B,OADAA,EAAYE,EAAQ9J,MAAQ8J,EAAQ/G,KAC7B,eAAKqF,EAAZ,CAAmBwB,gBR7DxB,IAAwB9L,EQgE3B,OAAO,eAAKsK,IAGH6B,GAAuB,CAChCvB,WAAY,GACZD,kBAAmBvJ,IACnBiJ,MAAOL,KACPtD,aAAc,CAAE0F,SAAU,GAAIC,SAAU,IACxCd,UAAW,CAAEe,OAAQ,GAAIC,UAAW,GAAIC,SAAU,IAClDf,YAAa,GACbG,UAAW,CAAEa,OAAQ,GAAIC,UAAW,GAAIC,OAAQ,GAAIC,SAAU,GAAIC,aAAc,IAChFxE,QAAS,GACTyD,YAAa,IAGjB,SAASjB,GAAsB7K,EAAsBsK,GACjD,IACIwC,EADElC,EAAU,YAAON,EAAMM,aT1F1B,SAAuB5K,GAC1B,OAAOA,EAAUQ,MAAQF,ES2FrByM,CAAc/M,GAKd8M,EAAQlC,EAAWoC,WAAU,SAAA9B,GAAC,OAAIA,EAAE1K,MAAQR,EAAUQ,QAHtDR,EAAUQ,IAAMyM,KAAKC,MACrBJ,GAAS,GANkE,IAUvEtM,EAA0BR,EAA1BQ,IAAKH,EAAqBL,EAArBK,KAAMI,EAAeT,EAAfS,WAMnB,OALe,IAAXqM,EACAlC,EAAWvE,KAAK,CAAE7F,MAAKH,OAAMI,eAE7BmK,EAAWkC,GAAS,CAAEtM,MAAKH,OAAMI,cAE9BmK,EC1IJ,IAAMuC,GAAkBC,yBAAgC,eAElDC,GAAc,WACvB,OAAOC,qBAAWH,KAGTI,GAAeH,wBAAqBjB,IAEpCqB,GAAiB,SAAwBC,GAElD,OADcH,qBAAWC,IACZE,I,+JCUFC,GAfkB,SAACC,GAAkB,IACxC3N,EAAc2N,EAAd3N,UACAK,EAAqBL,EAArBK,KAAMI,EAAeT,EAAfS,WACd,OAAKJ,GAASI,EAGTA,EAGAJ,EAGE,kBAACuN,GAAA,EAAD,KAAavN,EAAb,QAAwBI,GAFpB,kBAACmN,GAAA,EAAD,KAAanN,GAHb,kBAACmN,GAAA,EAAD,KAAavN,GAHb,kBAACuN,GAAA,EAAD,2BCoBAzC,GAxBa,WACxB,IAAM0C,EAAWR,KACXzC,EAAa4C,GAAe,cAMlC,OACI,kBAACM,GAAA,EAAD,CAAMC,UACF,kBAACC,GAAA,EAAD,oBAIIpD,EAAWzH,KAAI,SAAA+H,GAAC,OACZ,kBAAC+C,GAAA,EAAD,CAAUzN,IAAK0K,EAAE1K,IAAK0N,QAAS,kBAXtB,SAAClO,GACtB,IAAM+G,EAA4B/G,EAClC6N,EAAS,CAAEpD,KAAMX,GAAWqB,gBAAiBpE,SASIoH,CAAiBjD,KAClD,kBAAC,GAAD,CAAelL,UAAWkL,U,8BCvBrCkD,GAA6B,CACtCtO,EAASa,MACTb,EAASsC,IACTtC,EAASuC,MACTvC,EAASwC,IACTxC,EAASyC,O,sECHP8L,GAAYC,aAAW,CAC5BC,KAAM,CACLC,QAAS,OACTC,cAAe,MACfC,SAAU,OACVC,eAAgB,cAEjBC,KAAM,CACLC,YAAa,GACbC,aAAc,MAgCDC,GAvBmB,SAACpB,GAAkB,IAC5ChI,EAA2CgI,EAA3ChI,OAAQqJ,EAAmCrB,EAAnCqB,gBAAiBC,EAAkBtB,EAAlBsB,cAE3BC,EAAUb,KAEhB,OACC,yBAAKc,UAAWD,EAAQX,MAEtB5I,EAAOxC,KAAI,SAAA2D,GAAC,OACX,kBAACsI,GAAA,EAAD,CAAO5O,IAAKsG,EAAEzG,KAAMgP,aAAcvI,EAAEmC,MAAOqG,UAAqB,MAAVxI,EAAEmC,MAAasG,MAAM,YAAYrL,IAAK,GAAIsL,aAAc,CAAEC,SAAU,MAAOC,WAAY,SAC5I,kBAACC,GAAA,EAAD,CACCR,UAAWD,EAAQN,KACnBW,MAAM,UACNK,MAAOZ,EAAgBlI,GACvB+I,SAAU,kBAAMZ,EAAcnI,YC7B9B,SAASgJ,GAAc1K,EAAehB,GAC5C,IAAM2L,EAAmB,GAD+C,uBAExE,YAAmB3K,EAAnB,+CAA0B,CAAC,IAAhBH,EAAe,SACrBA,EAAK/C,OAASkC,GAAca,EAAK/C,KAAK8N,WAAV,UAAwB5L,EAAxB,QAC/B2L,EAAS1J,KAAKpB,IAJwD,kFAOxE,OAAO8K,E,qICTF1B,GAAYC,aAAW,CAC5BC,KAAM,CACL0B,SAAU,GACVC,SAAU,GACVC,MAAO,MAyBMC,GAjBgB,SAACzC,GAAkB,IACzC0C,EAAmC1C,EAAnC0C,SAAU7H,EAAyBmF,EAAzBnF,MAAO8H,EAAkB3C,EAAlB2C,cAEnBpB,EAAUb,KAEhB,OACC,kBAACkC,GAAA,EAAD,CACCpB,UAAWD,EAAQX,KACnB8B,SAAUA,EACVG,QAAQ,WACRtC,QAAS,kBAAMoC,EASlB,SAAmB9H,GAClB,OAAQA,GACP,KAAK7B,EAAMyC,KACV,OAAOzC,EAAMwC,MACd,KAAKxC,EAAMwC,MACV,OAAOxC,EAAM0C,KACd,KAAK1C,EAAM0C,KACV,OAAO1C,EAAM2C,MACd,KAAK3C,EAAM2C,MACV,OAAO3C,EAAMyC,KACd,QACC,MAAM,IAAI5G,MAAJ,sCAAyCgG,EAAzC,OApBuBiI,CAAUjI,MAEtCA,IChBJ,IAAM6F,GAAYC,aAAW,CAC5BC,KAAM,CACLC,QAAS,OACTC,cAAe,MACfiC,QAAS,GACTC,OAAQ,IAETtQ,KAAM,CACL8P,MAAO,IACPS,UAAW,QAEZ5J,aAAc,CACbmJ,MAAO,IACPS,UAAW,UAEZ5N,KAAM,CACLmN,MAAO,IACPS,UAAW,YAiEEC,GAxDmB,SAAClD,GAAkB,IAC5C1I,EAAwC0I,EAAxC1I,KAAM6L,EAAkCnD,EAAlCmD,gBAAiBC,EAAiBpD,EAAjBoD,aAEzB7B,EAAUb,KAEVpF,EAAQ1D,SAASN,EAAKgE,OACtBhC,EAAY6J,EAAgB7L,GAE5B+L,EAAS/H,EAAQ,EAEjBgI,EAAgBhM,EAAK/C,KAAK8N,WAAWpJ,GACrCsK,EAAsBjM,EAAK/C,KAAK8N,WAAWpJ,GAC3CuD,GAAY+G,GV2HZ,SAAyBlK,GAAgC,IAAD,EACjC2B,EAAkB3B,GAAvCnG,EADsD,EACtDA,OAAQ+H,EAD8C,EAC9CA,SAChB,OAAQA,GACP,IAAK,IACJ,OAAO/H,GAAW,GACnB,IAAK,IACJ,OAAOA,GAAW,GACnB,IAAK,IACJ,OAAOA,GAAW,GACnB,QACC,MAAM,IAAI2B,MAAJ,yCAA4CoG,EAA5C,OUrIgCuI,CAAgBlM,EAAK+B,cACvDoK,EAAenM,EAAK/C,KAAK8N,WAAV,UAAwBpJ,EAAxB,mBAEf4B,EAAQvD,EAAKuD,OAAkB7B,EAAMwC,MAoB3C,OACC,kBAACkI,GAAA,EAAD,CACClC,UAAWD,EAAQX,KACnB+C,UAAW,GAEX,kBAAC1D,GAAA,EAAD,CAAYuB,UAAWD,EAAQ7O,KAAMkR,MAAO,CAACC,WAAY,SAAUvM,EAAK5E,MACtE6Q,EAAsB,kBAACtD,GAAA,EAAD,CAAYuB,UAAWD,EAAQlI,aAAcuK,MAAO,CAACC,WAAY,SAAUvM,EAAK+B,cAA6B,KACrI,0BAAMmI,UAAWD,EAAQlM,MACxB,kBAACoM,GAAA,EAAD,CAAOC,aAAcpG,EAAOsG,MAAM,aACjC,kBAAC3B,GAAA,EAAD,CAAY2D,MAAO,CAACC,WAAY,SAAhC,IAA2CvK,EAA3C,OAGF,kBAACwK,GAAA,EAAD,KACGR,IAAkBD,EAAS,kBAACT,GAAA,EAAD,CAAQrC,QA/BtB,WACjB6C,EAAa,eAAK9L,EAAN,CAAYgE,OAAQA,EAAQ,GAAGyI,eA8BgBrB,UAAWlG,GAAW,kBAAC,KAAD,OAAuB,KACpG8G,GAAiBD,EAAS,kBAACT,GAAA,EAAD,CAAQrC,QA5BlB,WACpB6C,EAAa,eAAK9L,EAAN,CAAYgE,MAAOhF,KAAKC,IAAI+E,EAAQ,EAAG,GAAGyI,eA2BOrB,UAAWlG,GAAW,kBAAC,KAAD,OAA0B,KACzGiH,EAAe,kBAAC,GAAD,CAAaf,SAAoB,IAAVpH,EAAaT,MAAOA,EAAO8H,cAzB5C,SAACqB,GAC1B,IAAM3F,EAAO,eAAQ/G,EAAR,CAAcuD,MAAOmJ,IAG9BA,IAAahL,EAAMwC,cACf6C,EAAQxD,MAEhBuI,EAAa/E,MAkB+F,QCnFxGqC,GAAYC,aAAW,CAC5BlJ,MAAO,CACNoJ,QAAS,OACTC,cAAe,YA4CFmD,GAlCsB,SAACjE,GAAkB,IAC/CvI,EAA0CuI,EAA1CvI,MAAO0L,EAAmCnD,EAAnCmD,gBAAiBe,EAAkBlE,EAAlBkE,cAE1B3C,EAAUb,KAEVyD,EAAe,SAAC7M,GACrB,IAAM8M,EAAQ,YAAO3M,GAErB2M,EADc3M,EAAM4H,WAAU,SAAA5G,GAAC,OAAIA,EAAE/F,OAAS4E,EAAK5E,SACjC4E,EAClB4M,EAAcE,IAGf,OACC,kBAAC,WAAD,KACC,kBAACC,GAAA,EAAD,MACA,yBAAK7C,UAAWD,EAAQ9J,OAEtBA,EAEAA,EAAMjC,KAAI,SAAAiD,GAAC,OACV,kBAAC,GAAD,CACCnB,KAAMmB,EACN0K,gBAAiBA,EACjBC,aAAce,OAIhB,4CC6CUG,GAvEqB,SAACtE,GAAkB,IAC9CuE,EAAsEvE,EAAtEuE,KAAMC,EAAgExE,EAAhEwE,QAASC,EAAuDzE,EAAvDyE,MAAO9N,EAAgDqJ,EAAhDrJ,SAAUwM,EAAsCnD,EAAtCmD,gBAAiBuB,EAAqB1E,EAArB0E,iBAEnDC,EAAW9N,OAAOC,KAAKH,GAEvBiO,EAAK,YAAOD,GAEZE,EAAc,IAAIzN,IAP6B,uBAQrD,YAAmBwN,EAAnB,+CAA0B,CAAC,IAAhBrQ,EAAe,QACnB+D,EAAa/D,EAAK8D,MAAM,KACxByM,EAAiBxM,EAAWA,EAAWC,OAAS,GAChD0J,EAAQ8C,YAAaD,GAC3BD,EAAYhN,IAAItD,EAAM0N,IAZ8B,wFAe3B+C,mBAASJ,EAAM,IAfY,mBAe9CK,EAf8C,KAevCC,EAfuC,UAkBhB5S,IAAjCsS,EAAMpS,MAAK,SAAA2S,GAAC,OAAIA,IAAMF,MACzBC,EAASN,EAAM,IAahB,OACC,kBAACQ,GAAA,EAAD,CAAQb,KAAMA,EAAMC,QAASA,GAC5B,kBAACa,GAAA,EAAD,KAAcZ,GACd,kBAACa,GAAA,EAAD,KAEEV,EAAMrM,OAAS,EAEf,kBAACgN,GAAA,EAAD,CACCC,GAAG,QACH3M,MAAOoM,EACPQ,cAAY,EACZC,SArBqB,SAACC,GAC1BT,EAASS,EAAMC,OAAO/M,QAqBlBgK,QAAQ,YAGP+B,EAAMpP,KAAI,SAAA2P,GAAC,OACV,kBAACU,GAAA,EAAD,CACChT,IAAKsS,EACLtM,MAAOsM,GAENN,EAAYrN,IAAI2N,QAMrB,KAED,kBAAC,GAAD,CACClD,MAAO4C,EAAYrN,IAAIyN,GACvBxN,MAAOd,EAASsO,GAChB9B,gBAAiBA,EACjBe,cAtCsB,SAAC9B,GAC1B,IAAM0D,EAA+B,eAAQnP,GAC7CmP,EAAYb,GAAS7C,EACrBsC,EAAiBoB,S,SC2EJC,GA1GqB,SAAC/F,GAAkB,IAC9CyE,EAA2DzE,EAA3DyE,MAAOhN,EAAoDuI,EAApDvI,MAAOd,EAA6CqJ,EAA7CrJ,SAAUwM,EAAmCnD,EAAnCmD,gBAAiBe,EAAkBlE,EAAlBkE,cADI,EAG7Bc,oBAAS,GAHoB,mBAG9CT,EAH8C,KAGxCyB,EAHwC,KAM/CC,Ef4BA,SAA+BjO,GACrC,IAEIkO,EAFEC,EAAmB,IAAI/O,IACvBwN,EAAQ/N,OAAOC,KAAKkB,GAAQxC,KAAI,SAAA2P,GAAC,OAAIA,EAAE9M,MAAM,QAEnD,GAAIuM,EAAMrM,OAAS,EAAG,CACrB,IAAI6N,GAAkB,EAEtB,IADAF,EAAiB,GACTE,GAAiB,CACxB,GAAIF,GAAkBtB,EAAM,GAAGrM,OAC9B,MAAM,IAAI1D,MAAJ,iEAEP,IAAK,IAAIwR,EAAY,EAAGA,EAAYzB,EAAMrM,OAAQ8N,IACjD,GAAIzB,EAAM,GAAGsB,KAAoBtB,EAAMyB,GAAWH,GAAiB,CAClEE,GAAkB,EAClB,MAGFF,SAEK,IAAqB,IAAjBtB,EAAMrM,OAIhB,MAAM,IAAI1D,MAAJ,sBAFNqR,EAAiBtB,EAAM,GAAGrM,OAAS,EArB4C,2BAyBhF,YAAmBqM,EAAnB,+CAA0B,CAAC,IAAhBrQ,EAAe,QACnBkC,EAAalC,EAAK+R,MAAM,EAAGJ,GAAgBK,KAAK,KAChD7T,EAAO6B,EAAK2R,EAAiB,GACnCC,EAAiBtO,IAAIpB,EAAYsO,YAAarS,KA5BiC,kFA8BhF,OAAOyT,Ee1DmBK,CAAmB7P,GAEvC8P,EAAwB,GARuB,uBASrD,YAAyBR,EAAkBnP,OAA3C,+CAAmD,CAAC,IAAzCL,EAAwC,QAClDgQ,EAAY/N,KAAKjC,IAVmC,kFA2BrD,IA3BqD,MAajBuO,mBAASyB,EAAY,IAbJ,mBAa9ChQ,EAb8C,KAalCiQ,EAbkC,OAejB1B,mBAAmC,MAflB,mBAe9C2B,EAf8C,KAelCC,EAfkC,KAuB/CC,EAAgB9O,EAAYpB,EAAUF,GAEtCqQ,EAAsC,GACxCC,GAAW,EACf,MAAmBlQ,OAAOC,KAAK+P,GAA/B,eAA+C,CAA1C,IAAMtS,EAAI,KACdwS,GAAW,EACX,IAAMC,EAAU,YAAOH,EAActS,IAC/B0S,EAAgB9E,GAAc1K,EAAOhB,GAHG,uBAI9C,IAJ8C,IAI9C,EAJ8C,iBAInCyQ,EAJmC,QAKvCC,EAAeF,EAAczU,MAAK,SAAAiG,GAAC,OAAIA,EAAE/F,OAASwU,EAAUxU,QAC9DyU,GACHD,EAAU5L,MAAQ6L,EAAa7L,MAC/B4L,EAAUrM,MAAQsM,EAAatM,OAE/BqM,EAAU5L,MAAQ,KANpB,EAAwB0L,EAAxB,+CAAqC,IAJS,kFAa9CF,EAAgBvS,GAAQyS,EAyBzB,OACC,kBAAC,WAAD,KACC,kBAACI,GAAA,EAAD,CACC7G,QAAS,SAAAoF,GAAK,OAAIiB,EAAcjB,EAAM0B,gBACtCzF,MAAM,YACN0F,KAAK,SACLC,eAAa,GAEb,kBAAC,KAAD,OAED,kBAAC,KAAD,CACCC,SAAUb,EACVpC,KAAMkD,QAAQd,GACdnC,QAAS,kBAAMoC,EAAc,QAG5BH,EAAYjR,KAAI,SAAA2P,GAAC,OAChB,kBAACU,GAAA,EAAD,CAAUhT,IAAKsS,EAAG5E,QAAS,YAjER,SAAC9J,GACxBiQ,EAAcjQ,GACdmQ,EAAc,MACdZ,GAAQ,GA8D8B0B,CAAgBvC,KAChDJ,YAAakB,EAAkBzO,IAAI2N,SAMvC4B,EAEA,kBAAC,GAAD,CACCxC,KAAMA,EACNC,QAzFgB,kBAAMwB,GAAQ,IA0F9BvB,MAAK,UAAKA,EAAL,cAAgBwB,EAAkBzO,IAAIf,IAC3CE,SAAUmQ,EACV3D,gBAAiBA,EACjBuB,iBAtDyB,SAACiD,GAG7B,IAFA,IAAMvD,EAAgB,YAAO3M,GADwC,aAGhE,IAAMlD,EAAI,KAHsD,uBAIpE,IAJoE,IAIpE,EAJoE,iBAIzD2S,EAJyD,QAK7DU,EAAchQ,SAASsP,EAAU5L,OAAS,EAC1C6D,EAAQiF,EAAS/E,WAAU,SAAA5G,GAAC,OAAIA,EAAElE,OAASA,GAAQkE,EAAE/F,OAASwU,EAAUxU,QAC1EyM,GAAS,EACRyI,EACHxD,EAASjF,GAAS9D,EAAgB9G,EAAM2S,GAExC9C,EAASyD,OAAO1I,EAAO,GAEdyI,GACVxD,EAAS1L,KAAK2C,EAAgB9G,EAAM2S,KAVtC,EAAwBS,EAAgBpT,GAAxC,+CAAgD,IAJoB,oFAGrE,MAAmBsC,OAAOC,KAAK6Q,GAA/B,eAAkD,IAgBlDzD,EAAcE,MAsCZ,OCxGE1D,GAAYC,aAAW,CACzBmH,YAAa,CACTjE,WAAY,EACZkE,WAAY,OAsELC,GAzDmB,SAAChI,GAAkB,IAC5CiC,EAAgFjC,EAAhFiC,MAAOxK,EAAyEuI,EAAzEvI,MAAOd,EAAkEqJ,EAAlErJ,SAAUsR,EAAwDjI,EAAxDiI,gBAAiBC,EAAuClI,EAAvCkI,oBAAqBhE,EAAkBlE,EAAlBkE,cAEhE3C,EAAUb,KAEZrL,EAAO,EALwC,uBAMnD,YAAmBoC,EAAnB,+CAA0B,CAAC,IAAhBH,EAAe,QACzBjC,GAAQoF,EAAgBnD,EAAMX,GAAYiB,SAASN,EAAKgE,QAPN,kFAWnD,IADA,IAAM6M,EAAoB,GAC1B,MAAmBtR,OAAOC,KAAKH,GAA/B,eAA0C,CAArC,IAAMpC,EAAI,KACd4T,EAAUzP,KAAV,MAAAyP,EAAS,YAASxR,EAASpC,KAiB5B,OACC,kBAAC6T,GAAA,EAAD,CAAgBC,iBAAiB,GAChC,kBAACC,GAAA,EAAD,CAAuBC,WAAY,kBAAC,KAAD,OAClC,kBAACC,GAAA,EAAD,CACCjI,QAAS,SAACoF,GAAD,OAAWA,EAAM8C,mBAC1BC,QAAS,SAAC/C,GAAD,OAAWA,EAAM8C,mBAC1BE,QAAS,kBAAC,GAAD,CACRlE,MAAOxC,EACPxK,MAAOA,EACPd,SAAUA,EACVwM,gBAAiB+E,EACjBhE,cAfqB,SAACE,GAC1BF,EAAcE,MAgBXnC,MAAM,KAEP,kBAAChC,GAAA,EAAD,CAAYuB,UAAWD,EAAQuG,aAAc7F,EAA7C,KAAsD5M,EAAtD,MAED,kBAACuT,GAAA,EAAD,KACC,kBAAC,GAAD,CACC5Q,OAAQP,EACR4J,gBAAiB4G,EACjB3G,cAnCiB,SAACuH,GACrB,IAAMzE,EAAQ,YAAO3M,GACf0H,EAAQiF,EAAS/E,WAAU,SAAA5G,GAAC,OAAIA,EAAE/F,OAASmW,EAASnW,QAC1D,GAAIyM,EAAQ,EACX,MAAM,IAAItK,MAAJ,+BAAkCgU,EAASnW,KAA3C,gCAAuEqB,KAAKI,UAAUiQ,GAAtF,MAEPA,EAASyD,OAAO1I,EAAO,GACvB+E,EAAcE,SCPD0E,GAtCc,WAC5B,IAAM5I,EAAWR,KACXrN,EAAYwN,GAAe,qBACzBtN,EAAcF,EAAdE,UACFwG,EAAe8G,GAAe,gBAE9BkJ,EAAyB,SAACzR,GAC/B,IAAMjC,EAAOgC,EAAYC,EAAMyB,GAC/B,OAAI1D,EAAO,EACJ,IAAN,OAAWA,GAEL,GAAN,OAAUA,IAeZ,OACC,kBAAC,GAAD,CACC4M,MAAM,YACNxK,MAAOlF,EACPoE,SAAUoC,EACVkP,gBAhByB,SAAC3Q,GAAgB,IACnC5E,EAAS4E,EAAT5E,KACF4G,EAAYyP,EAAuBzR,GACzC,MAAM,GAAN,OAAU5E,EAAV,aAAmB4G,EAAnB,MAcC4O,oBAAqBa,EACrB7E,cAZ4B,SAAC8E,GAC9B,IAAM5P,EAAyB,eAAQ/G,EAAR,CAAmBE,UAAWyW,IAC7D9I,EAAS,CAAEpD,KAAMX,GAAWY,gBAAiB3D,aClBzCsH,GAAYC,aAAW,CACzBsI,OAAQ,CACJpI,QAAS,OACTC,cAAe,MACfoI,WAAY,EACZhI,YAAa,EACbC,aAAc,IAElBgI,MAAO,CACHjI,YAAa,GACbkI,UAAW,IAEfC,QAAS,CACLrG,OAAQ,KA6BDsG,GAzBU,WACrB,IAAM/H,EAAUb,KACVR,EAAWR,KACXrN,EAAYwN,GAAe,qBACzBnN,EAA+BL,EAA/BK,KAAMI,EAAyBT,EAAzBS,WAAYC,EAAaV,EAAbU,SAEpBwW,EAAqB,SAACC,GACxB,IAAMpQ,EAA4BoQ,EAClCtJ,EAAS,CAAEpD,KAAMX,GAAWY,gBAAiB3D,UAGjD,OACI,kBAAC,WAAD,KACI,yBAAKoI,UAAWD,EAAQ0H,QACpB,kBAACQ,GAAA,EAAD,CAAWC,MAAI,OAAOzH,MAAM,OAAOpJ,MAAOnG,EAAMgT,SAAU,SAAAiE,GAAC,OAAIJ,EAAmB,eAAKlX,EAAN,CAAiBK,KAAMiX,EAAE/D,OAAO/M,UAAS2I,UAAWD,EAAQ4H,MAAOtG,QAAQ,aAC5J,kBAAC4G,GAAA,EAAD,CAAWC,MAAI,cAAczH,MAAM,cAAcpJ,MAAO/F,EAAY4S,SAAU,SAAAiE,GAAC,OAAIJ,EAAmB,eAAKlX,EAAN,CAAiBS,WAAY6W,EAAE/D,OAAO/M,UAAS2I,UAAWD,EAAQ4H,MAAOtG,QAAQ,aACtL,kBAAC0C,GAAA,EAAD,CAAQC,GAAG,YAAY3M,MAAO9F,EAAU0S,cAAY,EAACC,SAAU,SAAAiE,GAAC,OAAIJ,EAAmB,eAAKlX,EAAN,CAAiBU,SAAU4W,EAAE/D,OAAO/M,UAAqB2I,UAAWD,EAAQ4H,MAAOtG,QAAQ,YAC5KpC,GAAejL,KAAI,SAAAoU,GAAC,OAAI,kBAAC/D,GAAA,EAAD,CAAUhT,IAAK+W,EAAG/Q,MAAO+Q,GAAIA,EAA7B,KAAkCpV,EAAgBoV,GAAlD,UAGjC,kBAAC,GAAD,QCzCL,SAASC,GAAc1L,EAAqC1H,GAClE,IAAMgB,EAAsB,GAC5B,IAAK,IAAMlD,KAAQ4J,EACd5J,EAAK8N,WAAW5L,IACnBgB,EAAMiB,KAAKyF,EAAY5J,IAGzB,OAAOkD,E,cCIFiJ,GAAYC,aAAY,CAC7BmJ,QAAS,CACRtH,MAAO,QAERyG,OAAQ,CACPpI,QAAS,QAEVnO,KAAM,CACL4P,SAAU,IACVC,SAAU,IACVU,UAAW,QAEZ5J,aAAc,CACbiJ,SAAU,IACVC,SAAU,IACVU,UAAW,UAEZ5N,KAAM,CACLiN,SAAU,IACVC,SAAU,IACVU,UAAW,SAEZ8G,GAAI,CACHhH,QAAS,KA8GIiH,GA/FiB,SAAChK,GAAkB,IAC1CuE,EAA6HvE,EAA7HuE,KAAMC,EAAuHxE,EAAvHwE,QAASC,EAA8GzE,EAA9GyE,MAAOhN,EAAuGuI,EAAvGvI,MAAOwS,EAAgGjK,EAAhGiK,sBAAuB1G,EAAyEvD,EAAzEuD,oBAAqB2G,EAAoDlK,EAApDkK,YAAaC,EAAuCnK,EAAvCmK,cAAeC,EAAwBpK,EAAxBoK,oBAEvG7I,EAAUb,KAHiC,EAKXsE,mBAAS,IALE,mBAK1CqF,EAL0C,KAK7BC,EAL6B,OAMKtF,mBAAS,IANd,mBAM1CuF,EAN0C,KAMrBC,EANqB,OAOXxF,mBAAS,IAPE,mBAO1CyF,EAP0C,KAO7BC,EAP6B,KAS3CC,EAAkB,SAAChF,GACxB,IAAM9M,EAAQ8M,EAAMC,OAAO/M,MAC3B,OAAQ8M,EAAMC,OAAOJ,IACpB,IAAK,gBACJ8E,EAAezR,GACf,MAED,IAAK,wBACJ2R,EAAuB3R,GACvB,MAED,IAAK,gBACJ6R,EAAe7R,KAqBlB,OACC,kBAACuM,GAAA,EAAD,CAAQb,KAAMA,EAAMC,QAASA,GAC5B,kBAACa,GAAA,EAAD,KAAcZ,GACd,kBAACa,GAAA,EAAD,CAAe9D,UAAWD,EAAQuI,SACjC,kBAAC3J,GAAA,EAAD,KACC,kBAACG,GAAA,EAAD,CAAUzN,IAAI,SAAS2O,UAAWD,EAAQ0H,QACzC,kBAAChJ,GAAA,EAAD,CAAYuB,UAAWD,EAAQ7O,MAA/B,QACE6Q,EAAsB,kBAACtD,GAAA,EAAD,CAAYuB,UAAWD,EAAQlI,cAA/B,kBAA2E,KACjG6Q,EAAc,kBAACjK,GAAA,EAAD,CAAYuB,UAAWD,EAAQlM,MAA/B,QAAyD,MAGzE8U,EACA,kBAAC7J,GAAA,EAAD,CAAUzN,IAAI,YACb,kBAAC4W,GAAA,EAAD,CAAWjE,GAAG,gBAAgBvD,MAAM,SAASpJ,MAAOwR,EAAa3E,SAAUiF,EAAiBnJ,UAAWD,EAAQ7O,KAAMmQ,QAAQ,aAC3HU,EAAsB,kBAACkG,GAAA,EAAD,CAAWjE,GAAG,wBAAwBvD,MAAM,eAAepJ,MAAO0R,EAAqB7E,SAAUiF,EAAiBnJ,UAAWD,EAAQlI,aAAcwJ,QAAQ,aAAgB,KACjMqH,EAAc,kBAACT,GAAA,EAAD,CAAWjE,GAAG,gBAAgBvD,MAAM,OAAOpJ,MAAO4R,EAAa/E,SAAUiF,EAAiBnJ,UAAWD,EAAQlM,KAAMwN,QAAQ,aAAgB,KAC3J,kBAACuE,GAAA,EAAD,CAAYwD,aAAW,SAASrK,QA/Bd,WACvB,IAAMjJ,EAAuB,CAAEgH,KAAM+L,EAAaQ,UAAU,GACxDtH,IACHjM,EAAKwT,aAAeP,GAEjBL,IACH5S,EAAKyT,KAAON,GAEbR,EAAsB3S,GAEtBgT,EAAe,IACfE,EAAuB,IACvBE,EAAe,KAmBgD9I,MAAM,YAAY0F,KAAK,SAChF,kBAAC,KAAD,QAIF,KAGA7P,EAAMjC,KAAI,SAAA8B,GAAI,OACb,kBAACgJ,GAAA,EAAD,CAAUzN,IAAKyE,EAAKgH,MACnB,kBAAC0M,GAAA,EAAD,CAAcxJ,UAAWD,EAAQ7O,MAAO4E,EAAKgH,MAC3CiF,EAAsB,kBAACyH,GAAA,EAAD,CAAcxJ,UAAWD,EAAQlI,cAAe/B,EAAKwT,cAA+B,KAC1GZ,EAAc,kBAACc,GAAA,EAAD,CAAcxJ,UAAWD,EAAQlM,MAAOiC,EAAKyT,MAAuB,KAEnFX,EACA,kBAAC,WAAD,KACC,kBAAChD,GAAA,EAAD,CAAYwD,aAAW,MAAMrK,QAAS,kBAAM0J,EAAsB,eAAK3S,EAAN,CAAYuT,UAAU,MAASjJ,MAAM,YAAY0F,KAAK,SACtH,kBAAC,KAAD,OAED,kBAACF,GAAA,EAAD,CAAYwD,aAAW,SAASrK,QAAS,kBAAM0J,EAAsB,eAAK3S,EAAN,CAAYuT,UAAU,MAAUnI,UAAWpL,EAAKuT,SAAUjJ,MAAM,YAAY0F,KAAK,SACpJ,kBAAC,KAAD,QAIF,kBAACF,GAAA,EAAD,CAAYwD,aAAYtT,EAAKuT,SAAW,SAAW,MAAOtK,QAAS,kBAAM0J,EAAsB,eAAK3S,EAAN,CAAYuT,UAAWvT,EAAKuT,aAAajJ,MAAM,YAAY0F,KAAK,SAC3JhQ,EAAKuT,SAAW,kBAAC,KAAD,MAAiB,kBAAC,KAAD,eClIvCI,GAAW,SAACpS,GACjB,IACMnG,EAAOmG,EADIhC,OAAOC,KAAK+B,GALX,IAOlB,QAAavG,IAATI,EACH,MAAM,IAAImC,MAAJ,2CAA8Cd,KAAKI,UAAU0E,GAA7D,MAEP,OAAOnG,GA6BFgO,GAAYC,aAAW,CACzBuK,WAAY,CACRC,YAAa,MAkENC,GAlDiB,SAACpL,GAAkB,IAC1CqL,EAA6LrL,EAA7LqL,WAAYrT,EAAiLgI,EAAjLhI,OAAQsT,EAAyKtL,EAAzKsL,mBAAoBC,EAAqJvL,EAArJuL,SAAUC,EAA2IxL,EAA3IwL,YADT,EACoJxL,EAA9HuD,2BADtB,WACoJvD,EAAnGkK,mBADjD,WACoJlK,EAAhFyL,eAAgBtB,OADpF,SACyGuB,EAA2C1L,EAA3C0L,YADzG,EACoJ1L,EAA9BoK,2BADtH,SAG3C7I,EAAUb,KAHiC,EAKzBsE,oBAAS,GALgB,mBAK1CT,EAL0C,KAKpCyB,EALoC,KAS3CvB,EAAQ4G,EAAW9E,KAAK,OAExB9O,EAAQO,EAAOxC,KAAI,SAAA2D,GAAC,OArCE,SAACN,EAAYyS,EAA8B/H,EAA8B2G,GACrG,IAAM5L,EAAO2M,GAASpS,GAChBiS,EAAevH,EAXG,SAAC1K,GACzB,IAAMQ,EAAeR,EAAK,aAC1B,YAAqBvG,IAAjB+G,EAEI,IAEDA,EAKoCsS,CAAiB9S,QAASvG,EAC/DyY,EAAOb,EArBG,SAACrR,GACjB,IAAMxD,EAAOwD,EAAK,KAClB,YAAavG,IAAT+C,EAEI,IAEDA,EAeoBuW,CAAS/S,QAASvG,EACvCuY,OAAwDvY,IAA7CgZ,EAAmB9Y,MAAK,SAAAqZ,GAAC,OAAIA,IAAMvN,KACpD,MAAO,CAAEA,OAAMyM,OAAMD,eAAcD,YAgCLiB,CAAqB3S,EAAGmS,EAAoB/H,EAAqB2G,MAmB/F,OACC,kBAAC,WAAD,KACC,kBAAC9C,GAAA,EAAD,CAAYwD,aAAW,MAAMrK,QA1BhB,kBAAMyF,GAAQ,IA0BmBpE,MAAM,YAAY0F,KAAK,SAAS9F,UAAWD,EAAQ2J,WAAY3D,eAAa,GACzH,kBAAC,KAAD,OAED,kBAAC,GAAD,CACChD,KAAMA,EACNC,QA9Ba,kBAAMwB,GAAQ,IA+B3BvB,MAAOA,EACPhN,MAAOA,EACPwS,sBA3B2B,SAAC3S,GAA0B,IAChDgH,EAAuChH,EAAvCgH,KAAMwM,EAAiCxT,EAAjCwT,aAAcC,EAAmBzT,EAAnByT,KAC5B,GAD+CzT,EAAbuT,UAGjC,GADAU,EAASjN,QACsChM,IAA3C0F,EAAOxF,MAAK,SAAA2G,GAAC,OAAI8R,GAAS9R,KAAOmF,KAAqB,CAEzD,IAAMzF,EAAQ,CAAEyF,OAAMwM,eAAcC,QACpC,IAAKW,EACJ,MAAM,IAAI7W,MAAJ,yCAA4Cd,KAAKI,UAAU0E,GAA3D,+BAEP6S,EAAY7S,SAGb2S,EAAYlN,IAeXiF,oBAAqBA,EACrB2G,YAAaA,EACbC,cAAeA,EACfC,oBAAqBA,M,UClGnB1J,GAAYC,aAAW,CACzBC,KAAM,CACFC,QAAS,OACTkL,OAAQ,IAEZrZ,KAAM,CACF8P,MAAO,KAEXwJ,OAAQ,CACJxJ,MAAO,IACPtB,YAAa,MAkDN+K,GApCa,SAACjM,GAAkB,IACnCF,EAAwEE,EAAxEF,SAAUoM,EAA8DlM,EAA9DkM,SAAUC,EAAoDnM,EAApDmM,IAAK5V,EAA+CyJ,EAA/CzJ,IAAK6V,EAA0CpM,EAA1CoM,KAAMC,EAAoCrM,EAApCqM,mBAAoBC,EAAgBtM,EAAhBsM,YACxD5Z,EAAiBoN,EAAjBpN,KAAMQ,EAAW4M,EAAX5M,OAERqO,EAAUb,KAYhB,OACI,yBAAKc,UAAWD,EAAQX,MACpB,kBAACX,GAAA,EAAD,CAAYsM,cAAY,EAAC/K,UAAWD,EAAQ7O,MAAOA,GACnD,yBAAK8O,UAAWD,EAAQyK,QACpB,kBAACQ,GAAA,EAAD,CACIJ,KAAMA,EACND,IAAKA,EACL5V,IAAKA,EACLsC,MAAO3F,EACPuZ,OAAK,EACLC,kBAAkB,KAClBhH,SArBK,SAACiE,EAA2BzW,GAC7C,GAAIyZ,MAAMzV,QAAQhE,GACd,MAAM,IAAI2B,MAAJ,4BAA+B8U,EAAE/D,OAAOJ,GAAxC,gEAAkGtS,EAAOqT,KAAK,MAA9G,MAEV2F,EAAS,CACLxZ,OACAQ,OAAQA,KAgBA0Z,iBAAkB,SAAC/T,EAAegU,GAAhB,OAAmCR,EAAmBxT,OAGhF,kBAACoH,GAAA,EAAD,CAAYsM,cAAY,GAAxB,IAA2BD,EAAYpZ,GAAvC,OCrCG4Z,GAhBU,SAAC9M,GAAkB,IAChC+M,EAAiC/M,EAAjC+M,MAAOb,EAA0BlM,EAA1BkM,SAAUI,EAAgBtM,EAAhBsM,YAEzB,OACI,kBAAC,GAAD,CACIxM,SAAUiN,EACVb,SAAUA,EACVC,IAAK,EACL5V,IAAK,EACL6V,KAAM,EACNC,mBAAoB,SAAAxT,GAAK,OAAIA,EAAMkL,YACnCuI,YAAaA,KCLnB5L,GAAYC,aAAW,CACzBsI,OAAQ,CACJpI,QAAS,OACTC,cAAe,MACfK,aAAc,GACdgK,YAAa,GACb6B,WAAY,IAEhBlF,YAAa,CACTjE,WAAY,EACZkE,WAAY,OA0FLkF,GA9Ec,SAACjN,GAAkB,IACvCqL,EAAkFrL,EAAlFqL,WAAY6B,EAAsElN,EAAtEkN,OAAQtP,EAA8DoC,EAA9DpC,UAAWkK,EAAmD9H,EAAnD8H,YAAaqF,EAAsCnN,EAAtCmN,iBAAkBC,EAAoBpN,EAApBoN,gBAE7D7L,EAAUb,KACVR,EAAWR,KACXvB,EAAc0B,GAAe,eAEnCqN,EAAOG,MAAK,SAACrY,EAAGW,GAAJ,OAAUX,EAAEtC,KAAK4a,cAAc3X,EAAEjD,SAE7C,IAAM+D,EAAa4U,EAAW9E,KAAK,KACnC3I,EAAUlF,KAAV,MAAAkF,EAAS,YAASiM,GAAc1L,EAAa1H,KAC7CmH,EAAUyP,MAAK,SAACrY,EAAGW,GAAJ,OAAUX,EAAEsJ,KAAKgP,cAAc3X,EAAE2I,SAEhD,IAAMiP,EAAgB,SAACR,GACnB,IAAMS,EAAS,YAAQN,GACjBO,EAAaP,EAAO7N,WAAU,SAAA5J,GAAC,OAAIA,EAAE/C,OAASqa,EAAMra,QACtD+a,GAAc,EACVV,EAAM7Z,OAAS,EACfsa,EAAUC,GAAcV,EAExBS,EAAU3F,OAAO4F,EAAY,GAE1BV,EAAM7Z,OAAS,GACtBsa,EAAU9U,KAAKqU,GAEnBK,EAAgBI,IAiBvB,OACO,kBAAC,WAAD,KACI,kBAACpF,GAAA,EAAD,CAAgBC,iBAAiB,GAC7B,kBAACC,GAAA,EAAD,CAAuBC,WAAY,kBAAC,KAAD,OAC/B,kBAACC,GAAA,EAAD,CACIjI,QAAS,SAACoF,GAAD,OAAWA,EAAM8C,mBAC1BC,QAAS,SAAC/C,GAAD,OAAWA,EAAM8C,mBAC1BE,QAAS,kBAAC,GAAD,CACL0C,WAAYA,EACZrT,OAAQ4F,EACR0N,mBAAoB4B,EAAO1X,KAAI,SAAAC,GAAC,OAAIA,EAAE/C,QACtC6Y,SAzBP,SAAC7Y,GACd6a,EAAc,CAAE7a,OAAMQ,OAAQ,KAyBVsY,YAtBJ,SAAC9Y,GACjB6a,EAAc,CAAE7a,OAAMQ,QAAS,KAsBXuY,gBAAc,EACdC,YApBD,SAACpU,GACpB,IACM8B,EAA0B,CAAE7E,KADxB,UAAMkC,EAAN,YAAoBa,EAAKgH,MACKhH,KAAMA,GAC9C4I,EAAS,CAAEpD,KAAMX,GAAWiC,cAAehF,YAmB3B6I,MAAM,KAEV,kBAAChC,GAAA,EAAD,CAAYuB,UAAWD,EAAQuG,aAAcA,IAEjD,kBAACc,GAAA,EAAD,KACI,kBAACzI,GAAA,EAAD,KAEI+M,EAAO1X,KAAI,SAAAC,GAAC,OACR,kBAAC6K,GAAA,EAAD,CAAUzN,IAAK4C,EAAE/C,MACb,kBAAC,GAAD,CAAOqa,MAAOtX,EAAGyW,SAAUqB,EAAejB,YAAaa,aCnGjF9B,GAAa,CAAC,SAAU,UA8BfqC,GA5Ba,WACxB,IAAMxN,EAAWR,KACXrN,EAAYwN,GAAe,qBAC3BjC,EAAYiC,GAAe,aAEzB1M,EAAiBd,EAAjBc,aAEFwa,EAAmBpY,EAAoBpC,GACvC2U,EAAW,yBAAqB6F,EAArB,KAEXC,EAAe,YAAOhQ,EAAUe,QAMtC,OACI,kBAAC,GAAD,CACI0M,WAAYA,GACZ6B,OAAQ/Z,EACRyK,UAAWgQ,EACX9F,YAAaA,EACbqF,iBAAkB7X,EAClB8X,gBAXgB,SAACja,GACrB,IAAMiG,EAAyB,eAAQ/G,EAAR,CAAmBc,iBAClD+M,EAAS,CAAEpD,KAAMX,GAAWY,gBAAiB3D,aChB/CiS,GAAa,CAAC,SAAU,aAiCfwC,GA/BgB,WAC3B,IAAM3N,EAAWR,KACXrN,EAAYwN,GAAe,qBAC9BjC,EAAYiC,GAAe,aAEzBzM,EAAoBf,EAApBe,gBAEF0a,EAAsBjY,EAAuBzC,GAC1C2a,EAA2BjY,EAA4BzD,GACvD2b,EAAYF,EAAsBC,EAClCjG,EAAW,4BAAwBgG,EAAxB,cAAiDC,EAAjD,cAA+EC,EAA/E,KAEXC,EAAkB,YAAOrQ,EAAUgB,WAOzC,OACI,kBAAC,GAAD,CACIyM,WAAYA,GACZ6B,OAAQ9Z,EACRwK,UAAWqQ,EACXnG,YAAaA,EACbqF,iBAAkBvX,EAClBwX,gBAZgB,SAACha,GACrB,IAAMgG,EAAyB,eAAQ/G,EAAR,CAAmBe,oBAClD8M,EAAS,CAAEpD,KAAMX,GAAWY,gBAAiB3D,aClB/CiS,GAAa,CAAC,SAAU,YA+Bf6C,GA7Be,WAC1B,IAAMhO,EAAWR,KACXrN,EAAYwN,GAAe,qBAC9BjC,EAAYiC,GAAe,aAEzBxM,EAAmBhB,EAAnBgB,eAEF8a,EAAqBtY,EAAuBxC,GACzCyU,EAAW,2BAAuBqG,EAAvB,cAEXC,EAAiB,YAAOxQ,EAAUiB,UAOxC,OACI,kBAAC,GAAD,CACIwM,WAAYA,GACZ6B,OAAQ7Z,EACRuK,UAAWwQ,EACXtG,YAAaA,EACbqF,iBAAkBvX,EAClBwX,gBAZgB,SAAC/Z,GACrB,IAAM+F,EAAyB,eAAQ/G,EAAR,CAAmBgB,mBAClD6M,EAAS,CAAEpD,KAAMX,GAAWY,gBAAiB3D,aCRtCiV,GAVO,WAClB,OACI,kBAAC,WAAD,KACI,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,Q,oBCJN3N,GAAYC,aAAW,CACzB2N,MAAO,CACHpF,WAAY,MAuBLqF,GAnBG,WACd,IAAMhN,EAAUb,KACVhE,EAAQmD,GAAe,SACrBvD,EAA4BI,EAA5BJ,MAAOC,EAAqBG,EAArBH,MAAOC,EAAcE,EAAdF,UACtB,OACI,kBAAC,WAAD,KACI,kBAACiF,GAAA,EAAD,CAAOD,UAAWD,EAAQ+M,MAAO5M,aAAcpF,EAAOsF,MAAM,UAAUrL,IAAK,IAAKiY,UAAQ,GACpF,kBAAC,KAAD,OAEJ,kBAAC/M,GAAA,EAAD,CAAOD,UAAWD,EAAQ+M,MAAO5M,aAAcnF,EAAOqF,MAAM,YAAYrL,IAAK,IAAKiY,UAAQ,GACtF,kBAAC,KAAD,OAEJ,kBAAC/M,GAAA,EAAD,CAAOD,UAAWD,EAAQ+M,MAAO5M,aAAclF,EAAWoF,MAAM,UAAUrL,IAAK,IAAKiY,UAAQ,GACxF,kBAAC,KAAD,SCFDC,GAXc,SAACzO,GAAkB,IACpCjL,EAAkCiL,EAAlCjL,UAAWhC,EAAuBiN,EAAvBjN,SAAUmZ,EAAalM,EAAbkM,SACvBwC,EAAWzZ,EAAqBlC,EAAUgC,GAIhD,OACI,kBAAC,GAAD,CAAU+K,SAAU/K,EAAWmX,SAAUA,EAAUC,IAAK,EAAG5V,IAAK,EAAG6V,KAAM,EAAGC,mBAHrD,SAACnZ,GAAD,OAA6BA,EAASwb,GAAU3K,YAG6CuI,YAAapX,KCRnIwL,GAAYC,aAAW,CACzBsI,OAAQ,CACJ9H,aAAc,GACdgK,YAAa,GACb6B,WAAY,GACZjF,WAAY,OAwCL4G,GApCW,WACtB,IAAMzO,EAAWR,KACXrN,EAAYwN,GAAe,qBAC3B0B,EAAUb,KAERzN,EAAyBZ,EAAzBY,WAAYF,EAAaV,EAAbU,SAEd6b,EAAqB3b,EAAWqK,QAAO,SAAAtI,GAAC,OAAI5C,EAAWC,IAAyB,UAAX2C,EAAEtC,QAEvEmc,EAAiB1Z,EAAkB9C,GAEnC6Z,EAAW,SAACnX,GACd,IAAM+Z,EAAa,YAAQ7b,GACrB8b,EAAiBD,EAAczP,WAAU,SAAArK,GAAC,OAAIA,EAAEtC,OAASqC,EAAUrC,QACzEoc,EAAcC,GAAkBha,EAChCmL,EAAS,CACLpD,KAAMX,GAAWY,gBACjB3D,KAAK,eAAM/G,EAAP,CAAkBY,WAAY6b,OAG1C,OACI,kBAAC,WAAD,KACI,kBAAC7O,GAAA,EAAD,CAAYuB,UAAWD,EAAQ0H,QAA/B,eAAoD4F,EAApD,KACA,kBAAC1O,GAAA,EAAD,KAEQyO,EAAmBpZ,KAAI,SAAAR,GAAC,OACpB,kBAACsL,GAAA,EAAD,CAAUzN,IAAKmC,EAAEtC,MACb,kBAAC,GAAD,CAAWqC,UAAWC,EAAGjC,SAAUA,EAAUmZ,SAAUA,WCtCpE8C,GANW,WACzB,OACC,kBAAC,GAAD,OCGK,SAASC,GAAqB/b,GACpC,OAAQA,GACP,KAAK,EACJ,OAAO,EACR,KAAK,EACJ,OAAO,EACR,KAAK,EACJ,OAAO,GACR,QACC,MAAM,IAAI2B,OAIN,SAASqa,GAAeC,GAC9B,IAAI9Z,EAAO,EAGX,OAFAA,GAAQ4Z,GAAqBE,EAAQC,YACrC/Z,GAAQ4Z,GAAqBE,EAAQE,SAgB/B,SAASC,GAAmBjd,GAClC,OAAOA,EAAUiB,SAASkC,KAAI,SAAA+H,GAAC,OAAI2R,GAAe3R,MAAI7H,QAAO,SAACV,EAAGW,GAAJ,OAAUX,EAAIW,IAAG,GC9B/E,IAAM+K,GAAYC,aAAW,CAC5BmH,YAAa,CACZC,WAAY,KAEbwH,QAAS,CACR1O,QAAS,OACTC,cAAe,UAEhB5N,OAAQ,CACPkW,UAAW,MA+DEoG,GAvDY,SAACxP,GAAkB,IACrCmP,EAAsBnP,EAAtBmP,QAASjD,EAAalM,EAAbkM,SAEX3K,EAAUb,KAEV+O,EAAcP,GAAeC,GAE7BC,EAA4B,CAAE1c,KAAM,aAAcQ,OAAQic,EAAQC,YAKlEC,EAAyB,CAAE3c,KAAM,UAAWQ,OAAQic,EAAQE,SAMlE,OACC,kBAAC,WAAD,KACC,kBAACjH,GAAA,EAAD,CAAgBC,iBAAiB,GAChC,kBAACC,GAAA,EAAD,CAAuBC,WAAY,kBAAC,KAAD,OAClC,kBAACtI,GAAA,EAAD,CAAYuB,UAAWD,EAAQuG,aAAcqH,EAAQzc,KAArD,KAA6D+c,EAA7D,MAED,kBAAC7G,GAAA,EAAD,KACC,yBAAKpH,UAAWD,EAAQgO,SACvB,yBAAK/N,UAAWD,EAAQrO,QACvB,kBAAC,GAAD,CACC4M,SAAUsP,EACVlD,SArBoB,SAACwD,GAC3B,IAAMC,EAAc,eAAQR,EAAR,CAAiBC,WAAYM,EAAkBxc,SACnEgZ,EAASyD,IAoBHxD,IAAK,EACL5V,IAAK,EACL6V,KAAM,EACNC,mBAAqB,SAAAxT,GAAK,OAAIA,EAAMkL,YACpCuI,YAAa2C,MAGf,yBAAKzN,UAAWD,EAAQrO,QACvB,kBAAC,GAAD,CACC4M,SAAUuP,EACVnD,SA3BiB,SAAC0D,GACxB,IAAMD,EAAc,eAAQR,EAAR,CAAiBE,QAASO,EAAe1c,SAC7DgZ,EAASyD,IA0BHxD,IAAK,EACL5V,IAAK,EACL6V,KAAM,EACNC,mBAAqB,SAAAxT,GAAK,OAAIA,EAAMkL,YACpCuI,YAAa2C,WC9DfvO,GAAYC,aAAW,CAC5BsI,OAAQ,CACPpI,QAAS,OACTC,cAAe,OAEhBgH,YAAa,CACZjE,WAAY,EACZkE,WAAY,OAIRsD,GAAa,CAAC,YACd5U,GAAa4U,GAAW9E,KAAK,KA2EpBsJ,GAzES,WACvB,IAAMtO,EAAUb,KACVR,EAAWR,KACXrN,EAAYwN,GAAe,qBAC3B/B,EAAc+B,GAAe,eAC7B1B,EAAc0B,GAAe,eACjBiQ,EAAqBzd,EAA/BiB,SAERwc,EAAiBzC,MAAK,SAACrY,EAAGW,GAAJ,OAAUX,EAAEtC,KAAK4a,cAAc3X,EAAEjD,SAEvD,IAAMqd,EAAeT,GAAmBjd,GAClC2d,EFRA,SAA8B3d,GACjC,IAAM4d,EAAW5d,EAAUY,WAAWT,MAAK,SAAAwC,GAAC,MAAe,aAAXA,EAAEtC,QAClD,QAAiBJ,IAAb2d,EACA,MAAM,IAAIpb,MAAJ,qBAAwBxC,EAAUS,WAAlC,kCAEV,IAAMod,EAAY7d,EAAUY,WAAWT,MAAK,SAAAwC,GAAC,MAAe,cAAXA,EAAEtC,QACnD,QAAkBJ,IAAd4d,EACA,MAAM,IAAIrb,MAAJ,qBAAwBxC,EAAUS,WAAlC,mCAEV,OAA8C,IAAtCmd,EAAS/c,OAASgd,EAAUhd,QEDbid,CAAqB9d,GACtC2b,EAAY+B,EAAeC,EAC9BlI,EAAW,oBAAgBiI,EAAhB,cAAkCC,EAAlC,cAAyDhC,EAAzD,KAEjBlQ,EAAYpF,KAAZ,MAAAoF,EAAW,YAAS+L,GAAc1L,EAAa1H,MAC5CqH,EAAYuP,MAAK,SAACrY,EAAGW,GAAJ,OAAUX,EAAEsJ,KAAKgP,cAAc3X,EAAE2I,SAErD,IAAM8R,EAAkB,SAACjB,GACxB,IAAMkB,EAAW,YAAOP,GAClBQ,EAAeR,EAAiBzQ,WAAU,SAAA5J,GAAC,OAAIA,EAAE/C,OAASyc,EAAQzc,QACpE4d,GAAgB,EACfnB,EAAQC,WAAa,GAAKD,EAAQE,QAAU,EAC/CgB,EAAYC,GAAgBnB,EAE5BkB,EAAYxI,OAAOyI,EAAc,GAExBnB,EAAQC,WAAa,GAAKD,EAAQE,QAAU,GACtDgB,EAAY3X,KAAKyW,GAElB,IAAM/V,EAAyB,eAAQ/G,EAAR,CAAmBiB,SAAU+c,IAC5DnQ,EAAS,CAAEpD,KAAMX,GAAWY,gBAAiB3D,UAiB9C,OACC,kBAAC,WAAD,KACC,yBAAKoI,UAAWD,EAAQ0H,QACvB,kBAAC,GAAD,CACCoC,WAAYA,GACZrT,OAAQ8F,EACRwN,mBAAoBwE,EAAiBta,KAAI,SAAAC,GAAC,OAAIA,EAAE/C,QAChD6Y,SArBe,SAAC7Y,GACnB0d,EAAgB,CAAE1d,OAAM0c,WAAY,EAAGC,QAAS,KAqB7C7D,YAlBkB,SAAC9Y,GACtB0d,EAAgB,CAAE1d,OAAM0c,YAAa,EAAGC,SAAU,KAkB/C5D,gBAAc,EACdC,YAhBqB,SAACpU,GACnB,IACM8B,EAA0B,CAAE7E,KADxB,UAAMkC,GAAN,YAAoBa,EAAKgH,MACKhH,KAAMA,GAC9C4I,EAAS,CAAEpD,KAAMX,GAAWiC,cAAehF,YAe/C,kBAAC6G,GAAA,EAAD,CAAYuB,UAAWD,EAAQuG,aAAcA,IAE9C,kBAAC3H,GAAA,EAAD,KAEE2P,EAAiBta,KAAI,SAAA+H,GAAC,OACrB,kBAAC,GAAD,CAAS1K,IAAK0K,EAAE7K,KAAMyc,QAAS5R,EAAG2O,SAAUkE,UCjFnCG,GANS,WACvB,OACC,kBAAC,GAAD,OCgCaC,GA/BM,WACpB,IAAMtQ,EAAWR,KACXrN,EAAYwN,GAAe,qBACzBtM,EAAWlB,EAAXkB,OACF0K,EAAY4B,GAAe,aAejC,OACC,kBAAC,GAAD,CACCoC,MAAM,SACNxK,MAAOlE,EACPoD,SAAUsH,EACVgK,gBAduB,SAAC3Q,GAAgB,IACjC5E,EAAS4E,EAAT5E,KACR,MAAM,GAAN,OAAUA,EAAV,SAaCwV,oBAnB2B,SAACuI,GAC7B,MAAO,KAmBNvM,cAXyB,SAACwM,GAC3B,IAAMtX,EAAyB,eAAQ/G,EAAR,CAAmBkB,OAAQmd,IAC1DxQ,EAAS,CAAEpD,KAAMX,GAAWY,gBAAiB3D,aCkChCuX,GAhDK,WACnB,IAAMzQ,EAAWR,KACXrN,EAAYwN,GAAe,qBACzBrM,EAASnB,EAATmB,KACFkH,EAAUmF,GAAe,WAEzB+Q,EAAsB,SAACtZ,GAC5B,IAAMjC,EAAOoF,EAAgBnD,EAAMoD,GACnC,MAAM,GAAN,OAAUrF,EAAV,SAGKwb,EAAiB,SAACvZ,GAAgB,IAC/B5E,EAAS4E,EAAT5E,KACF4G,EAAYsX,EAAoBtZ,GAClC2K,EAAK,UAAMvP,EAAN,aAAe4G,EAAf,KAKT,OAJqBhC,EAAK/C,KAAK8N,WAAV,UAAwBpJ,EAAxB,qBAEpBgJ,GAAK,YAAS3K,EAAKuD,OAAS7B,EAAMwC,MAA7B,MAECyG,GAUR,OACC,kBAAC,WAAD,KtC8CK,SAA0BjK,EAAuBvB,GACvD,IAAMqa,EAAa,IAAIC,IACjB3Y,EAAU3B,EAAW4B,MAAM,KAFoD,uBAGrF,YAAmBH,EAAeF,EAAQvB,GAA1C,+CAAuD,CAAC,IACjD6B,EADgD,QAC9BD,MAAM,KAC9ByY,EAAWE,IAAI1Y,EAAWF,EAAQG,UALkD,kFAOrF,OAAOoU,MAAMsE,KAAKH,GsCnDfI,CAAcxW,EAASzB,GAAUzD,KAAI,SAAA9C,GAAI,OACxC,kBAAC,GAAD,CACCG,IAAKH,EACLuP,MAAO8C,YAAarS,GACpB+E,MAAO0K,GAAc3O,EAAD,UAAUyF,EAAV,YAAsBvG,IAC1CiE,SAAUoB,EAAY2C,EAAD,UAAazB,EAAb,YAAyBvG,IAC9CuV,gBAAiB4I,EACjB3I,oBAAqB0I,EACrB1M,cAAe,SAAAE,GAAQ,OAlBH,SAAC1R,EAAcye,GACvC,IAAMC,EAAU5d,EAAK8J,QAAO,SAAA3F,GAAC,OAAKA,EAAEpD,KAAK8N,WAAP,UAAqBpJ,EAArB,YAAiCvG,OACnE0e,EAAQ1Y,KAAR,MAAA0Y,EAAO,YAASD,IAChB,IAAM/X,EAAyB,eAAQ/G,EAAR,CAAmBmB,KAAM4d,IACxDlR,EAAS,CAAEpD,KAAMX,GAAWY,gBAAiB3D,SAcdiY,CAAiB3e,EAAM0R,WCzC3CkN,GAAa,SAQ1B,SAASC,GAAqBhd,EAAcyD,GAC3C,IAAMzE,EAAkB,GAD2C,uBAEnE,YAAoByE,EAApB,+CAA4B,CAAC,IACtBtF,EADqB,QACT,KAClBa,EAAOmF,KAAK,CAAEnE,OAAM7B,OAAM2C,KAAM,OAJkC,kFAMnE,OAAO9B,E,cCjBFmN,GAAYC,cAAW,SAAA6Q,GAAK,MAAK,CACtC5Q,KAAM,CACLC,QAAS,OACTC,cAAe,MACfoI,WAAY,GACZE,UAAW,IAEZ1W,KAAM,CACLmR,WAAY,QAEbhL,MAAO,CACNqQ,WAAY,EACZtH,MAAO4P,EAAMC,QAAQC,gBAAgBF,EAAMC,QAAQE,QAAQC,MAC3DC,gBAAiBL,EAAMC,QAAQE,QAAQC,UAqB1BE,GAbqB,SAAC9R,GAAkB,IAC9CtN,EAAgBsN,EAAhBtN,KAAMmG,EAAUmH,EAAVnH,MAER0I,EAAUb,KAEhB,OACC,yBAAKc,UAAWD,EAAQX,MACvB,kBAACX,GAAA,EAAD,CAAYuB,UAAWD,EAAQ7O,MAAOA,GACtC,kBAACqf,GAAA,EAAD,CAAQvQ,UAAWD,EAAQ1I,OAAQA,KCzBhC6H,GAAYC,aAAW,CAC5BsI,OAAQ,CACPG,UAAW,GACXF,WAAY,GAEb8I,QAAS,CACRnR,QAAS,OACTC,cAAe,MACfK,aAAc,MA6DD8Q,GAzDO,WAAO,IAAD,EAErB1Q,EAAUb,KAEVrO,EAAYwN,GAAe,qBAE3BqS,EAAOpd,EAA4BzC,EAAW,QAC9C8f,EAAUrd,EAA4BzC,EAAW,WACjD+f,EAAWtd,EAA4BzC,EAAW,YAClD0D,EAAYjB,EAA4BzC,EAAW,aACnD6d,EAAYpb,EAA4BzC,EAAW,aAEnDggB,GAAY,UAAAhgB,EAAUc,aAAaX,MAAK,SAAAiD,GAAC,MAAe,cAAXA,EAAE/C,eAAnC,eAA0DQ,SAAU,EAEhFof,EAAaF,EAAWrc,EAGxBwc,EAAgB,EAAIjc,KAAK4F,KAAKgW,EAAO,GACrCM,EAAY,EAAIlc,KAAK4F,KAAKgU,EAAY,GAExCuC,EAAWN,EACX9f,EAAUU,WAAaZ,EAASuC,QACnC+d,GAAY,GAGb,IAAIC,EAAUD,EAAWJ,EACrBhgB,EAAUU,WAAaZ,EAASuC,QACnCge,GAAW,GAGZ,IAAMC,EAAoB,EAAVD,EAEhB,OACC,kBAAC,WAAD,KACC,kBAACzS,GAAA,EAAD,CAAYuB,UAAWD,EAAQ0H,QAA/B,cACA,kBAAC5E,GAAA,EAAD,MACA,yBAAK7C,UAAWD,EAAQyQ,SACvB,kBAAC,GAAD,CAAkBtf,KAAK,aAAamG,MAAOyZ,IAC3C,kBAAC,GAAD,CAAkB5f,KAAK,oBAAoBmG,MAvBrB,KAyBvB,kBAACoH,GAAA,EAAD,CAAYuB,UAAWD,EAAQ0H,QAA/B,qBACA,kBAAC5E,GAAA,EAAD,MACA,yBAAK7C,UAAWD,EAAQyQ,SACvB,kBAAC,GAAD,CAAkBtf,KAAK,iBAAiBmG,MAAO0Z,IAC/C,kBAAC,GAAD,CAAkB7f,KAAK,aAAamG,MAAO2Z,KAE5C,kBAACvS,GAAA,EAAD,CAAYuB,UAAWD,EAAQ0H,QAA/B,YACA,kBAAC5E,GAAA,EAAD,MACA,yBAAK7C,UAAWD,EAAQyQ,SACvB,kBAAC,GAAD,CAAkBtf,KAAK,WAAWmG,MAAO4Z,IACzC,kBAAC,GAAD,CAAkB/f,KAAK,UAAUmG,MAAO6Z,IACxC,kBAAC,GAAD,CAAkBhgB,KAAK,UAAUmG,MAAO8Z,O,oBCvB7BC,GAzCuB,SAAC5S,GAAkB,IAChDuE,EAA4BvE,EAA5BuE,KAAMsO,EAAsB7S,EAAtB6S,SAAU/I,EAAY9J,EAAZ8J,QAMlBgJ,EAAW,WAChBD,GAAS,IAEV,OACC,kBAACzN,GAAA,EAAD,CACCb,KAAMA,EACNC,QAASsO,GAET,kBAACxN,GAAA,EAAD,KACC,kBAACyN,GAAA,EAAD,KACEjJ,IAGH,kBAACkJ,GAAA,EAAD,KACC,kBAACpQ,GAAA,EAAD,CACCrC,QAnBc,WACjBsS,GAAS,IAmBNjR,MAAM,YACNiB,QAAQ,YAHT,OAOA,kBAACD,GAAA,EAAD,CACCrC,QAASuS,EACTlR,MAAM,YACNiB,QAAQ,WACRoQ,WAAS,GAJV,S,8BCCWC,GA5BiB,SAAClT,GAAkB,IAC1CmT,EAA2BnT,EAA3BmT,SAAUC,EAAiBpT,EAAjBoT,aAelB,OACC,kBAACC,GAAA,EAAD,CAAS5O,MAAM,oBACd,kBAAC2C,GAAA,EAAD,CACC7G,QAhBiB,WACnB,IAAMnH,EAAOga,IACPE,EAAUC,SAASC,cAAc,KACvCF,EAAQG,aAAa,OAAQ,uCAAyCC,mBAAmBta,IACzFka,EAAQG,aAAa,WAAYN,GAEjCG,EAAQ1P,MAAM/C,QAAU,OACxB0S,SAASrB,KAAKyB,YAAYL,GAE1BA,EAAQM,QAERL,SAASrB,KAAK2B,YAAYP,IAMxB1R,MAAM,aAEN,kBAAC,KAAD,S,oBCwBWkS,GA/CiB,SAAC9T,GAAiB,IACzC+T,EAAa/T,EAAb+T,SAuBR,OACC,kBAAC,WAAD,KACC,2BACCC,OAAO,mBACPC,QAAM,EACNzO,GAAG,cACH1I,KAAK,OACL4I,SA5BsB,SAACC,GACzB,IAAMuO,EAAQvO,EAAMC,OAAOsO,MAC3B,GAAKA,GAA0B,IAAjBA,EAAM3b,OAApB,CAIA,IAAM4b,EAAOD,EAAM,GACbE,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAAA3K,GACf,IAAKA,EAAE/D,OACN,MAAM,IAAI/Q,MAAJ,yCAA4Csf,EAAKzhB,KAAjD,MAEP,IAAM0G,EAAOuQ,EAAE/D,OAAOhK,OACtB,IAAKxC,EACJ,MAAM,IAAIvE,MAAJ,gBAAmBsf,EAAKzhB,KAAxB,kBAEPqhB,EAAS3a,IAEVgb,EAAOG,WAAWJ,QAfjBtY,QAAQ2Y,IAAR,wBA2BA,2BAAOC,QAAQ,eACd,kBAACpB,GAAA,EAAD,CAAS5O,MAAM,oBACd,kBAAC2C,GAAA,EAAD,CACCxF,MAAM,YACN8S,UAAU,QAEV,kBAAC,KAAD,WCXAhU,GAAYC,aAAW,CACzBgU,IAAK,CACDC,SAAU,EACV/T,QAAS,UAoOFgU,GAhOc,WACzB,IAAMtT,EAAUb,KACVR,EAAWR,KACX1C,EAAoB6C,GAAe,qBACnC9G,EAAe8G,GAAe,gBAC9BnF,EAAUmF,GAAe,WALA,EAOKmF,oBAAS,GAPd,mBAOxB8P,EAPwB,KAOZC,EAPY,OAQO/P,mBAAS,GARhB,mBAQxBgQ,EARwB,KAQXC,EARW,KAU/BC,qBAAU,WACNC,MAAM,uBACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA7iB,GACF,IAAM6G,E5C9Cf,SAA+Bmc,GAClC,IAAMxc,EAAsC,GAE5C,OADAvC,EAAkBmC,EAAe4c,EAASxc,EAAcH,GACjDG,E4C2CkByc,CAAsBjjB,GACnC2N,EAAS,CAAEpD,KAAMX,GAAWuB,cAAetE,YAE9Cqc,OAAM,SAAA3Z,GACHD,QAAQC,MAAR,2CAAkDA,EAAM4Z,QAAxD,aAAoE5Z,EAAM6Z,WAElFR,MAAM,oBACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAlI,GACF,IAAM9T,EAAO8T,EACbhN,EAAS,CAAEpD,KAAMX,GAAWwB,WAAYvE,YAE3Cqc,OAAM,SAAA3Z,GACHD,QAAQC,MAAR,wCAA+CA,EAAM4Z,QAArD,aAAiE5Z,EAAM6Z,WAE/ER,MAAM,sBACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA9hB,GACF,IAAM8F,EAAO9F,EAASsiB,IACtB1V,EAAS,CAAEpD,KAAMX,GAAW0B,aAAczE,YAE7Cqc,OAAM,SAAA3Z,GACHD,QAAQC,MAAR,0CAAiDA,EAAM4Z,QAAvD,aAAmE5Z,EAAM6Z,WAEjFR,MAAM,mBACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAS,GACF,IAAMC,EN1Ef,SAA4BP,GAClC,IAAMtX,EAAiC,GAEvC,OADAzH,EAAkB8a,GAAYiE,EAAStX,EAAWsT,IAC3CtT,EMuE0B8X,CAAmBF,EAAMtiB,QAC3C2M,EAAS,CAAEpD,KAAMX,GAAW6B,WAAY5E,KAAM0c,OAEjDL,OAAM,SAAA3Z,GACHD,QAAQC,MAAR,uCAA8CA,EAAM4Z,QAApD,aAAgE5Z,EAAM6Z,WAE9ER,MAAM,kBACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA5hB,GACF,IAAMwiB,E3CjFf,SAA0BT,GAChC,IAAM7a,EAA8B,GAEpC,OADAlE,EAAkByC,EAAUsc,EAAS7a,EAASxB,GACvCwB,E2C8EyBub,CAAiBziB,GAClC0M,EAAS,CAAEpD,KAAMX,GAAW4B,SAAU3E,KAAM4c,OAE/CP,OAAM,SAAA3Z,GACHD,QAAQC,MAAR,sCAA6CA,EAAM4Z,QAAnD,aAA+D5Z,EAAM6Z,aAE9E,CAACzV,IAxD2B,IA+E3BgW,EA/E2B,EA0D6BlR,oBAAS,GA1DtC,mBA0DxBmR,EA1DwB,KA0DAC,EA1DA,KAuEzBC,EAAgB7hB,EAAgBwI,EAAkBjK,UAAY+F,EAA0BkE,EAAmBjE,GAC3G8V,EAAiB1Z,EAAkB6H,GACnCsZ,EAAargB,EAAc+G,GAC3B+S,EAAeT,GAAmBtS,GAClCuZ,EN5Fc,EM4FqBvZ,ENxFbzJ,OAJjBgF,OM6FLie,EAAgBza,EAA0BiB,EAAmBtC,GAC7D+b,EAAmBxa,GAA0Bua,GAI/CN,EADAM,EAAgB,IACE,UAAMA,EAAN,QACXA,EAAgB,IACL,UAAMlgB,KAAKogB,MAAMF,EAAgB,KAAO,GAAxC,UAEA,UAAMlgB,KAAKogB,MAAMF,EAAgB,KAAU,GAA3C,UAGtB,IAMIG,EAFEvhB,EAAWhD,EAAW4K,GAG5B,OAAQgY,GACJ,KAAK,EACD2B,EAAmB,kBAAC,GAAD,MACnB,MACJ,KAAK,EACDA,EAAmB,kBAAC,GAAD,MACnB,MACJ,KAAK,EACDA,EAAmB,kBAAC,GAAD,MACnB,MACJ,KAAK,EACDA,EAAmB,kBAAC,GAAD,MACnB,MACJ,KAAK,EACDA,EAAmB,kBAAC,GAAD,MACnB,MAEJ,KAAK,EACDA,EAAmB,kBAAC,GAAD,MACnB,MAEJ,KAAK,EACDA,EAAmB,kBAAC,GAAD,MACnB,MAEJ,QACI,MAAM,IAAI9hB,MAAJ,4BAA+BmgB,IAG7C,IAYM4B,EAAc,UAAM5Z,EAAkBlK,WAAxB,SAKpB,OACI,6BACI,kBAAC+jB,GAAA,EAAD,CAAQC,SAAS,SAASlV,MAAM,WAC5B,kBAACmV,GAAA,EAAD,KACI,kBAAC1D,GAAA,EAAD,CAAS5O,MAAM,cACX,kBAAC2C,GAAA,EAAD,CAAY4P,KAAK,QAAQzW,QAtBhB,WACzBwU,GAAc,IAqB0DnK,aAAW,cAC/D,kBAAC,KAAD,QAGR,yBAAKpJ,UAAWD,EAAQoT,KACpB,kBAAC,GAAD,CAAetiB,UAAW2K,IAC1B,kBAAC,GAAD,OAEJ,kBAAC,GAAD,CAAc+W,SAvBJ,SAACkD,GACvB,IAAM7d,EAA4BrF,KAAKC,MAAMijB,GAC7C/W,EAAS,CAAEpD,KAAMX,GAAWgB,gBAAiB/D,YAsBjC,kBAAC,GAAD,CAAc+Z,SAAUyD,EAAgBxD,aAlB1B,WAC1B,OAAOrf,KAAKI,UAAU6I,MAkBV,kBAACoK,GAAA,EAAD,CAAYwD,aAAW,QAAQrK,QAhG1B,WACjB6V,GAA0B,IA+FwCxU,MAAM,aACxD,kBAAC,KAAD,QAGR,kBAACsV,GAAA,EAAD,CAAMre,MAAOmc,EAAatP,SAxElB,SAACyR,EAA+BC,GAChDnC,EAAemC,IAuE0CvU,QAAQ,cACrD,kBAACwU,GAAA,EAAD,CACIpV,MACI,kBAACR,GAAA,EAAD,CAAOC,aAAc2U,EAAezU,MAAM,UAAU4M,UAAQ,EAACjY,IAAK,KAAlE,eAKR,kBAAC8gB,GAAA,EAAD,CACIpV,MACI,kBAACR,GAAA,EAAD,CAAOC,aAAcmN,EAAgBjN,MAAM,UAAU4M,UAAQ,EAACjY,IAAK,KAAnE,gBAKR,kBAAC8gB,GAAA,EAAD,CACIpV,MACI,kBAACR,GAAA,EAAD,CAAOC,aAAc4U,EAAY1U,MAAM,UAAU4M,UAAQ,EAACjY,IAAK,KAA/D,YAKR,kBAAC8gB,GAAA,EAAD,CACIpV,MACI,kBAACR,GAAA,EAAD,CAAOC,aAAcqO,EAAcnO,MAAM,UAAU4M,UAAQ,EAACjY,IAAK,KAAjE,cAKR,kBAAC8gB,GAAA,EAAD,CACIpV,MACI,kBAACR,GAAA,EAAD,CAAOC,aAAcwU,EAAoBtU,MAAM,UAAU4M,UAAQ,EAACjY,IAAK,IAASsL,aAAc,CAAEC,SAAU,MAAOC,WAAY,SACzH,kBAACN,GAAA,EAAD,CAAOC,aAAc+U,EAAkB7U,MAAM,UAAU4M,UAAQ,EAACjY,IAAK,IAAKsL,aAAc,CAAEC,SAAU,MAAOC,WAAY,UAAvH,WAMZ,kBAACsV,GAAA,EAAD,CACI3U,UAAWtN,EACX6M,MACI,kBAACR,GAAA,EAAD,CAAOC,aAAc6U,EAAW3U,MAAM,UAAU4M,UAAQ,EAACjY,IAAK,KAA9D,WAKR,kBAAC8gB,GAAA,EAAD,CAAKpV,MAAM,aAIf0U,EAEJ,kBAACW,GAAA,EAAD,CAAQ/S,KAAMuQ,EAAYtQ,QArFJ,WAC1BuQ,GAAc,KAqFN,kBAAC,GAAD,OAEJ,kBAAC,GAAD,CACIxQ,KAAM4R,EACNtD,SAzJe,SAACmB,GACpBA,GACA9T,EAAS,CAAEpD,KAAMX,GAAWiB,iBAEhCgZ,GAA0B,IAsJlBtM,QAAQ,qF,6BC5PlB0H,GAAQ+F,aAAe,CACzB9F,QAAS,CACL3U,KAAM,UAiCC0a,GA7BC,WAAO,IAAD,EACQC,qBAAW7a,GAAS4B,IAAe,SAAC/I,GAC1D,IAAMwH,ElDNP,WAEH,IADA,IAAMA,EAA6B,CAACxJ,KAC3BgF,EAAI,EAAGA,EAAI5E,aAAa0E,OAAQE,IAAK,CAC1C,IAAM5F,EAAMgB,aAAahB,IAAI4F,GAC7B,GAAY,OAAR5F,GAIA,mBAAmB6G,KAAK7G,GAAM,CAC9B,IAAM6kB,EAAgB7jB,aAAaC,QAAQjB,GAC3C,GAAI6kB,EAAe,CAAC,IAAD,EACmB3jB,KAAKC,MAAM0jB,GAArC7kB,EADO,EACPA,IAAKH,EADE,EACFA,KAAMI,EADJ,EACIA,WACnBmK,EAAWvE,KAAK,CAAE7F,MAAKH,OAAMI,iBAKzC,OADAmK,EAAWoQ,MAAK,SAACrY,EAAGW,GAAJ,OAAUX,EAAEnC,IAAM8C,EAAE9C,OAC7BoK,EkDXgB0a,GACbC,ElDmCP,WACH,IAAM5a,EAAoBnJ,aAAaC,QAAQM,GAC/C,OAAI4I,EACOpF,SAASoF,IAER,EkDxCqB6a,GACzB7a,EAAoBvH,EAAEuH,kBAC1B,GAAI4a,GAAwB,EAAG,CAC3B,IAAME,EAAuB7a,EAAWzK,MAAK,SAAA+K,GAAC,OAAIA,EAAE1K,MAAQ+kB,KAC5D,GAAIE,EAAsB,CACtB,IAAMC,EAAkBnkB,EAAckkB,EAAqBjlB,KACvDklB,IACA/a,EAAoB+a,IAIhC,OAAO,eAAKtiB,EAAZ,CAAewH,aAAYD,yBAdb,mBACXL,EADW,KACJuD,EADI,KAiBlB,OACI,kBAACV,GAAgBwY,SAAjB,CAA0Bnf,MAAOqH,GAC7B,kBAACN,GAAaoY,SAAd,CAAuBnf,MAAO8D,GAC1B,kBAACsb,GAAA,EAAD,CAAezG,MAAOA,IAClB,kBAAC0G,GAAA,EAAD,MACA,kBAAC,GAAD,UCzBAzQ,QACW,cAA7B0Q,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS7f,MACvB,2DCZN8f,IAASC,OAAO,kBAAC,GAAD,MAAShF,SAASiF,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvD,MAAK,SAAAwD,GACjCA,EAAaC,kB","file":"static/js/main.0d340691.chunk.js","sourcesContent":["import { Contact } from \"./contact\";\r\nimport { Item } from \"./item\";\r\n\r\nexport enum MetaType {\r\n    Dwarf = \"Dwarf\",\r\n    Elf = \"Elf\",\r\n    Human = \"Human\",\r\n    Ork = \"Ork\",\r\n    Troll = \"Troll\",\r\n}\r\n\r\nexport type NamedProperty = {\r\n    name: string;\r\n    rating: number;\r\n};\r\n\r\nexport type Attribute = NamedProperty;\r\n\r\nexport type Skill = NamedProperty;\r\n\r\nexport type CharacterRef = {\r\n    key: number;\r\n    name: string;\r\n    streetName: string;\r\n};\r\n\r\nexport type Character = CharacterRef & {\r\n    metaType: MetaType;\r\n    attributes: Attribute[];\r\n    qualities: Item[];\r\n    activeSkills: Skill[];\r\n    knowledgeSkills: Skill[];\r\n    languageSkills: Skill[];\r\n    contacts: Contact[];\r\n    spells: Item[];\r\n    gear: Item[];\r\n};\r\n\r\nexport function isAwakened(character: Character): boolean {\r\n    return character.qualities.find(q => q.name === \"Adept\" || q.name === \"Magician\") !== undefined;\r\n}","import { Character, MetaType } from \"../model/character\";\r\n\r\nconst DEFAULT_KEY = -1;\r\nconst DEFAULT_CHARACTER: Character = {\r\n    key: DEFAULT_KEY,\r\n    name: \"\",\r\n    streetName: \"\",\r\n    metaType: MetaType.Human,\r\n    attributes: [\r\n        { name: \"Body\", rating: 3 },\r\n        { name: \"Agility\", rating: 3 },\r\n        { name: \"Reaction\", rating: 3 },\r\n        { name: \"Strength\", rating: 3 },\r\n        { name: \"Charisma\", rating: 3 },\r\n        { name: \"Intuition\", rating: 3 },\r\n        { name: \"Logic\", rating: 3 },\r\n        { name: \"Willpower\", rating: 3 },\r\n        { name: \"Edge\", rating: 3 },\r\n        { name: \"Magic\", rating: 3 },\r\n    ],\r\n    qualities: [],\r\n    activeSkills: [],\r\n    knowledgeSkills: [],\r\n    languageSkills: [],\r\n    contacts: [],\r\n    spells: [],\r\n    gear: [],\r\n};\r\n\r\nexport function getDefaultCharacter(): Character {\r\n    return { ...DEFAULT_CHARACTER };\r\n}\r\n\r\nexport function isDefaultCharacter(character: Character): boolean {\r\n    return JSON.stringify(DEFAULT_CHARACTER) === JSON.stringify(character);\r\n}\r\n\r\nexport function hasDefaultKey(character: Character): boolean {\r\n    return character.key === DEFAULT_KEY;\r\n}","import { Character, CharacterRef } from \"./model/character\";\r\nimport { CustomItem } from \"./model/custom-item\";\r\nimport { getDefaultCharacter } from \"./data/default-character\";\r\nimport { Dictionary } from \"./model/dictionary\";\r\n\r\nconst CHARACTER_KEY = \"character\";\r\n\r\nfunction createCharacterKey(key: number): string {\r\n    return `${CHARACTER_KEY}:${key}`;\r\n}\r\n\r\nexport function loadCharacters(): CharacterRef[] {\r\n    const characters: CharacterRef[] = [getDefaultCharacter()];\r\n    for (let i = 0; i < localStorage.length; i++) {\r\n        const key = localStorage.key(i);\r\n        if (key === null) {\r\n            continue;\r\n        }\r\n        // charater:1337\r\n        if (/^character:\\d+$/i.test(key)) {\r\n            const characterJSON = localStorage.getItem(key);\r\n            if (characterJSON) {\r\n                const { key, name, streetName } = JSON.parse(characterJSON);\r\n                characters.push({ key, name, streetName });\r\n            }\r\n        }\r\n    }\r\n    characters.sort((a, b) => a.key - b.key);\r\n    return characters;\r\n}\r\n\r\nexport function loadCharacter(key: number): Character | undefined {\r\n    if (key === -1) {\r\n        return getDefaultCharacter();\r\n    }\r\n    const character = localStorage.getItem(createCharacterKey(key));\r\n    if (character) {\r\n        return JSON.parse(character);\r\n    } else {\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport function saveCharacter(character: Character) {\r\n    localStorage.setItem(createCharacterKey(character.key), JSON.stringify(character));\r\n}\r\n\r\nexport function clearCharacter(character: Character) {\r\n    localStorage.removeItem(createCharacterKey(character.key));\r\n}\r\n\r\nconst SELECTED_CHARACTER_KEY = \"selected-character\";\r\n\r\nexport function loadSelectedCharacter(): number {\r\n    const selectedCharacter = localStorage.getItem(SELECTED_CHARACTER_KEY);\r\n    if (selectedCharacter) {\r\n        return parseInt(selectedCharacter);\r\n    } else {\r\n        return -1;\r\n    }\r\n}\r\n\r\nexport function saveSelectedCharacter(key: number) {\r\n    localStorage.setItem(SELECTED_CHARACTER_KEY, key.toString());\r\n}\r\n\r\nexport function clearSelectedCharacter() {\r\n    localStorage.removeItem(SELECTED_CHARACTER_KEY);\r\n}\r\n\r\nconst CUSTOM_ITEM_KEY = \"custom-item\";\r\n\r\nfunction createCustomItemKey(path: string, name: string): string {\r\n    return `${CUSTOM_ITEM_KEY}:${path}.${name}}`;\r\n}\r\n\r\nexport function loadCustomItems(): Dictionary<CustomItem> {\r\n    const customItems: Dictionary<CustomItem> = {};\r\n    for (let i = 0; i < localStorage.length; i++) {\r\n        const key = localStorage.key(i);\r\n        if (key === null) {\r\n            // not a custom item\r\n            continue;\r\n        }\r\n        /*\r\n        custom-item:category.group.name => [\r\n            \"custom-item:category.group.name\",\r\n            \"category.group\",\r\n            \"name\"\r\n        ]\r\n        */\r\n        const result = /^custom-item:(?:((?:(?:\\w+)(?:\\.)?)*)\\.)?(\\w+)$/i.exec(key);\r\n        if (result) {\r\n            const path = result[1];\r\n            const itemJSON = localStorage.getItem(key);\r\n            if (itemJSON) {\r\n                const item = JSON.parse(itemJSON);\r\n                customItems[path] = item;\r\n            }\r\n        }\r\n    }\r\n    return customItems;\r\n}\r\n\r\nexport function saveCustomItem(path: string, item: CustomItem) {\r\n    const key = createCustomItemKey(path, item.Name);\r\n    localStorage.setItem(key, JSON.stringify(item));\r\n}\r\n\r\nexport function clearCustomItem(path: string, item: CustomItem) {\r\n    const key = createCustomItemKey(path, item.Name);\r\n    localStorage.removeItem(key);\r\n}","import { MetaType } from \"./character\";\r\n\r\nexport function getMetaTypeCost(metaType: MetaType): number {\r\n    switch (metaType) {\r\n        case MetaType.Human:\r\n            return 0;\r\n        case MetaType.Ork:\r\n            return 40;\r\n        case MetaType.Dwarf:\r\n            return 50;\r\n        case MetaType.Elf:\r\n            return 60;\r\n        case MetaType.Troll:\r\n            return 80;\r\n        default:\r\n            throw new Error(`Unknown meta-type '${metaType}'`);\r\n    }\r\n}","import { MetaType, Attribute, Character, isAwakened } from \"./character\";\r\n\r\nexport function getEffectiveAttributeRating(character: Character, name: string): number {\r\n    const attribute = character.attributes.find(a => a.name === name);\r\n    if (!attribute) {\r\n        throw new Error(`Could not find attribute with name '${name}'`);\r\n    }\r\n    return attribute.rating + getAttributeModifier(character.metaType, attribute);\r\n}\r\n\r\nexport function getAttributeModifier(metaType: MetaType, attribute: Attribute): number {\r\n    switch (metaType) {\r\n        case MetaType.Dwarf:\r\n            switch (attribute.name) {\r\n                case \"Body\":\r\n                    return 1;\r\n                case \"Reaction\":\r\n                    return -1;\r\n                case \"Strength\":\r\n                    return 2;\r\n                case \"Willpower\":\r\n                    return 1;\r\n            }\r\n            break;\r\n        case MetaType.Elf:\r\n            switch (attribute.name) {\r\n                case \"Agility\":\r\n                    return 1;\r\n                case \"Charisma\":\r\n                    return 2;\r\n            }\r\n            break;\r\n        case MetaType.Human:\r\n            switch (attribute.name) {\r\n                case \"Edge\":\r\n                    return 1;\r\n            }\r\n            break;\r\n        case MetaType.Ork:\r\n            switch (attribute.name) {\r\n                case \"Body\":\r\n                    return 3;\r\n                case \"Strength\":\r\n                    return 2;\r\n                case \"Charisma\":\r\n                    return -1;\r\n                case \"Logic\":\r\n                    return -1;\r\n            }\r\n            break;\r\n        case MetaType.Troll:\r\n            switch (attribute.name) {\r\n                case \"Body\":\r\n                    return 4;\r\n                case \"Agility\":\r\n                    return -1;\r\n                case \"Strength\":\r\n                    return 4;\r\n                case \"Charisma\":\r\n                    return -2;\r\n                case \"Intuition\":\r\n                    return -1;\r\n                case \"Logic\":\r\n                    return -1;\r\n            }\r\n            break;\r\n    }\r\n    return 0;\r\n}\r\n\r\nexport function getAttributeCost(rating: number): number {\r\n    switch (rating) {\r\n        case 1:\r\n            return -25;\r\n        case 2:\r\n            return -15;\r\n        case 3:\r\n            return 0;\r\n        case 4:\r\n            return 20;\r\n        case 5:\r\n            return 45;\r\n        case 6:\r\n            return 75;\r\n        case 7:\r\n            return 110;\r\n        default:\r\n            throw new Error(`Unsupported attribute rating ${rating}`);\r\n    }\r\n}\r\n\r\nexport function getAttributesCost(character: Character): number {\r\n    const awakened = isAwakened(character);\r\n    let cost = 0;\r\n    for (const attribute of character.attributes) {\r\n        if (attribute.name === \"Magic\" && !awakened) {\r\n            // character could be awakened, have their Magic attribute, then be mundane\r\n            // ignore any Magic changes in this case\r\n            continue;\r\n        }\r\n        cost += getAttributeCost(attribute.rating);\r\n    }\r\n    return cost;\r\n}","import { Skill, Character } from \"./character\";\r\nimport { CustomItem } from \"./custom-item\";\r\n\r\nexport type Skills = {\r\n    active: CustomItem[];\r\n    knowledge: CustomItem[];\r\n    language: CustomItem[];\r\n};\r\n\r\nexport function getActiveSkillCost(rating: number): number {\r\n    switch (rating) {\r\n        case -1:\r\n            return 0;\r\n        case 1:\r\n            return 5;\r\n        case 3:\r\n            return 15;\r\n        case 5:\r\n            return 30;\r\n        default:\r\n            throw new Error(`Unsupported skill rating ${rating}`);\r\n    }\r\n}\r\n\r\nexport function getActiveSkillsCost(activeSkills: Skill[]): number {\r\n    return activeSkills.map(s => getActiveSkillCost(s.rating)).reduce((a, b) => a + b, 0);\r\n}\r\n\r\nexport function getKnowledgeSkillCost(rating: number): number {\r\n    switch (rating) {\r\n        case 1:\r\n            return 2;\r\n        case 3:\r\n            return 7;\r\n        case 5:\r\n            return 15;\r\n        default:\r\n            throw new Error(`Unsupported skill rating ${rating}`);\r\n    }\r\n}\r\n\r\nexport function getKnowledgeSkillsCost(knowledgeSkills: Skill[]): number {\r\n    return knowledgeSkills.map(s => getKnowledgeSkillCost(s.rating)).reduce((a, b) => a + b, 0);\r\n}\r\n\r\nexport function getFreeKnowledgeSkillPoints(character: Character): number {\r\n    const intuition = character.attributes.find(a => a.name === \"Intuition\");\r\n    if (intuition === undefined) {\r\n        throw new Error(`Character '${character.streetName}' has no attribute 'Intuition'`);\r\n    }\r\n    const logic = character.attributes.find(a => a.name === \"Logic\");\r\n    if (logic === undefined) {\r\n        throw new Error(`Character '${character.streetName}' has no attribute 'Logic'`);\r\n    }\r\n    return (intuition.rating + logic.rating) * 10;\r\n}\r\n\r\nexport function getSkillsCost(character: Character): number {\r\n    const activeSkillCost = getActiveSkillsCost(character.activeSkills);\r\n    const knowledgeSkillCost = getKnowledgeSkillsCost(character.knowledgeSkills);\r\n    // exclude native language\r\n    const languageSkillCost = getKnowledgeSkillsCost(character.languageSkills);\r\n    const freeKnowledgePoints = getFreeKnowledgeSkillPoints(character);\r\n    return activeSkillCost + Math.max(knowledgeSkillCost + languageSkillCost - freeKnowledgePoints, 0);\r\n}","import { sentenceCase } from \"change-case\";\r\nimport { isArray } from \"util\";\r\nimport { Item } from \"./item\";\r\n\r\nexport type Dictionary<T> = { [key: string]: T };\r\n\r\nexport function transformAllItems<T>(parentPath: string, parentData: any, allItems: Dictionary<T[]>, transformValues: (childpath: string, childValues: any[]) => T[]) {\r\n\tfor (const childName of Object.keys(parentData)) {\r\n\t\tconst childPath = `${parentPath}.${childName}`;\r\n\t\tconst childData = parentData[childName];\r\n\t\tif (isArray(childData)) {\r\n\t\t\tallItems[childPath] = transformValues(childPath, childData as any[]);\r\n\t\t} else {\r\n\t\t\ttransformAllItems(childPath, childData, allItems, transformValues);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nconst itemCostMap = new Map<string,number>();\r\nexport function getItemCost<T extends Item>(item: Item, allItems: Dictionary<T[]>): number {\r\n\tconst key = `${item.path}.${item.name}`;\r\n\tif (itemCostMap.has(key)) {\r\n\t\treturn itemCostMap.get(key)!;\r\n\t}\r\n\tconst items = allItems[item.path];\r\n\tconst foundItem = items.find(g => g.name === item.name);\r\n\tif (!foundItem) {\r\n\t\tthrow new Error(`Could not find item with name '${item.name}' in list '${JSON.stringify(items)}' under path '${item.path}'`);\r\n\t}\r\n\r\n\tconst cost = parseInt(foundItem.cost);\r\n\titemCostMap.set(key, cost);\r\n\treturn cost;\r\n}\r\n\r\nconst itemAvailabilityMap = new Map<string,string>();\r\nexport function getItemAvailability<T extends Item>(item: Item, allItems: Dictionary<T[]>): string {\r\n\tconst key = `${item.path}.${item.name}`;\r\n\tif (itemAvailabilityMap.has(key)) {\r\n\t\treturn itemAvailabilityMap.get(key)!;\r\n\t}\r\n\tconst items = allItems[item.path];\r\n\tconst foundItem = items.find(g => g.name === item.name);\r\n\tif (!foundItem) {\r\n\t\tthrow new Error(`Could not find item with name '${item.name}' in list '${JSON.stringify(items)}' under path '${item.path}'`);\r\n\t}\r\n\r\n\tconst availability = foundItem.availability;\r\n\titemAvailabilityMap.set(key, availability);\r\n\treturn availability;\r\n}\r\n\r\nexport function getNextParentPaths<T>(values: Dictionary<T>): Map<string,string> {\r\n\tconst parentPathToName = new Map<string,string>();\r\n\tconst paths = Object.keys(values).map(p => p.split(\".\"));\r\n\tlet componentIndex: number;\r\n\tif (paths.length > 1) {\r\n\t\tlet differenceFound = false;\r\n\t\tcomponentIndex = 0;\r\n\t\twhile (!differenceFound) {\r\n\t\t\tif (componentIndex >= paths[0].length) {\r\n\t\t\t\tthrow new Error(`Searched through all path components and found no differences`);\r\n\t\t\t}\r\n\t\t\tfor (let pathIndex = 1; pathIndex < paths.length; pathIndex++) {\r\n\t\t\t\tif (paths[0][componentIndex] !== paths[pathIndex][componentIndex]) {\r\n\t\t\t\t\tdifferenceFound = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcomponentIndex++;\r\n\t\t}\r\n\t} else if (paths.length === 1) {\r\n\t\t// there is only a single path so pick the last component\r\n\t\tcomponentIndex = paths[0].length - 1;\r\n\t} else {\r\n\t\tthrow new Error(`There are no paths`);\r\n\t}\r\n\tfor (const path of paths) {\r\n\t\tconst parentPath = path.slice(0, componentIndex).join(\".\");\r\n\t\tconst name = path[componentIndex - 1];\r\n\t\tparentPathToName.set(parentPath, sentenceCase(name));\r\n\t}\r\n\treturn parentPathToName;\r\n}\r\n\r\nexport function getChildNames<T>(values: Dictionary<T>, parentPath: string): string[] {\r\n\tconst childNames = new Set<string>();\r\n\tconst parents = parentPath.split(\".\");\r\n\tfor (const path of findChildPaths(values, parentPath)) {\r\n\t\tconst components = path.split(\".\");\r\n\t\tchildNames.add(components[parents.length]);\r\n\t}\r\n\treturn Array.from(childNames);\r\n}\r\n\r\nexport function getChildValues<T>(values: Dictionary<T[]>, parentPath: string): T[] {\r\n\tconst childValues: T[] = [];\r\n\tfor (const path of findChildPaths(values, parentPath)) {\r\n\t\tchildValues.push(...values[path]);\r\n\t}\r\n\treturn childValues;\r\n}\r\n\r\nexport function getChildSet<T>(values: Dictionary<T[]>, parentPath: string): Dictionary<T[]> {\r\n\tconst subset: Dictionary<T[]> = {};\r\n\tfor (const path of findChildPaths(values, parentPath)) {\r\n\t\tsubset[path] = values[path];\r\n\t}\r\n\treturn subset;\r\n}\r\n\r\nfunction findChildPaths<T>(values: Dictionary<T>, parentPath: string): string[] {\r\n\tconst childPaths: string[] = [];\r\n\tconst parents = parentPath.split(\".\");\r\n\tfor (const path of Object.keys(values)) {\r\n\t\tconst components = path.split(\".\");\r\n\t\tif (components.length < parents.length) {\r\n\t\t\tthrow new Error(`Child paths '${path}' must be longer than parent paths '${parentPath}'`);\r\n\t\t}\r\n\t\tlet match = true;\r\n\t\tfor (let i = 0; i < parents.length; i++) {\r\n\t\t\tif (parents[i] !== components[i]) {\r\n\t\t\t\tmatch = false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (match) {\r\n\t\t\tchildPaths.push(path);\r\n\t\t}\r\n\t}\r\n\treturn childPaths;\r\n}","import { CustomItem } from \"./custom-item\";\r\nimport { Item } from \"./item\";\r\nimport { Dictionary, transformAllItems, getItemCost } from \"./dictionary\";\r\nimport { Character } from \"./character\";\r\n\r\nexport type Quality = {\r\n    cost: string;\r\n} & Item;\r\n\r\nexport const qualitiesRoot = \"qualities\";\r\n\r\nexport function transformAllQualities(allData: any): Dictionary<Quality[]> {\r\n    const allQualities: Dictionary<Quality[]> = {};\r\n    transformAllItems(qualitiesRoot, allData, allQualities, transformQualityValues);\r\n    return allQualities;\r\n}\r\n\r\nfunction transformQualityValues(path: string, values: any[]): Quality[] {\r\n    const qualities: Quality[] = [];\r\n    for (const value of values) {\r\n        const name = value[\"Name\"];\r\n        const cost = value[\"Cost\"];\r\n        qualities.push({ path, name, cost });\r\n    }\r\n    return qualities;\r\n}\r\n\r\nexport type Qualities = {\r\n    positive: string[];\r\n    negative: string[]\r\n};\r\n\r\nexport type AllQualities = {\r\n    positive: CustomItem[];\r\n    negative: CustomItem[];\r\n}\r\n\r\nexport function getQualitiesCost(selectedQualities: string[], allQualities: CustomItem[]): number {\r\n    let cost = 0;\r\n    for (const selected of selectedQualities) {\r\n        const quality = allQualities.find(q => q.Name === selected);\r\n        if (!quality) {\r\n            throw new Error(`Could not find quality with name '${selected}' in list '${JSON.stringify(allQualities)}'`);\r\n        }\r\n        cost += parseInt(quality.Cost!);\r\n    }\r\n    return cost;\r\n}\r\n\r\nexport function getAllQualitiesCost(selectedQualities: { positive: string[], negative: string[] }, allQualities: AllQualities): number {\r\n    let cost = 0;\r\n    cost += getQualitiesCost(selectedQualities.positive, allQualities.positive);\r\n    cost += getQualitiesCost(selectedQualities.negative, allQualities.negative);\r\n    return cost;\r\n}\r\n\r\nexport function getCharacterQualitiesCost(character: Character, allQualities: Dictionary<Quality[]>): number {\r\n    let cost = 0;\r\n    for (const quality of character.qualities) {\r\n        cost += getItemCost(quality, allQualities);\r\n    }\r\n    return cost;\r\n}","import { Dictionary, transformAllItems, getItemCost, getItemAvailability } from \"./dictionary\";\r\nimport { Item } from \"./item\";\r\nimport { Character } from \"./character\";\r\n\r\nexport type Gear = {\r\n\tavailability: string;\r\n\tcost: string;\r\n\tcostLabel: string;\r\n} & Item;\r\n\r\nexport const gearRoot = \"gear\";\r\n\r\nexport function transformAllGear(allData: any): Dictionary<Gear[]> {\r\n\tconst allGear: Dictionary<Gear[]> = {};\r\n\ttransformAllItems(gearRoot, allData, allGear, transformGearValues);\r\n\treturn allGear;\r\n}\r\n\r\nfunction transformGearValues(path: string, values: any[]): Gear[] {\r\n\tconst items: Gear[] = [];\r\n\tfor (const item of values.map(v => transformGearItem(path, v))) {\r\n\t\t// gear with multiple versions need to be split into separate items\r\n\t\tif (/^([\\w-\\s]+)\\s+\\(([\\w-\\s]+(,\\s*)?)+\\)$/i.test(item.name)) {\r\n\t\t\titems.push(...splitGearItems(path, item));\r\n\t\t} else {\r\n\t\t\titems.push(item);\r\n\t\t}\r\n\t}\r\n\tfor (const item of items) {\r\n\t\tfinalizeGearItem(item);\r\n\t}\r\n\treturn items;\r\n}\r\n\r\nfunction transformGearItem(path: string, data: any): Gear {\r\n\tconst item: Gear = {\r\n\t\tpath,\r\n\t\tname: \"[NAME]\",\r\n\t\tavailability: \"[AVAILABILITY]\",\r\n\t\tcost: \"[COST]\",\r\n\t\tcostLabel: \"[COST]\"\r\n\t};\r\n\tfor (const propName of Object.keys(data)) {\r\n\t\tconst propValue = data[propName];\r\n\t\tif (propName === \"Name\") {\r\n\t\t\titem.name = propValue as string;\r\n\t\t} else if (propName === \"Availability\") {\r\n\t\t\titem.availability = propValue as string;\r\n\t\t} else if (propName === \"Cost\") {\r\n\t\t\titem.costLabel = propValue as string;\r\n\t\t} else {\r\n\t\t\t// assume a string (not that it actually matters)\r\n\t\t\titem[propName] = propValue as string;\r\n\t\t}\r\n\t}\r\n\treturn item;\r\n}\r\n\r\nfunction splitGearItems(path: string, item: Gear): Gear[] {\r\n\tconst itemVersions: Gear[] = [];\r\n\t/*\r\n\t\"Some Thingy (1, 2, 3)\" => [\r\n\t\t\"Some Thingy (A, B, C)\"\r\n\t\t\"Some Thingy\",\r\n\t\t\"A, B, C\"\r\n\t]\r\n\t*/\r\n\tconst groupResult = /^([\\w-\\s]+)\\s+\\(((?:(?:[\\w-\\s]+)(?:,\\s*)?)+)\\)$/i.exec(item.name);\r\n\tif (groupResult === null) {\r\n\t\tthrow new Error(`Gear item's name '${item.name}' does not contain multiple ratings`);\r\n\t}\r\n\tconst namePrefix = groupResult[1];\r\n\tconst nameSuffixes = groupResult[2].split(\",\").map(r => r.trim());\r\n\tconst itemCount = nameSuffixes.length;\r\n\tfor (let i = 0; i < itemCount; i++) {\r\n\t\tconst itemVersion: Gear = {\r\n\t\t\tpath,\r\n\t\t\tname: `${namePrefix} - ${nameSuffixes[i]}`,\r\n\t\t\tavailability: \"[AVAILABILITY]\",\r\n\t\t\tcost: \"[COST]\",\r\n\t\t\tcostLabel: \"[COST]\"\r\n\t\t};\r\n\t\tfor (const propName of Object.keys(item)) {\r\n\t\t\t// use lower-case names as this is the Gear object, not the raw object from the JSON file\r\n\t\t\tif (propName === \"name\") {\r\n\t\t\t\t// skip name - it is already set\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif (propName === \"cost\") {\r\n\t\t\t\t// skip cost - it is determined in the finalize step, after splitting\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// all other properties are strings\r\n\t\t\tconst propValue = item[propName] as string;\r\n\t\t\tconst splitValues = propValue.split(\",\").map(v => v.trim());\r\n\t\t\tif (splitValues.length === 1) {\r\n\t\t\t\t// same value for all versions\r\n\t\t\t\titemVersion[propName] = propValue;\r\n\t\t\t} else if (splitValues.length === itemCount) {\r\n\t\t\t\titemVersion[propName] = splitValues[i];\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error(`Properties should have a single value or the same amount as there are version names ${itemCount} - found ${splitValues.length}`);\r\n\t\t\t}\r\n\t\t}\r\n\t\titemVersions.push(itemVersion);\r\n\t}\r\n\treturn itemVersions;\r\n}\r\n\r\nfunction finalizeGearItem(item: Gear) {\r\n\t/*\r\n\t1000\r\n\t+500\r\n\tx2\r\n\t50 (per dose)\r\n\t*/\r\n\tconst costResult = /^(?:x|\\+)?(\\d+)\\s*(?:\\(([\\w\\s]+)\\))?$/i.exec(item.costLabel);\r\n\tif (costResult) {\r\n\t\titem.cost = costResult[1];\r\n\t\tif (isNaN(parseInt(item.cost))) {\r\n\t\t\tthrow new Error(`Gear item '${item.name}' has unsupported cost label '${item.costLabel}'`);\r\n\t\t}\r\n\t} else {\r\n\t\titem.cost = \"0\";\r\n\t}\r\n}\r\n\r\nexport function computeItemCost(item: Item, allGear: Dictionary<Item[]>): number {\r\n\tconst baseCost = getItemCost(item, allGear);\r\n\tlet multiplier = 1;\r\n\tif (item.grade !== undefined) {\r\n\t\tmultiplier *= getGradeCostMultipler(item.grade as Grade) \r\n\t\tmultiplier= getGradeCostMultipler(item.grade as Grade);\r\n\t}\r\n\tconst availability = getItemAvailability(item, allGear);\r\n\tif (availability !== undefined) {\r\n\t\tmultiplier *= getAvailabilityCostMultiplier(availability);\r\n\t}\r\n\treturn baseCost * multiplier;\r\n}\r\n\r\nexport function createSavedItem(path: string, item: Item): Item {\r\n\tconst { name, count, grade } = item;\r\n\tconst savedItem = { path, name, count, grade };\r\n\t// do not want to save optional properties\r\n\t// grade (used, alpha, beta, delta) only applies to augmentations\r\n\tif (grade === undefined) {\r\n\t\tdelete savedItem.grade;\r\n\t}\r\n\treturn savedItem;\r\n}\r\n\r\nexport enum Grade {\r\n\tUsed = \"Used\",\r\n\tAlpha = \"Alpha\",\r\n\tBeta = \"Beta\",\r\n\tDelta = \"Delta\"\r\n}\r\n\r\nexport function getGradeCostMultipler(grade: Grade = Grade.Alpha): number {\r\n\tswitch (grade) {\r\n\t\tcase Grade.Used:\r\n\t\t\treturn 0.5;\r\n\t\tcase Grade.Alpha:\r\n\t\t\treturn 1;\r\n\t\tcase Grade.Beta:\r\n\t\t\treturn 5;\r\n\t\tcase Grade.Delta:\r\n\t\t\treturn 15;\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown augmentation grade '${grade}'`);\r\n\t}\r\n}\r\n\r\nexport function isItemAvailable(availability: string): boolean {\r\n\tconst { rating, legality } = parseAvailability(availability);\r\n\tswitch (legality) {\r\n\t\tcase \"L\":\r\n\t\t\treturn rating <= (18 + 6);\r\n\t\tcase \"R\":\r\n\t\t\treturn rating <= (12 + 6);\r\n\t\tcase \"F\":\r\n\t\t\treturn rating <= (6 + 6);\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown availability legality '${legality}'`);\r\n\t}\r\n}\r\n\r\nexport function getAvailabilityCostMultiplier(availability: string): number {\r\n\tconst { rating, legality } = parseAvailability(availability);\r\n\r\n\tif (legality === \"F\") {\r\n\t\t// forbidden\r\n\t\tif (rating <= 6) {\r\n\t\t\treturn 1;\r\n\t\t} else if (rating <= 8) {\r\n\t\t\treturn 2;\r\n\t\t} else if (rating <= 10) {\r\n\t\t\treturn 5;\r\n\t\t} else if (rating <= 12) {\r\n\t\t\treturn 10;\r\n\t\t} else {\r\n\t\t\treturn Number.NaN;\r\n\t\t}\r\n\t} else if (legality === \"R\") {\r\n\t\t// restricted\r\n\t\tif (rating <= 12) {\r\n\t\t\treturn 1;\r\n\t\t} else if (rating <= 14) {\r\n\t\t\treturn 2;\r\n\t\t} else if (rating <= 16) {\r\n\t\t\treturn 5;\r\n\t\t} else if (rating <= 18) {\r\n\t\t\treturn 10;\r\n\t\t} else {\r\n\t\t\treturn Number.NaN;\r\n\t\t}\r\n\t} else {\r\n\t\t// legal\r\n\t\tif (rating <= 18) {\r\n\t\t\treturn 1;\r\n\t\t} else if (rating <= 20) {\r\n\t\t\treturn 2;\r\n\t\t} else if (rating <= 22) {\r\n\t\t\treturn 5;\r\n\t\t} else if (rating <= 24) {\r\n\t\t\treturn 10;\r\n\t\t} else {\r\n\t\t\treturn Number.NaN;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction parseAvailability(availability: string): { rating: number, legality: string } {\r\n\tif (availability === \"-\") {\r\n\t\treturn { rating: 1, legality: \"L\" };\r\n\t}\r\n\tconst result = /^\\+?(\\d+)(R|F)?$/i.exec(availability);\r\n\tif (!result) {\r\n\t\tconsole.error(`Unknown availability format '${availability}' - falling back to standard cost`);\r\n\t\treturn { rating: 1, legality: \"L\" };\r\n\t}\r\n\tconst rating = parseInt(result[1]);\r\n\tconst legality = result[2] || \"L\";\r\n\treturn { rating, legality };\r\n}\r\n\r\nexport function getGradeEssenseMultiplier(grade: Grade = Grade.Alpha): number {\r\n\tswitch (grade) {\r\n\t\tcase Grade.Used:\r\n\t\t\treturn 1.2;\r\n\t\tcase Grade.Alpha:\r\n\t\t\treturn 1;\r\n\t\tcase Grade.Beta:\r\n\t\t\treturn 0.7;\r\n\t\tcase Grade.Delta:\r\n\t\t\treturn 0.5;\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown augmentation grade '${grade}'`);\r\n\t}\r\n}\r\n\r\nexport function getCharacterGearNuyenCost(character: Character, allGear: Dictionary<Gear[]>): number {\r\n\tlet nuyen = 0;\r\n\tfor (const item of character.gear) {\r\n\t\tnuyen += computeItemCost(item, allGear) * parseInt(item.count);\r\n\t}\r\n\treturn nuyen;\r\n}\r\n\r\nexport function getCharacterGearKarmaCost(nuyen: number): number {\r\n\t// Nuyen is bought at a rate of 5 Karma for 10000¥\r\n\t// All unspent nuyen is lost so round up\r\n\treturn Math.ceil(nuyen / 10000) * 5;\r\n}","import { Character } from \"./character\";\r\nimport { getMetaTypeCost } from \"./meta-type\";\r\nimport { getAttributesCost } from \"./attributes\";\r\nimport { getSkillsCost } from \"./skills\";\r\nimport { getCharacterQualitiesCost } from \"./quality\";\r\nimport { State } from \"./state\";\r\nimport { getCharacterGearKarmaCost, getCharacterGearNuyenCost } from \"./gear\";\r\n\r\nexport type Karma = {\r\n    total: number;\r\n    spent: number;\r\n    available: number;\r\n};\r\n\r\nconst STARTING_KARMA = 500;\r\n\r\nexport function getDefaultKarma(): Karma {\r\n    return {\r\n        total: STARTING_KARMA,\r\n        spent: 0,\r\n        available: STARTING_KARMA\r\n    };\r\n}\r\n\r\nexport function getCharacterKarma(karma: Karma, character: Character, state: State): Karma {\r\n    const { total } = karma;\r\n    let spent = 0;\r\n    spent += getMetaTypeCost(character.metaType);\r\n    spent += getCharacterQualitiesCost(character, state.allQualities);\r\n    spent += getAttributesCost(character);\r\n    spent += getSkillsCost(character);\r\n    spent += getCharacterGearKarmaCost(getCharacterGearNuyenCost(character, state.allGear));\r\n    const available = total - spent;\r\n    return { total, spent, available };\r\n}","import { Reducer } from \"react\";\r\nimport { State } from \"./model/state\";\r\nimport { getDefaultCharacter, hasDefaultKey } from \"./data/default-character\";\r\nimport { Character, CharacterRef } from \"./model/character\";\r\nimport { saveCharacter, clearCharacter, loadCharacter, saveCustomItem } from \"./persistance\";\r\nimport { getDefaultKarma, getCharacterKarma } from \"./model/karma\";\r\nimport { Quality } from \"./model/quality\";\r\nimport { Skills } from \"./model/skills\";\r\nimport { CustomItem } from \"./model/custom-item\";\r\nimport { Spell } from \"./model/magic\";\r\nimport { Gear } from \"./model/gear\";\r\nimport { Dictionary } from \"./model/dictionary\";\r\n\r\nexport enum ActionType {\r\n    UpdateCharacter = \"updateCharacter\",\r\n    ImportCharacter = \"importCharacter\",\r\n    ClearCharacter = \"clearCharacter\",\r\n    SelectCharacter = \"selectCharacter\",\r\n    LoadQualities = \"loadQualities\",\r\n    LoadSkills = \"loadSkills\",\r\n    LoadContacts = \"loadContacts\",\r\n    LoadSpells = \"loadSpells\",\r\n    LoadGear = \"loadGear\",\r\n    LoadCustomItems = \"loadCustomItems\",\r\n    AddCustomItem = \"addCustomItem\"\r\n}\r\n\r\nexport type Action = {\r\n    type: ActionType;\r\n    data?: any;\r\n};\r\n\r\nexport type UpdateCharacterData = Character;\r\nexport type ImportCharacterData = Character;\r\nexport type SelectCharacterData = CharacterRef;\r\nexport type LoadQualitiesData = Dictionary<Quality[]>;\r\nexport type LoadSkillsData = Skills;\r\nexport type LoadContactsData = CustomItem[];\r\nexport type LoadSpellsData = Dictionary<Spell[]>;\r\nexport type LoadGearData = Dictionary<Gear[]>;\r\nexport type LoadCustomItemsData = Dictionary<CustomItem>;\r\nexport type AddCustomItemData = { path: string, item: CustomItem };\r\n\r\nexport const reducer: Reducer<State, Action> = (state: State, action: Action): State => {\r\n    switch (action.type) {\r\n        case ActionType.UpdateCharacter: {\r\n            const selectedCharacter = action.data as UpdateCharacterData;\r\n            const characters = handleCharacterUpdate(selectedCharacter, state);\r\n            const karma = getCharacterKarma(state.karma, selectedCharacter, state);\r\n            // the list of characters is not saved separatly - it is constructed from all the available characters\r\n            saveCharacter(selectedCharacter);\r\n            return { ...state, selectedCharacter, characters, karma };\r\n        }\r\n        case ActionType.ImportCharacter: {\r\n            const selectedCharacter = action.data as ImportCharacterData;\r\n            saveCharacter(selectedCharacter);\r\n            const characters = handleCharacterUpdate(selectedCharacter, state);\r\n            const karma = getCharacterKarma(state.karma, selectedCharacter, state)\r\n            return { ...state, selectedCharacter, characters, karma };\r\n        }\r\n        case ActionType.ClearCharacter: {\r\n            clearCharacter(state.selectedCharacter);\r\n            const characters = state.characters\r\n                .filter(c => c.key !== state.selectedCharacter.key)\r\n                .map(({ key, name, streetName }) => ({ key, name, streetName }));\r\n            return { ...state, characters, selectedCharacter: getDefaultCharacter(), karma: getDefaultKarma() };\r\n        }\r\n        case ActionType.SelectCharacter: {\r\n            const characterRef = action.data as SelectCharacterData;\r\n            // Loading the app with a saved character can throw an error calculating karma cost, as the available data (qualities, etc) have not been loaded yet\r\n            // saveSelectedCharacter(characterRef.key);\r\n            const selectedCharacter = loadCharacter(characterRef.key);\r\n            if (!selectedCharacter) {\r\n                throw new Error(`Could not find saved character ${JSON.stringify(characterRef)}`);\r\n            }\r\n            const karma = getCharacterKarma(state.karma, selectedCharacter, state);\r\n            return { ...state, selectedCharacter, karma};\r\n        }\r\n        case ActionType.LoadQualities: {\r\n            const allQualities = action.data as LoadQualitiesData;\r\n            return { ...state, allQualities };\r\n        }\r\n        case ActionType.LoadSkills: {\r\n            const allSkills = action.data as LoadSkillsData;\r\n            return { ...state, allSkills };\r\n        }\r\n        case ActionType.LoadContacts: {\r\n            const allContacts = action.data as LoadContactsData;\r\n            return { ...state, allContacts}\r\n        }\r\n        case ActionType.LoadGear: {\r\n            const allGear = action.data as LoadGearData;\r\n            return { ...state, allGear };\r\n        }\r\n        case ActionType.LoadSpells: {\r\n            const allSpells = action.data as LoadSpellsData;\r\n            return { ...state, allSpells };\r\n        }\r\n        case ActionType.LoadCustomItems: {\r\n            const customItems = action.data as LoadCustomItemsData;\r\n            return { ...state, customItems };\r\n        }\r\n        case ActionType.AddCustomItem: {\r\n            const newItem = action.data as AddCustomItemData;\r\n            // persist item in local storage for later\r\n            saveCustomItem(newItem.path, newItem.item);\r\n            const customItems = { ...state.customItems };\r\n            customItems[newItem.path] = newItem.item;\r\n            return { ...state, customItems };\r\n        }\r\n    }\r\n    return { ...state };\r\n}\r\n\r\nexport const INITIAL_STATE: State = {\r\n    characters: [],\r\n    selectedCharacter: getDefaultCharacter(),\r\n    karma: getDefaultKarma(),\r\n    allQualities: { positive: [], negative: [] },\r\n    allSkills: { active: [], knowledge: [], language: [] },\r\n    allContacts: [],\r\n    allSpells: { combat: [], detection: [], health: [], illusion: [], manipulation: [] },\r\n    allGear: {},\r\n    customItems: {},\r\n};\r\n\r\nfunction handleCharacterUpdate(character: Character, state: State): CharacterRef[] {\r\n    const characters = [...state.characters];\r\n    let index: number;\r\n    if (hasDefaultKey(character)) {\r\n        // character has not been saved yet\r\n        character.key = Date.now();\r\n        index = -1;\r\n    } else {\r\n        index = characters.findIndex(c => c.key === character.key);\r\n    }\r\n    const { key, name, streetName } = character;\r\n    if (index === -1) {\r\n        characters.push({ key, name, streetName });\r\n    } else {\r\n        characters[index] = { key, name, streetName };\r\n    }\r\n    return characters;\r\n}","import { createContext, Dispatch, useContext } from \"react\";\r\nimport { State } from \"./model/state\";\r\nimport { Action, INITIAL_STATE } from \"./reducer\";\r\n\r\nexport const DispatchContext = createContext<Dispatch<Action>>(() => {});\r\n\r\nexport const useDispatch = (): Dispatch<Action> => {\r\n    return useContext(DispatchContext);\r\n}\r\n\r\nexport const StateContext = createContext<State>(INITIAL_STATE);\r\n\r\nexport const useGlobalState = <K extends keyof State>(property: K) => {\r\n    const state = useContext(StateContext);\r\n    return state[property];\r\n}","import React, { FC } from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { CharacterRef } from \"../model/character\";\r\n\r\n\r\ntype Props = {\r\n    character: CharacterRef;\r\n};\r\n\r\nconst CharacterName: FC<Props> = (props: Props) => {\r\n    const { character } = props;\r\n    const { name, streetName } = character;\r\n    if (!name && !streetName) {\r\n        return <Typography>= New Character =</Typography>;\r\n    }\r\n    if (!streetName) {\r\n        return <Typography>{name}</Typography>\r\n    }\r\n    if (!name) {\r\n        return <Typography>{streetName}</Typography>\r\n    }\r\n    return <Typography>{name} aka {streetName}</Typography>\r\n};\r\n\r\nexport default CharacterName;","import React, { FC } from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\r\nimport { useGlobalState, useDispatch } from \"../context\";\r\nimport CharacterName from \"./CharacterName\";\r\nimport { CharacterRef } from \"../model/character\";\r\nimport { ActionType, SelectCharacterData } from \"../reducer\";\r\n\r\nconst SelectCharacter: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const characters = useGlobalState(\"characters\");\r\n\r\n    const onCharacterClick = (character: CharacterRef) => {\r\n        const data: SelectCharacterData = character;\r\n        dispatch({ type: ActionType.SelectCharacter, data });\r\n    };\r\n    return (\r\n        <List subheader={\r\n            <ListSubheader>Characters</ListSubheader>\r\n            }\r\n            >\r\n            {\r\n                characters.map(c => (\r\n                    <ListItem key={c.key} onClick={() => onCharacterClick(c)}>\r\n                        <CharacterName character={c} />\r\n                    </ListItem>\r\n                ))\r\n            }\r\n        </List>\r\n    )\r\n};\r\n\r\nexport default SelectCharacter;","import { MetaType } from \"../model/character\";\r\n\r\nexport const ALL_META_TYPES: MetaType[] = [\r\n    MetaType.Human,\r\n    MetaType.Ork,\r\n    MetaType.Dwarf,\r\n    MetaType.Elf,\r\n    MetaType.Troll\r\n];\r\n","import React, { FC } from \"react\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport { makeStyles, Badge } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n\troot: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"row\",\r\n\t\tflexWrap: \"wrap\",\r\n\t\tjustifyContent: \"flex-start\"\r\n\t},\r\n\tchip: {\r\n\t\tmarginRight: 10,\r\n\t\tmarginBottom: 10,\r\n\t}\r\n});\r\n\r\ntype Props = {\r\n\tvalues: any[];\r\n\tcreateChipLabel: (value: any) => string;\r\n\tonDeleteValue: (value: any) => void;\r\n};\r\nconst ChipCollection: FC<Props> = (props: Props) => {\r\n\tconst { values, createChipLabel, onDeleteValue } = props;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\treturn (\r\n\t\t<div className={classes.root}>\r\n\t\t\t{\r\n\t\t\t\tvalues.map(v =>\r\n\t\t\t\t\t<Badge key={v.name} badgeContent={v.count} invisible={v.count===\"1\"} color=\"secondary\" max={99} anchorOrigin={{ vertical: \"top\", horizontal: \"left\" }}>\r\n\t\t\t\t\t\t<Chip\r\n\t\t\t\t\t\t\tclassName={classes.chip}\r\n\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\tlabel={createChipLabel(v)}\r\n\t\t\t\t\t\t\tonDelete={() => onDeleteValue(v)}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Badge>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ChipCollection;","import { Dictionary } from \"./dictionary\";\r\n\r\nexport type Item = {\r\n\tpath: string;\r\n\tname: string;\r\n} & Dictionary<string>;\r\n\r\nexport function getItemSubset(items: Item[], parentPath: string): Item[] {\r\n\tconst subItems: Item[] = [];\r\n\tfor (const item of items) {\r\n\t\tif (item.path === parentPath || item.path.startsWith(`${parentPath}.`)) {\r\n\t\t\tsubItems.push(item);\r\n\t\t}\r\n\t}\r\n\treturn subItems;\r\n}","import React, { FC } from \"react\";\r\nimport { Grade } from \"../model/gear\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n\troot: {\r\n\t\tminWidth: 78,\r\n\t\tmaxWidth: 78,\r\n\t\twidth: 78,\r\n\t},\r\n})\r\ntype Props = {\r\n\tdisabled: boolean;\r\n\tgrade: Grade;\r\n\tonUpdateGrade: (newGrade: Grade) => void;\r\n};\r\nconst GradeButton: FC<Props> = (props: Props) => {\r\n\tconst { disabled, grade, onUpdateGrade } = props;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\treturn (\r\n\t\t<Button\r\n\t\t\tclassName={classes.root}\r\n\t\t\tdisabled={disabled}\r\n\t\t\tvariant=\"outlined\"\r\n\t\t\tonClick={() => onUpdateGrade(nextGrade(grade))}\r\n\t\t>\r\n\t\t\t{grade}\r\n\t\t</Button>\r\n\t);\r\n};\r\n\r\nexport default GradeButton;\r\n\r\nfunction nextGrade(grade: Grade): Grade {\r\n\tswitch (grade)\t {\r\n\t\tcase Grade.Used:\r\n\t\t\treturn Grade.Alpha;\r\n\t\tcase Grade.Alpha:\r\n\t\t\treturn Grade.Beta;\r\n\t\tcase Grade.Beta:\r\n\t\t\treturn Grade.Delta;\r\n\t\tcase Grade.Delta:\r\n\t\t\treturn Grade.Used;\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown augmentation grade '${grade}'`);\r\n\t}\r\n}","import React, { FC } from \"react\";\r\nimport { Item } from \"../model/item\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { Grade, gearRoot, isItemAvailable } from \"../model/gear\";\r\nimport GradeButton from \"./GradeButton\";\r\n\r\nconst useStyles = makeStyles({\r\n\troot: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"row\",\r\n\t\tpadding: 10,\r\n\t\tmargin: 10,\r\n\t},\r\n\tname: {\r\n\t\twidth: 500,\r\n\t\ttextAlign: \"left\",\r\n\t},\r\n\tavailability: {\r\n\t\twidth: 100,\r\n\t\ttextAlign: \"center\"\r\n\t},\r\n\tcost: {\r\n\t\twidth: 200,\r\n\t\ttextAlign: \"center\"\r\n\t},\r\n});\r\n\r\ntype Props = {\r\n\titem: Item;\r\n\tcreateCostLabel: (item: Item) => string;\r\n\tonUpdateItem: (newItem: Item) => void;\r\n};\r\nconst ItemPickerCard: FC<Props> = (props: Props) => {\r\n\tconst { item, createCostLabel, onUpdateItem } = props;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tconst count = parseInt(item.count);\r\n\tconst costLabel = createCostLabel(item);\r\n\r\n\tconst hasAny = count > 0;\r\n\r\n\tconst allowMultiple = item.path.startsWith(gearRoot);\r\n\tconst includeAvailability = item.path.startsWith(gearRoot);\r\n\tconst available = includeAvailability ? isItemAvailable(item.availability) : true;\r\n\tconst includeGrade = item.path.startsWith(`${gearRoot}.augmentations`);\r\n\r\n\tconst grade = item.grade as Grade || Grade.Alpha;\r\n\r\n\tconst handleAdd = () => {\r\n\t\tonUpdateItem({ ...item, count: (count + 1).toString() });\r\n\t};\r\n\r\n\tconst handleRemove = () => {\r\n\t\tonUpdateItem({ ...item, count: Math.max(count - 1, 0).toString() });\r\n\t};\r\n\r\n\tconst handleGradeToggle = (newGrade: Grade) => {\r\n\t\tconst newItem = { ...item, grade: newGrade };\r\n\t\t// alpha is the default for cyber/bio and we don't want to 'dirty' all gear items with unnecessary grade properties\r\n\t\t// if it is never toggled it will never get added in the first place, so do not need to consider grade in the add/remove handlers\r\n\t\tif (newGrade === Grade.Alpha) {\r\n\t\t\tdelete newItem.grade;\r\n\t\t}\r\n\t\tonUpdateItem(newItem);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Paper\r\n\t\t\tclassName={classes.root}\r\n\t\t\televation={3}\r\n\t\t>\r\n\t\t\t<Typography className={classes.name} style={{lineHeight: \"36px\"}}>{item.name}</Typography>\r\n\t\t\t{ includeAvailability ? <Typography className={classes.availability} style={{lineHeight: \"36px\"}}>{item.availability}</Typography> : null }\r\n\t\t\t<span className={classes.cost}>\r\n\t\t\t\t<Badge badgeContent={count} color=\"secondary\">\r\n\t\t\t\t\t<Typography style={{lineHeight: \"36px\"}}>({costLabel})</Typography>\r\n\t\t\t\t</Badge>\r\n\t\t\t</span>\r\n\t\t\t<ButtonGroup>\r\n\t\t\t\t{ allowMultiple || !hasAny ? <Button onClick={handleAdd} disabled={!available}><AddIcon /></Button> : null }\r\n\t\t\t\t{ allowMultiple || hasAny ? <Button onClick={handleRemove} disabled={!available}><RemoveIcon /></Button> : null }\r\n\t\t\t\t{ includeGrade ? <GradeButton disabled={count === 0} grade={grade} onUpdateGrade={handleGradeToggle} /> : null }\r\n\t\t\t</ButtonGroup>\r\n\t\t</Paper>\r\n\t);\r\n};\r\n\r\nexport default ItemPickerCard;","import React, { FC, Fragment } from \"react\";\r\nimport { Item } from \"../model/item\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport ItemPickerCard from \"./ItemPickerCard\";\r\n\r\nconst useStyles = makeStyles({\r\n\titems: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"column\",\r\n\t}\r\n});\r\n\r\ntype Props = {\r\n\tlabel: string;\r\n\titems: Item[];\r\n\tcreateCostLabel: (item: Item) => string;\r\n\tonUpdateItems: (newItems: Item[]) => void;\r\n};\r\nconst ItemPickerSection: FC<Props> = (props: Props) => {\r\n\tconst { items, createCostLabel, onUpdateItems } = props;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tconst handleUpdate = (item: Item) => {\r\n\t\tconst newItems = [...items];\r\n\t\tconst index = items.findIndex(i => i.name === item.name);\r\n\t\tnewItems[index] = item;\r\n\t\tonUpdateItems(newItems);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<Divider />\r\n\t\t\t<div className={classes.items}>\r\n\t\t\t\t{\r\n\t\t\t\t\titems\r\n\t\t\t\t\t?\r\n\t\t\t\t\titems.map(i =>\r\n\t\t\t\t\t\t<ItemPickerCard\r\n\t\t\t\t\t\t\titem={i}\r\n\t\t\t\t\t\t\tcreateCostLabel={createCostLabel}\r\n\t\t\t\t\t\t\tonUpdateItem={handleUpdate}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)\r\n\t\t\t\t\t:\r\n\t\t\t\t\t<div>No items</div>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default ItemPickerSection;","import React, { FC, useState, ChangeEvent } from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport { Item } from \"../model/item\";\r\nimport { Dictionary } from \"../model/dictionary\";\r\nimport { sentenceCase } from \"change-case\";\r\nimport ItemPickerSection from \"./ItemPickerSection\";\r\n\r\n\r\ntype Props = {\r\n\topen: boolean;\r\n\tonClose: () => void;\r\n\ttitle: string;\r\n\tallItems: Dictionary<Item[]>;\r\n\tcreateCostLabel: (item: Item) => string;\r\n\tonUpdateAllItems: (newItems: Dictionary<Item[]>) => void;\r\n};\r\nconst ItemPickerDialog: FC<Props> = (props: Props) => {\r\n\tconst { open, onClose, title, allItems, createCostLabel, onUpdateAllItems } = props;\r\n\r\n\tconst allPaths = Object.keys(allItems);\r\n\r\n\tconst paths = [...allPaths];\r\n\r\n\tconst pathToLabel = new Map<string,string>();\r\n\tfor (const path of paths) {\r\n\t\tconst components = path.split(\".\");\r\n\t\tconst finalComponent = components[components.length - 1];\r\n\t\tconst label = sentenceCase(finalComponent);\r\n\t\tpathToLabel.set(path, label);\r\n\t}\r\n\r\n\tconst [group, setGroup] = useState(paths[0]);\r\n\r\n\t// once the dialog is rendered the state is 'remembered' for next use which could be different data\r\n\tif (paths.find(p => p === group) === undefined) {\r\n\t\tsetGroup(paths[0]);\r\n\t}\r\n\r\n\tconst handleGroupChange = (event: ChangeEvent<any>) => {\r\n\t\tsetGroup(event.target.value);\r\n\t};\r\n\r\n\tconst handleUpdateItems = (subItems: Item[]) => {\r\n\t\tconst newAllItems: Dictionary<Item[]> = { ...allItems };\r\n\t\tnewAllItems[group] = subItems;\r\n\t\tonUpdateAllItems(newAllItems);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Dialog open={open} onClose={onClose}>\r\n\t\t\t<DialogTitle>{title}</DialogTitle>\r\n\t\t\t<DialogContent>\r\n\t\t\t\t{\r\n\t\t\t\t\tpaths.length > 1\r\n\t\t\t\t\t?\r\n\t\t\t\t\t<Select\r\n\t\t\t\t\t\tid=\"group\"\r\n\t\t\t\t\t\tvalue={group}\r\n\t\t\t\t\t\tdisplayEmpty\r\n\t\t\t\t\t\tonChange={handleGroupChange}\r\n\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpaths.map(p => (\r\n\t\t\t\t\t\t\t\t<MenuItem\r\n\t\t\t\t\t\t\t\t\tkey={p}\r\n\t\t\t\t\t\t\t\t\tvalue={p}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{pathToLabel.get(p)!}\r\n\t\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</Select>\r\n\t\t\t\t\t:\r\n\t\t\t\t\tnull\r\n\t\t\t\t}\r\n\t\t\t\t<ItemPickerSection\r\n\t\t\t\t\tlabel={pathToLabel.get(group)!}\r\n\t\t\t\t\titems={allItems[group]}\r\n\t\t\t\t\tcreateCostLabel={createCostLabel}\r\n\t\t\t\t\tonUpdateItems={handleUpdateItems}\r\n\t\t\t\t/>\r\n\t\t\t</DialogContent>\r\n\t\t</Dialog>\r\n\t);\r\n};\r\n\r\nexport default ItemPickerDialog;","import React, { FC, Fragment, useState } from \"react\";\r\nimport { Dictionary, getNextParentPaths } from \"../model/dictionary\";\r\nimport { Item, getItemSubset } from \"../model/item\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport ItemPickerDialog from \"./ItemPickerDialog\";\r\nimport { Menu, MenuItem } from \"@material-ui/core\";\r\nimport { createSavedItem } from \"../model/gear\";\r\nimport { getChildSet } from \"../model/dictionary\";\r\nimport { sentenceCase } from \"change-case\";\r\n\r\ntype Props = {\r\n\ttitle: string;\r\n\titems: Item[];\r\n\tallItems: Dictionary<Item[]>;\r\n\tcreateCostLabel: (item: Item) => string;\r\n\tonUpdateItems: (newItems: Item[]) => void;\r\n};\r\nconst ItemPickerButton: FC<Props> = (props: Props) => {\r\n\tconst { title, items, allItems, createCostLabel, onUpdateItems } = props;\r\n\r\n\tconst [open, setOpen] = useState(false);\r\n\tconst handleClose = () => setOpen(false);\r\n\r\n\tconst parentPathsToName = getNextParentPaths(allItems);\r\n\r\n\tconst parentPaths: string[] = [];\r\n\tfor (const parentPath of parentPathsToName.keys()) {\r\n\t\tparentPaths.push(parentPath);\r\n\t}\r\n\r\n\tconst [parentPath, setParentPath] = useState(parentPaths[0]);\r\n\r\n\tconst [menuAnchor, setMenuAnchor] = useState<HTMLButtonElement | null>(null);\r\n\r\n\tconst handleMenuClick = (parentPath: string) => {\r\n\t\tsetParentPath(parentPath);\r\n\t\tsetMenuAnchor(null);\r\n\t\tsetOpen(true);\r\n\t};\r\n\r\n\tconst allChildItems = getChildSet(allItems, parentPath);\r\n\r\n\tconst allCountedItems: Dictionary<Item[]> = {};\r\n\tlet hasItems = false;\r\n\tfor (const path of Object.keys(allChildItems)) {\r\n\t\thasItems = true;\r\n\t\tconst localItems = [...allChildItems[path]];\r\n\t\tconst matchingItems = getItemSubset(items, parentPath);\r\n\t\tfor (const localItem of localItems) {\r\n\t\t\tconst matchingItem = matchingItems.find(i => i.name === localItem.name);\r\n\t\t\tif (matchingItem) {\r\n\t\t\t\tlocalItem.count = matchingItem.count;\r\n\t\t\t\tlocalItem.grade = matchingItem.grade;\r\n\t\t\t} else {\r\n\t\t\t\tlocalItem.count = \"0\";\r\n\t\t\t}\r\n\t\t}\r\n\t\tallCountedItems[path] = localItems;\r\n\t}\r\n\r\n\tconst handleUpdateAllItems = (newCountedItems: Dictionary<Item[]>) => {\r\n\t\tconst newItems: Item[] = [...items];\r\n\r\n\t\tfor (const path of Object.keys(newCountedItems)) {\r\n\t\t\tfor (const localItem of newCountedItems[path]) {\r\n\t\t\t\tconst includeItem = parseInt(localItem.count) > 0;\r\n\t\t\t\tconst index = newItems.findIndex(i => i.path === path && i.name === localItem.name);\r\n\t\t\t\tif (index > -1) {\r\n\t\t\t\t\tif (includeItem) {\r\n\t\t\t\t\t\tnewItems[index] = createSavedItem(path, localItem);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnewItems.splice(index, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (includeItem) {\r\n\t\t\t\t\tnewItems.push(createSavedItem(path, localItem));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tonUpdateItems(newItems);\r\n\t};\r\n\t\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<IconButton\r\n\t\t\t\tonClick={event => setMenuAnchor(event.currentTarget)}\r\n\t\t\t\tcolor=\"secondary\"\r\n\t\t\t\tsize=\"medium\"\r\n\t\t\t\tdisableRipple\r\n\t\t\t>\r\n\t\t\t\t<EditIcon />\r\n\t\t\t</IconButton>\r\n\t\t\t<Menu\r\n\t\t\t\tanchorEl={menuAnchor}\r\n\t\t\t\topen={Boolean(menuAnchor)}\r\n\t\t\t\tonClose={() => setMenuAnchor(null)}\r\n\t\t\t>\r\n\t\t\t\t{\r\n\t\t\t\t\tparentPaths.map(p => (\r\n\t\t\t\t\t\t<MenuItem key={p} onClick={() => {handleMenuClick(p)}}>\r\n\t\t\t\t\t\t\t{sentenceCase(parentPathsToName.get(p)!)}\r\n\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t))\r\n\t\t\t\t}\r\n\t\t\t</Menu>\r\n\t\t\t{\r\n\t\t\t\thasItems\r\n\t\t\t\t?\r\n\t\t\t\t<ItemPickerDialog\r\n\t\t\t\t\topen={open}\r\n\t\t\t\t\tonClose={handleClose}\r\n\t\t\t\t\ttitle={`${title} - ${parentPathsToName.get(parentPath)!}`}\r\n\t\t\t\t\tallItems={allCountedItems}\r\n\t\t\t\t\tcreateCostLabel={createCostLabel}\r\n\t\t\t\t\tonUpdateAllItems={handleUpdateAllItems}\r\n\t\t\t\t/>\r\n\t\t\t\t:\r\n\t\t\t\tnull\r\n\t\t\t}\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default ItemPickerButton;","import React, { FC } from \"react\";\r\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\r\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\r\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { Dictionary } from \"../model/dictionary\";\r\nimport { Item } from \"../model/item\";\r\nimport ChipCollection from \"./ChipCollection\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport ItemPickerButton from \"./ItemPickerButton\";\r\nimport { computeItemCost } from \"../model/gear\";\r\n\r\nconst useStyles = makeStyles({\r\n    headerLabel: {\r\n        lineHeight: 3,\r\n        fontWeight: 700,\r\n    },\r\n});\r\n\r\n\r\ntype Props = {\r\n\tlabel: string;\r\n\titems: Item[];\r\n\tallItems: Dictionary<Item[]>;\r\n\tcreateItemLabel: (item: Item) => string;\r\n\tcreateItemCostLabel: (item: Item) => string;\r\n\tonUpdateItems: (newItems: Item[]) => void;\r\n};\r\nconst GroupContainer: FC<Props> = (props: Props) => {\r\n\tconst { label, items, allItems, createItemLabel, createItemCostLabel, onUpdateItems } = props;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tlet cost = 0;\r\n\tfor (const item of items) {\r\n\t\tcost += computeItemCost(item, allItems) * parseInt(item.count);\r\n\t}\r\n\r\n\tconst flatItems: Item[] = [];\r\n\tfor (const path of Object.keys(allItems)) {\r\n\t\tflatItems.push(...allItems[path]);\r\n\t}\r\n\r\n\tconst handleDelete = (toDelete: Item) => {\r\n\t\tconst newItems = [...items];\r\n\t\tconst index = newItems.findIndex(i => i.name === toDelete.name);\r\n\t\tif (index < 0) {\r\n\t\t\tthrow new Error(`Could not find item '${toDelete.name}' to delete in list '${JSON.stringify(newItems)}'`);\r\n\t\t}\r\n\t\tnewItems.splice(index, 1);\r\n\t\tonUpdateItems(newItems);\r\n\t};\r\n\r\n\tconst handleUpdateItems = (newItems: Item[]) => {\r\n\t\tonUpdateItems(newItems);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<ExpansionPanel defaultExpanded={false}>\r\n\t\t\t<ExpansionPanelSummary expandIcon={<ExpandMoreIcon />} >\r\n\t\t\t\t<FormControlLabel\r\n\t\t\t\t\tonClick={(event) => event.stopPropagation()}\r\n\t\t\t\t\tonFocus={(event) => event.stopPropagation()}\r\n\t\t\t\t\tcontrol={<ItemPickerButton\r\n\t\t\t\t\t\ttitle={label}\r\n\t\t\t\t\t\titems={items}\r\n\t\t\t\t\t\tallItems={allItems}\r\n\t\t\t\t\t\tcreateCostLabel={createItemCostLabel}\r\n\t\t\t\t\t\tonUpdateItems={handleUpdateItems}\r\n\t\t\t\t\t/>}\r\n\t\t\t\t\tlabel=\"\"\r\n\t\t\t\t/>\r\n\t\t\t\t<Typography className={classes.headerLabel}>{label} ({cost})</Typography>\r\n\t\t\t</ExpansionPanelSummary>\r\n\t\t\t<ExpansionPanelDetails>\r\n\t\t\t\t<ChipCollection\r\n\t\t\t\t\tvalues={items}\r\n\t\t\t\t\tcreateChipLabel={createItemLabel}\r\n\t\t\t\t\tonDeleteValue={handleDelete}\r\n\t\t\t\t/>\r\n\t\t\t</ExpansionPanelDetails>\r\n\t\t</ExpansionPanel>\r\n\t);\r\n};\r\n\r\nexport default GroupContainer;","import React, { FC } from \"react\";\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport { Item } from \"../model/item\";\r\nimport { getItemCost } from \"../model/dictionary\";\r\nimport GroupContainer from \"./GroupContainer\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\n\r\nconst QualitiesSection: FC = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst character = useGlobalState(\"selectedCharacter\");\r\n\tconst { qualities } = character;\r\n\tconst allQualities = useGlobalState(\"allQualities\");\r\n\r\n\tconst createQualityCostLabel = (item: Item) => {\r\n\t\tconst cost = getItemCost(item, allQualities);\r\n\t\tif (cost > 0) {\r\n\t\t\treturn `+${cost}`;\r\n\t\t} else {\r\n\t\t\treturn `${cost}`;\r\n\t\t}\r\n\t}\r\n\r\n\tconst createQualityLabel = (item: Item) => {\r\n\t\tconst { name } = item;\r\n\t\tconst costLabel = createQualityCostLabel(item);\r\n\t\treturn `${name} (${costLabel})`;\r\n\t};\r\n\r\n\tconst handleUpdateQualities = (newQualities: Item[]) => {\r\n\t\tconst data: UpdateCharacterData = { ...character, qualities: newQualities };\r\n\t\tdispatch({ type: ActionType.UpdateCharacter, data });\r\n\t};\r\n\r\n\treturn (\r\n\t\t<GroupContainer\r\n\t\t\tlabel=\"Qualities\"\r\n\t\t\titems={qualities}\r\n\t\t\tallItems={allQualities}\r\n\t\t\tcreateItemLabel={createQualityLabel}\r\n\t\t\tcreateItemCostLabel={createQualityCostLabel}\r\n\t\t\tonUpdateItems={handleUpdateQualities}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport default QualitiesSection;","import React, { FC, Fragment } from \"react\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport { Character as CharacterData, MetaType } from \"../model/character\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\nimport { ALL_META_TYPES } from \"../data/meta-types\";\r\nimport { getMetaTypeCost } from \"../model/meta-type\";\r\nimport QualitiesSection from \"./QualitiesSection\";\r\n\r\nconst useStyles = makeStyles({\r\n    header: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        marginLeft: 5,\r\n        marginRight: 5,\r\n        marginBottom: 10,\r\n    },\r\n    field: {\r\n        marginRight: 10,\r\n        marginTop: 20,\r\n    },\r\n    divider: {\r\n        margin: 5,\r\n    }\r\n});\r\n\r\nconst CharacterTab: FC = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const character = useGlobalState(\"selectedCharacter\");\r\n    const { name, streetName, metaType } = character;\r\n\r\n    const onCharacterUpdated = (updatedCharacter: CharacterData) => {\r\n        const data: UpdateCharacterData = updatedCharacter;\r\n        dispatch({ type: ActionType.UpdateCharacter, data });\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className={classes.header}>\r\n                <TextField id-=\"name\" label=\"Name\" value={name} onChange={e => onCharacterUpdated({ ...character, name: e.target.value})} className={classes.field} variant=\"outlined\" />\r\n                <TextField id-=\"street-name\" label=\"Street Name\" value={streetName} onChange={e => onCharacterUpdated({ ...character, streetName: e.target.value})} className={classes.field} variant=\"outlined\" />\r\n                <Select id=\"meta-type\" value={metaType} displayEmpty onChange={e => onCharacterUpdated({ ...character, metaType: e.target.value as MetaType})} className={classes.field} variant=\"outlined\">\r\n                    {ALL_META_TYPES.map(t => <MenuItem key={t} value={t}>{t} ({getMetaTypeCost(t)})</MenuItem>)}\r\n                </Select>\r\n            </div>\r\n            <QualitiesSection />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default CharacterTab;","import { Dictionary } from \"./dictionary\";\r\n\r\nexport type CustomItem = {\r\n    Name: string;\r\n    Availability?: string;\r\n    Cost?: string;\r\n};\r\n\r\nexport function getChildItems(customItems: Dictionary<CustomItem>, parentPath: string): CustomItem[] {\r\n\tconst items: CustomItem[] = [];\r\n\tfor (const path in customItems) {\r\n\t\tif (path.startsWith(parentPath)) {\r\n\t\t\titems.push(customItems[path]);\r\n\t\t}\r\n\t}\r\n\treturn items;\r\n}","import React, { FC, Fragment, useState } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { CustomItem } from \"../model/custom-item\";\r\n\r\nexport type SelectableItem = CustomItem & {\r\n\tselected: boolean;\r\n};\r\n\r\nconst useStyles = makeStyles(({\r\n\tcontent: {\r\n\t\twidth: \"100%\",\r\n\t},\r\n\theader: {\r\n\t\tdisplay: \"flex\",\r\n\t},\r\n\tname: {\r\n\t\tminWidth: 300,\r\n\t\tmaxWidth: 300,\r\n\t\ttextAlign: \"left\",\r\n\t},\r\n\tavailability: {\r\n\t\tminWidth: 100,\r\n\t\tmaxWidth: 100,\r\n\t\ttextAlign: \"center\",\r\n\t},\r\n\tcost: {\r\n\t\tminWidth: 100,\r\n\t\tmaxWidth: 100,\r\n\t\ttextAlign: \"right\",\r\n\t},\r\n\tul: {\r\n\t\tpadding: 0,\r\n\t},\r\n}));\r\n\r\ntype Props = {\r\n\topen: boolean;\r\n\tonClose: () => void;\r\n\ttitle: string;\r\n\titems: SelectableItem[];\r\n\tonItemSelectionChange: (item: SelectableItem) => void;\r\n\tincludeAvailability: boolean;\r\n\tincludeCost: boolean;\r\n\tallowNewItems: boolean;\r\n\tallowMultiSelection: boolean;\r\n};\r\nconst PickerDialog: FC<Props> = (props: Props) => {\r\n\tconst { open, onClose, title, items, onItemSelectionChange, includeAvailability, includeCost, allowNewItems, allowMultiSelection } = props;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tconst [newItemName, setNewItemName] = useState(\"\");\r\n\tconst [newItemAvailability, setNewItemAvailability] = useState(\"\");\r\n\tconst [newItemCost, setNewItemCost] = useState(\"\");\r\n\r\n\tconst onUpdateNewItem = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tconst value = event.target.value;\r\n\t\tswitch (event.target.id) {\r\n\t\t\tcase \"new-item-name\": {\r\n\t\t\t\tsetNewItemName(value);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase \"new-item-availability\": {\r\n\t\t\t\tsetNewItemAvailability(value);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase \"new-item-cost\": {\r\n\t\t\t\tsetNewItemCost(value);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tconst onCreateNewItem = () => {\r\n\t\tconst item: SelectableItem = { Name: newItemName, selected: true };\r\n\t\tif (includeAvailability) {\r\n\t\t\titem.Availability = newItemAvailability;\r\n\t\t}\r\n\t\tif (includeCost) {\r\n\t\t\titem.Cost = newItemCost;\r\n\t\t}\r\n\t\tonItemSelectionChange(item);\r\n\t\t// clear the new item fields after adding a new item (don't want fat-finger duplicates)\r\n\t\tsetNewItemName(\"\");\r\n\t\tsetNewItemAvailability(\"\");\r\n\t\tsetNewItemCost(\"\");\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Dialog open={open} onClose={onClose}>\r\n\t\t\t<DialogTitle>{title}</DialogTitle>\r\n\t\t\t<DialogContent className={classes.content}>\r\n\t\t\t\t<List>\r\n\t\t\t\t\t<ListItem key=\"header\" className={classes.header}>\r\n\t\t\t\t\t\t<Typography className={classes.name}>Name</Typography>\r\n\t\t\t\t\t\t{ includeAvailability ? <Typography className={classes.availability}>i.availability</Typography> : null }\r\n\t\t\t\t\t\t{ includeCost ? <Typography className={classes.cost}>Cost</Typography> : null }\r\n\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tallowNewItems ?\r\n\t\t\t\t\t\t<ListItem key=\"new-item\">\r\n\t\t\t\t\t\t\t<TextField id=\"new-item-name\" label=\"Custom\" value={newItemName} onChange={onUpdateNewItem} className={classes.name} variant=\"outlined\" />\r\n\t\t\t\t\t\t\t{ includeAvailability ? <TextField id=\"new-item-availability\" label=\"Availability\" value={newItemAvailability} onChange={onUpdateNewItem} className={classes.availability} variant=\"outlined\" /> : null }\r\n\t\t\t\t\t\t\t{ includeCost ? <TextField id=\"new-item-cost\" label=\"Cost\" value={newItemCost} onChange={onUpdateNewItem} className={classes.cost} variant=\"outlined\" /> : null }\r\n\t\t\t\t\t\t\t<IconButton aria-label=\"create\" onClick={onCreateNewItem} color=\"secondary\" size=\"small\">\r\n\t\t\t\t\t\t\t\t<AddIcon />\r\n\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\tnull\r\n\t\t\t\t\t}\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\titems.map(item => (\r\n\t\t\t\t\t\t\t<ListItem key={item.Name}>\r\n\t\t\t\t\t\t\t\t<ListItemText className={classes.name}>{item.Name}</ListItemText>\r\n\t\t\t\t\t\t\t\t{ includeAvailability ? <ListItemText className={classes.availability}>{item.Availability}</ListItemText> : null }\r\n\t\t\t\t\t\t\t\t{ includeCost ? <ListItemText className={classes.cost}>{item.Cost}</ListItemText> : null }\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tallowMultiSelection ?\r\n\t\t\t\t\t\t\t\t\t<Fragment>\r\n\t\t\t\t\t\t\t\t\t\t<IconButton aria-label=\"add\" onClick={() => onItemSelectionChange({ ...item, selected: true })} color=\"secondary\" size=\"small\">\r\n\t\t\t\t\t\t\t\t\t\t\t<AddIcon />\r\n\t\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t\t\t<IconButton aria-label=\"remove\" onClick={() => onItemSelectionChange({ ...item, selected: false })} disabled={!item.selected} color=\"secondary\" size=\"small\">\r\n\t\t\t\t\t\t\t\t\t\t\t<RemoveIcon />\r\n\t\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t\t</Fragment>\r\n\t\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t\t<IconButton aria-label={item.selected ? \"remove\" : \"add\"} onClick={() => onItemSelectionChange({ ...item, selected: !item.selected })} color=\"secondary\" size=\"small\">\r\n\t\t\t\t\t\t\t\t\t\t{ item.selected ? <RemoveIcon /> : <AddIcon /> }\r\n\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t\t))\r\n\t\t\t\t\t}\r\n\t\t\t\t</List>\r\n\t\t\t</DialogContent>\r\n\t\t</Dialog>\r\n\t);\r\n};\r\n\r\nexport default PickerDialog;","import React, { FC, Fragment, useState } from \"react\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PickerDialog, { SelectableItem } from \"./PickerDialog\";\r\n\r\nconst NAME_INDEX = 0;\r\nconst COST = \"Cost\";\r\nconst AVAILABILITY = \"Availability\";\r\n\r\nconst findName = (value: any): string => {\r\n\tconst nameProp = Object.keys(value)[NAME_INDEX];\r\n\tconst name = value[nameProp];\r\n\tif (name === undefined) {\r\n\t\tthrow new Error(`Could not find a name for value '${JSON.stringify(value)}'`);\r\n\t}\r\n\treturn name as string;\r\n};\r\n\r\nconst findCost = (value: any): string => {\r\n\tconst cost = value[COST];\r\n\tif (cost === undefined) {\r\n\t\t// throw new Error(`Could not find a cost for value '${JSON.stringify(value)}'`);\r\n\t\treturn \"0\";\r\n\t}\r\n\treturn cost;\r\n};\r\n\r\nconst findAvailability = (value: any): string => {\r\n\tconst availability = value[AVAILABILITY];\r\n\tif (availability === undefined) {\r\n\t\t// throw new Error(`Could not find an availability for value '${JSON.stringify(value)}'`);\r\n\t\treturn \"-\";\r\n\t}\r\n\treturn availability;\r\n};\r\n\r\nconst createSelectableItem = (value: any, selectedValueNames: string[], includeAvailability: boolean, includeCost: boolean): SelectableItem => {\r\n\tconst Name = findName(value);\r\n\tconst Availability = includeAvailability ? findAvailability(value) : undefined;\r\n\tconst Cost = includeCost ? findCost(value) : undefined;\r\n\tconst selected = selectedValueNames.find(n => n === Name) !== undefined;\r\n\treturn { Name, Cost, Availability, selected\t};\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n    editButton: {\r\n        paddingLeft: 10,\r\n    },\r\n});\r\n\r\ntype Props = {\r\n\tbreadcrums: string[];\r\n\tvalues: any[];\r\n\tselectedValueNames: string[];\r\n\taddValue: (name: string) => void;\r\n\tremoveValue: (name: string) => void;\r\n\tincludeAvailability?: boolean;\r\n\tincludeCost?: boolean;\r\n\tallowNewValues?: boolean;\r\n\tcreateValue?: (value: any) => void;\r\n\tallowMultiSelection?: boolean;\r\n};\r\nconst PickerButton: FC<Props> = (props: Props) => {\r\n\tconst { breadcrums, values, selectedValueNames, addValue, removeValue, includeAvailability=false, includeCost=false, allowNewValues: allowNewItems=false, createValue, allowMultiSelection=false } = props;\r\n\t\r\n\tconst classes = useStyles();\r\n\r\n\tconst [open, setOpen] = useState(false);\r\n\tconst onOpen = () => setOpen(true);\r\n\tconst onClose = () => setOpen(false);\r\n\r\n\tconst title = breadcrums.join(\" - \");\r\n\r\n\tconst items = values.map(v => createSelectableItem(v, selectedValueNames, includeAvailability, includeCost));\r\n\r\n\tconst onItemSelectionChange = (item: SelectableItem) => {\r\n\t\tconst { Name, Availability, Cost, selected } = item;\r\n\t\tif (selected) {\r\n\t\t\taddValue(Name);\r\n\t\t\tif (values.find(v => findName(v) === Name) === undefined) {\r\n\t\t\t\t// new item\r\n\t\t\t\tconst value = { Name, Availability, Cost };\r\n\t\t\t\tif (!createValue) {\r\n\t\t\t\t\tthrow new Error(`Attempting to create new item '${JSON.stringify(value)}' with no createValue prop`);\r\n\t\t\t\t}\r\n\t\t\t\tcreateValue(value);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tremoveValue(Name);\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<IconButton aria-label=\"add\" onClick={onOpen} color=\"secondary\" size=\"medium\" className={classes.editButton} disableRipple>\r\n\t\t\t\t<EditIcon />\r\n\t\t\t</IconButton>\r\n\t\t\t<PickerDialog\r\n\t\t\t\topen={open}\r\n\t\t\t\tonClose={onClose}\r\n\t\t\t\ttitle={title}\r\n\t\t\t\titems={items}\r\n\t\t\t\tonItemSelectionChange={onItemSelectionChange}\r\n\t\t\t\tincludeAvailability={includeAvailability}\r\n\t\t\t\tincludeCost={includeCost}\r\n\t\t\t\tallowNewItems={allowNewItems}\r\n\t\t\t\tallowMultiSelection={allowMultiSelection}\r\n\t\t\t/>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default PickerButton;","import React, { FC } from \"react\";\r\n\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { NamedProperty } from \"../model/character\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: \"flex\",\r\n        height: 50,\r\n    },\r\n    name: {\r\n        width: 200\r\n    },\r\n    slider: {\r\n        width: 300,\r\n        marginRight: 10,\r\n    },\r\n});\r\n\r\ntype Props = {\r\n    property: NamedProperty;\r\n    onUpdate: (property: NamedProperty) => void;\r\n    min: number;\r\n    max: number;\r\n    step: number;\r\n    formatDisplayValue: (rating: number) => string;\r\n    computeCost: (rating: number) => number;\r\n};\r\n\r\nconst Property: FC<Props> = (props: Props) => {\r\n    const { property, onUpdate, min, max, step, formatDisplayValue, computeCost } = props;\r\n    const { name, rating } = property;\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleChange = (e: React.ChangeEvent<any>, rating: number | number[]) => {\r\n        if (Array.isArray(rating)) {\r\n            throw new Error(`Property element '${e.target.id}' has an array of values instead of a single value: [${rating.join(\", \")}]`);\r\n        }\r\n        onUpdate({\r\n            name,\r\n            rating: rating\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Typography gutterBottom className={classes.name}>{name}</Typography>\r\n            <div className={classes.slider}>\r\n                <Slider\r\n                    step={step}\r\n                    min={min}\r\n                    max={max}\r\n                    value={rating}\r\n                    marks\r\n                    valueLabelDisplay=\"on\"\r\n                    onChange={handleChange}\r\n                    valueLabelFormat={(value: number, _index: number) => formatDisplayValue(value)}\r\n                />\r\n            </div>\r\n            <Typography gutterBottom>({computeCost(rating)})</Typography>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Property;","import React, { FC } from \"react\";\r\n\r\nimport { Skill as SkillData } from \"../model/character\";\r\nimport Property from \"./Property\";\r\n\r\ntype Props = {\r\n    skill: SkillData;\r\n\tonUpdate: (skill: SkillData) => void;\r\n\tcomputeCost: (rating: number) => number;\r\n};\r\n\r\nconst Skill: FC<Props> = (props: Props) => {\r\n    const { skill, onUpdate, computeCost } = props;\r\n\r\n    return (\r\n        <Property\r\n            property={skill}\r\n            onUpdate={onUpdate}\r\n            min={1}\r\n            max={5}\r\n            step={2}\r\n            formatDisplayValue={value => value.toString()}\r\n            computeCost={computeCost}\r\n            />\r\n    );\r\n}\r\n\r\nexport default Skill;","import React, { FC, Fragment } from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\r\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\r\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { Skill as SkillData } from \"../model/character\";\r\nimport { CustomItem, getChildItems } from \"../model/custom-item\";\r\nimport { AddCustomItemData, ActionType } from \"../reducer\";\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport PickerButton from \"./PickerButton\";\r\nimport Skill from \"./Skill\";\r\n\r\nconst useStyles = makeStyles({\r\n    header: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        marginBottom: 20,\r\n        paddingLeft: 16,\r\n        paddingTop: 12,\r\n    },\r\n    headerLabel: {\r\n        lineHeight: 3,\r\n        fontWeight: 700,\r\n    },\r\n});\r\n\r\ntype Props = {\r\n    breadcrums: string[];\r\n\tskills: SkillData[];\r\n\tallSkills: CustomItem[];\r\n    headerLabel: string;\r\n    computeSkillCost: (rating: number) => number;\r\n\tonSkillsUpdated: (updatedSkills: SkillData[]) => void;\r\n};\r\nconst SkillList: FC<Props> = (props: Props) => {\r\n\tconst { breadcrums, skills, allSkills, headerLabel, computeSkillCost, onSkillsUpdated } = props;\r\n\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const customItems = useGlobalState(\"customItems\");\r\n\r\n    skills.sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n    const parentPath = breadcrums.join(\".\");\r\n    allSkills.push(...getChildItems(customItems, parentPath));\r\n    allSkills.sort((a, b) => a.Name.localeCompare(b.Name));\r\n\r\n    const onSkillUpdate = (skill: SkillData) => {\r\n        const newSkills = [ ...skills ];\r\n        const skillIndex = skills.findIndex(s => s.name === skill.name);\r\n        if (skillIndex > -1) {\r\n            if (skill.rating > 0) {\r\n                newSkills[skillIndex] = skill;\r\n            } else {\r\n                newSkills.splice(skillIndex, 1);\r\n            }\r\n        } else if (skill.rating > 0) {\r\n            newSkills.push(skill);\r\n        }\r\n        onSkillsUpdated(newSkills);\r\n    };\r\n    \r\n    const addSkill = (name: string) => {\r\n        onSkillUpdate({ name, rating: 1 });\r\n    };\r\n\r\n    const removeSkill = (name: string) => {\r\n        onSkillUpdate({ name, rating: -1 });\r\n    };\r\n\r\n    const createNewSkill = (item: CustomItem) => {\r\n        const path = `${parentPath}.${item.Name}`;\r\n        const data: AddCustomItemData = { path, item: item };\r\n        dispatch({ type: ActionType.AddCustomItem, data });\r\n    };\r\n\r\n\treturn (\r\n        <Fragment>\r\n            <ExpansionPanel defaultExpanded={false}>\r\n                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\r\n                    <FormControlLabel\r\n                        onClick={(event) => event.stopPropagation()}\r\n                        onFocus={(event) => event.stopPropagation()}\r\n                        control={<PickerButton\r\n                            breadcrums={breadcrums}\r\n                            values={allSkills}\r\n                            selectedValueNames={skills.map(s => s.name)}\r\n                            addValue={addSkill}\r\n                            removeValue={removeSkill}\r\n                            allowNewValues\r\n                            createValue={createNewSkill}\r\n                        />}\r\n                        label=\"\"\r\n                    />\r\n                    <Typography className={classes.headerLabel}>{headerLabel}</Typography>\r\n                </ExpansionPanelSummary>\r\n                <ExpansionPanelDetails>\r\n                    <List>\r\n                    {\r\n                        skills.map(s => (\r\n                            <ListItem key={s.name}>\r\n                                <Skill skill={s} onUpdate={onSkillUpdate} computeCost={computeSkillCost} />\r\n                            </ListItem>\r\n                        ))\r\n                    }\r\n                    </List>\r\n                </ExpansionPanelDetails>\r\n            </ExpansionPanel>\r\n        </Fragment>\r\n\t);\r\n};\r\n\r\nexport default SkillList;","import React, { FC } from \"react\";\r\nimport { useDispatch, useGlobalState } from \"../context\"\r\nimport { Skill as SkillData } from \"../model/character\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\nimport { getActiveSkillsCost, getActiveSkillCost } from \"../model/skills\";\r\nimport SkillList from \"./SkillList\";\r\n\r\nconst breadcrums = [\"Skills\", \"Active\"];\r\n\r\nconst ActiveSkillList: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const character = useGlobalState(\"selectedCharacter\");\r\n    const allSkills = useGlobalState(\"allSkills\");\r\n\r\n    const { activeSkills } = character;\r\n\r\n    const activeSkillsCost = getActiveSkillsCost(activeSkills);\r\n    const headerLabel = `Active Skills (${activeSkillsCost})`;\r\n\r\n    const allActiveSkills = [...allSkills.active];\r\n\r\n    const onSkillsUpdated = (activeSkills: SkillData[]) => {\r\n        const data: UpdateCharacterData = { ...character, activeSkills };\r\n        dispatch({ type: ActionType.UpdateCharacter, data });\r\n    }\r\n    return (\r\n        <SkillList\r\n            breadcrums={breadcrums}\r\n            skills={activeSkills}\r\n            allSkills={allActiveSkills}\r\n            headerLabel={headerLabel}\r\n            computeSkillCost={getActiveSkillCost}\r\n            onSkillsUpdated={onSkillsUpdated}\r\n        />\r\n    );\r\n}\r\n\r\nexport default ActiveSkillList;","import React, { FC } from \"react\";\r\nimport { useDispatch, useGlobalState } from \"../context\"\r\nimport { Skill as SkillData } from \"../model/character\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\nimport { getKnowledgeSkillsCost, getFreeKnowledgeSkillPoints, getKnowledgeSkillCost } from \"../model/skills\";\r\nimport SkillList from \"./SkillList\";\r\n\r\nconst breadcrums = [\"Skills\", \"Knowledge\"];\r\n\r\nconst KnowledgeSkillList: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const character = useGlobalState(\"selectedCharacter\");\r\n\tconst allSkills = useGlobalState(\"allSkills\");\r\n\r\n\tconst { knowledgeSkills } = character;\r\n\r\n\tconst knowledgeSkillsCost = getKnowledgeSkillsCost(knowledgeSkills);\r\n    const freeKnowledgeSkillPoints = getFreeKnowledgeSkillPoints(character);\r\n    const totalCost = knowledgeSkillsCost - freeKnowledgeSkillPoints;\r\n    const headerLabel = `Knowledge Skills (${knowledgeSkillsCost} - ${freeKnowledgeSkillPoints} = ${totalCost})`;\r\n\r\n    const allKnowledgeSkills = [...allSkills.knowledge];\r\n\r\n    const onSkillsUpdated = (knowledgeSkills: SkillData[]) => {\r\n        const data: UpdateCharacterData = { ...character, knowledgeSkills };\r\n        dispatch({ type: ActionType.UpdateCharacter, data });\r\n    };\r\n\r\n    return (\r\n        <SkillList\r\n            breadcrums={breadcrums}\r\n            skills={knowledgeSkills}\r\n            allSkills={allKnowledgeSkills}\r\n            headerLabel={headerLabel}\r\n            computeSkillCost={getKnowledgeSkillCost}\r\n            onSkillsUpdated={onSkillsUpdated}\r\n        />\r\n    );\r\n}\r\n\r\nexport default KnowledgeSkillList;","import React, { FC } from \"react\";\r\nimport { useDispatch, useGlobalState } from \"../context\"\r\nimport { Skill as SkillData } from \"../model/character\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\nimport { getKnowledgeSkillsCost, getKnowledgeSkillCost } from \"../model/skills\";\r\nimport SkillList from \"./SkillList\";\r\n\r\nconst breadcrums = [\"Skills\", \"Language\"];\r\n\r\nconst LanguageSkillList: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const character = useGlobalState(\"selectedCharacter\");\r\n\tconst allSkills = useGlobalState(\"allSkills\");\r\n\r\n\tconst { languageSkills } = character;\r\n\r\n\tconst languageSkillsCost = getKnowledgeSkillsCost(languageSkills);\r\n    const headerLabel = `Language Skills (${languageSkillsCost}) + Native`;\r\n\r\n    const allLanguageSkills = [...allSkills.language];\r\n\r\n    const onSkillsUpdated = (languageSkills: SkillData[]) => {\r\n        const data: UpdateCharacterData = { ...character, languageSkills };\r\n        dispatch({ type: ActionType.UpdateCharacter, data });\r\n    };\r\n\r\n    return (\r\n        <SkillList\r\n            breadcrums={breadcrums}\r\n            skills={languageSkills}\r\n            allSkills={allLanguageSkills}\r\n            headerLabel={headerLabel}\r\n            computeSkillCost={getKnowledgeSkillCost}\r\n            onSkillsUpdated={onSkillsUpdated}\r\n        />\r\n    );\r\n}\r\n\r\nexport default LanguageSkillList;","import React, { FC, Fragment } from \"react\";\r\nimport ActiveSkillList from \"./ActiveSkillList\";\r\nimport KnowledgeSkillList from \"./KnowledgeSkillList\";\r\nimport LanguageSkillList from \"./LanguageSkillList\";\r\n\r\nconst SkillsTab: FC = () => {\r\n    return (\r\n        <Fragment>\r\n            <ActiveSkillList />\r\n            <KnowledgeSkillList />\r\n            <LanguageSkillList />\r\n        </Fragment>\r\n    )\r\n};\r\n\r\nexport default SkillsTab;","import React, { FC, Fragment } from \"react\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport ShoppingCartIcon from \"@material-ui/icons/ShoppingCart\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useGlobalState } from \"../context\";\r\n\r\nconst useStyles = makeStyles({\r\n    badge: {\r\n        marginLeft: 50,\r\n    },\r\n});\r\n\r\nconst Karma: FC = () => {\r\n    const classes = useStyles();\r\n    const karma = useGlobalState(\"karma\");\r\n    const { total, spent, available } = karma;\r\n    return (\r\n        <Fragment>\r\n            <Badge className={classes.badge} badgeContent={total} color=\"primary\" max={999} showZero>\r\n                <ShoppingCartIcon />\r\n            </Badge>\r\n            <Badge className={classes.badge} badgeContent={spent} color=\"secondary\" max={999} showZero>\r\n                <ShoppingCartIcon />\r\n            </Badge>\r\n            <Badge className={classes.badge} badgeContent={available} color=\"primary\" max={999} showZero>\r\n                <ShoppingCartIcon />\r\n            </Badge>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Karma;","import React, { FC } from \"react\";\r\n\r\nimport { Attribute as AttributeData, MetaType } from \"../model/character\";\r\nimport { getAttributeModifier, getAttributeCost } from \"../model/attributes\";\r\nimport Property from \"./Property\";\r\n\r\ntype Props = {\r\n    attribute: AttributeData;\r\n    metaType: MetaType;\r\n    onUpdate: (attribute: AttributeData) => void;\r\n};\r\n\r\nconst Attribute: FC<Props> = (props: Props) => {\r\n    const { attribute, metaType, onUpdate } = props;\r\n    const modifier = getAttributeModifier(metaType, attribute);\r\n\r\n    const formatDisplayValue = (rating: number): string => (rating + modifier).toString();\r\n\r\n    return (\r\n        <Property property={attribute} onUpdate={onUpdate} min={1} max={7} step={1} formatDisplayValue={formatDisplayValue} computeCost={getAttributeCost} />\r\n    );\r\n};\r\n\r\nexport default Attribute;","import React, { FC, Fragment } from \"react\";\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Attribute from \"./Attribute\";\r\nimport { Attribute as AttributeData, isAwakened } from \"../model/character\";\r\nimport { ActionType } from \"../reducer\";\r\nimport { getAttributesCost } from \"../model/attributes\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n    header: {\r\n        marginBottom: 20,\r\n        paddingLeft: 16,\r\n        paddingTop: 12,\r\n        fontWeight: 700,\r\n    }\r\n});\r\n\r\nconst AttributeList: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const character = useGlobalState(\"selectedCharacter\");\r\n    const classes = useStyles();\r\n\r\n    const { attributes, metaType } = character;\r\n\r\n    const filteredAttributes = attributes.filter(a => isAwakened(character) || a.name !== \"Magic\");\r\n\r\n    const attributesCost = getAttributesCost(character);\r\n\r\n    const onUpdate = (attribute: AttributeData) => {\r\n        const newAttributes = [ ...attributes ];\r\n        const attributeIndex = newAttributes.findIndex(a => a.name === attribute.name);\r\n        newAttributes[attributeIndex] = attribute;\r\n        dispatch({\r\n            type: ActionType.UpdateCharacter,\r\n            data: { ...character, attributes: newAttributes }\r\n        });\r\n    };\r\n    return (\r\n        <Fragment>\r\n            <Typography className={classes.header}>Attributes ({attributesCost})</Typography>\r\n            <List>\r\n                {\r\n                    filteredAttributes.map(a => (\r\n                        <ListItem key={a.name}>\r\n                            <Attribute attribute={a} metaType={metaType} onUpdate={onUpdate} />\r\n                        </ListItem>\r\n                    ))\r\n                }\r\n            </List>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default AttributeList;","import React, { FC } from \"react\";\r\nimport AttributeList from \"./AttributeList\";\r\n\r\nconst AttributesTab: FC = () => {\r\n\treturn (\r\n\t\t<AttributeList />\r\n\t);\r\n};\r\n\r\nexport default AttributesTab;","import { Character } from \"./character\";\r\n\r\nexport type Contact = {\r\n\tname: string;\r\n\tconnection: number;\r\n\tloyalty: number;\r\n};\r\n\r\nexport function getContactRatingCost(rating: number): number {\r\n\tswitch (rating) {\r\n\t\tcase 1:\r\n\t\t\treturn 2;\r\n\t\tcase 3:\r\n\t\t\treturn 7;\r\n\t\tcase 5:\r\n\t\t\treturn 15;\r\n\t\tdefault:\r\n\t\t\tthrow new Error();\r\n\t}\r\n}\r\n\r\nexport function getContactCost(contact: Contact): number {\r\n\tlet cost = 0;\r\n\tcost += getContactRatingCost(contact.connection);\r\n\tcost += getContactRatingCost(contact.loyalty);\r\n\treturn cost;\r\n}\r\n\r\nexport function getFreeContactPoints(character: Character): number {\r\n    const charisma = character.attributes.find(a => a.name === \"Charisma\");\r\n    if (charisma === undefined) {\r\n        throw new Error(`Character '${character.streetName}' has no attribute 'Charisma'`);\r\n    }\r\n    const willpower = character.attributes.find(a => a.name === \"Willpower\");\r\n    if (willpower === undefined) {\r\n        throw new Error(`Character '${character.streetName}' has no attribute 'Willpower'`);\r\n    }\r\n    return (charisma.rating + willpower.rating) * 10;\r\n}\r\n\r\nexport function getAllContactsCost(character: Character): number {\r\n\treturn character.contacts.map(c => getContactCost(c)).reduce((a, b) => a + b, 0);\r\n}","import React, { FC, Fragment } from \"react\";\r\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\r\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\r\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { Contact as ContactData, getContactCost, getContactRatingCost } from \"../model/contact\";\r\nimport Property from \"./Property\";\r\nimport { NamedProperty } from \"../model/character\";\r\n\r\nconst useStyles = makeStyles({\r\n\theaderLabel: {\r\n\t\tfontWeight: 700,\r\n\t},\r\n\tdetails: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"column\",\r\n\t},\r\n\trating: {\r\n\t\tmarginTop: 30,\r\n\t}\r\n});\r\n\r\ntype Props = {\r\n\tcontact: ContactData;\r\n\tonUpdate: (contact: ContactData) => void;\r\n};\r\nconst Contact: FC<Props> = (props: Props) => {\r\n\tconst { contact, onUpdate } = props;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tconst contactCost = getContactCost(contact);\r\n\r\n\tconst connection: NamedProperty = { name: \"Connection\", rating: contact.connection };\r\n\tconst onUpdateConnection = (updatedConnection: NamedProperty) => {\r\n\t\tconst updatedContact = { ...contact, connection: updatedConnection.rating };\r\n\t\tonUpdate(updatedContact);\r\n\t};\r\n\tconst loyalty: NamedProperty = { name: \"Loyalty\", rating: contact.loyalty };\r\n\tconst onUpdateLoyalty = (updatedLoyalty: NamedProperty) => {\r\n\t\tconst updatedContact = { ...contact, loyalty: updatedLoyalty.rating };\r\n\t\tonUpdate(updatedContact);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<ExpansionPanel defaultExpanded={false}>\r\n\t\t\t\t<ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\r\n\t\t\t\t\t<Typography className={classes.headerLabel}>{contact.name} ({contactCost})</Typography>\r\n\t\t\t\t</ExpansionPanelSummary>\r\n\t\t\t\t<ExpansionPanelDetails>\r\n\t\t\t\t\t<div className={classes.details}>\r\n\t\t\t\t\t\t<div className={classes.rating}>\r\n\t\t\t\t\t\t\t<Property\r\n\t\t\t\t\t\t\t\tproperty={connection}\r\n\t\t\t\t\t\t\t\tonUpdate={onUpdateConnection}\r\n\t\t\t\t\t\t\t\tmin={1}\r\n\t\t\t\t\t\t\t\tmax={3}\r\n\t\t\t\t\t\t\t\tstep={2}\r\n\t\t\t\t\t\t\t\tformatDisplayValue={(value => value.toString())}\r\n\t\t\t\t\t\t\t\tcomputeCost={getContactRatingCost}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className={classes.rating}>\r\n\t\t\t\t\t\t\t<Property\r\n\t\t\t\t\t\t\t\tproperty={loyalty}\r\n\t\t\t\t\t\t\t\tonUpdate={onUpdateLoyalty}\r\n\t\t\t\t\t\t\t\tmin={1}\r\n\t\t\t\t\t\t\t\tmax={5}\r\n\t\t\t\t\t\t\t\tstep={2}\r\n\t\t\t\t\t\t\t\tformatDisplayValue={(value => value.toString())}\r\n\t\t\t\t\t\t\t\tcomputeCost={getContactRatingCost}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</ExpansionPanelDetails>\r\n\t\t\t</ExpansionPanel>\r\n\t\t</Fragment>\r\n\t);\r\n}\r\n\r\nexport default Contact;","import React, { FC, Fragment } from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport PickerButton from \"./PickerButton\";\r\nimport Contact from \"./Contact\";\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport { Contact as ContactData, getAllContactsCost, getFreeContactPoints } from \"../model/contact\";\r\nimport { UpdateCharacterData, ActionType, AddCustomItemData } from \"../reducer\";\r\nimport { getChildItems, CustomItem } from \"../model/custom-item\";\r\n\r\nconst useStyles = makeStyles({\r\n\theader: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"row\",\r\n\t},\r\n\theaderLabel: {\r\n\t\tlineHeight: 3,\r\n\t\tfontWeight: 700,\r\n\t},\r\n});\r\n\r\nconst breadcrums = [\"Contacts\"];\r\nconst parentPath = breadcrums.join(\".\");\r\n\r\nconst ContactList: FC = () => {\r\n\tconst classes = useStyles();\r\n\tconst dispatch = useDispatch();\r\n\tconst character = useGlobalState(\"selectedCharacter\");\r\n\tconst allContacts = useGlobalState(\"allContacts\");\r\n\tconst customItems = useGlobalState(\"customItems\");\r\n\tconst { contacts: selectedContacts } = character;\r\n\r\n\tselectedContacts.sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n\tconst contactsCost = getAllContactsCost(character);\r\n\tconst freeContactPoints = getFreeContactPoints(character);\r\n    const totalCost = contactsCost - freeContactPoints;\r\n\tconst headerLabel = `Contacts (${contactsCost} - ${freeContactPoints} = ${totalCost})`;\r\n\t\r\n\tallContacts.push(...getChildItems(customItems, parentPath));\r\n    allContacts.sort((a, b) => a.Name.localeCompare(b.Name));\r\n\r\n\tconst onContactUpdate = (contact: ContactData) => {\r\n\t\tconst newContacts = [...selectedContacts];\r\n\t\tconst contactIndex = selectedContacts.findIndex(s => s.name === contact.name);\r\n\t\tif (contactIndex > -1) {\r\n\t\t\tif (contact.connection > 0 && contact.loyalty > 0) {\r\n\t\t\t\tnewContacts[contactIndex] = contact;\r\n\t\t\t} else {\r\n\t\t\t\tnewContacts.splice(contactIndex, 1);\r\n\t\t\t}\r\n\t\t} else if (contact.connection > 0 && contact.loyalty > 0) {\r\n\t\t\tnewContacts.push(contact);\r\n\t\t}\r\n\t\tconst data: UpdateCharacterData = { ...character, contacts: newContacts };\r\n\t\tdispatch({ type: ActionType.UpdateCharacter, data });\r\n\t};\r\n\r\n\tconst addContact = (name: string) => {\r\n\t\tonContactUpdate({ name, connection: 1, loyalty: 1 });\r\n\t};\r\n\r\n\tconst removeContact = (name: string) => {\r\n\t\tonContactUpdate({ name, connection: -1, loyalty: -1 });\r\n\t};\r\n\r\n\tconst createNewContact = (item: CustomItem) => {\r\n        const path = `${parentPath}.${item.Name}`;\r\n        const data: AddCustomItemData = { path, item: item };\r\n        dispatch({ type: ActionType.AddCustomItem, data });\r\n    };\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<div className={classes.header}>\r\n\t\t\t\t<PickerButton\r\n\t\t\t\t\tbreadcrums={breadcrums}\r\n\t\t\t\t\tvalues={allContacts}\r\n\t\t\t\t\tselectedValueNames={selectedContacts.map(s => s.name)}\r\n\t\t\t\t\taddValue={addContact}\r\n\t\t\t\t\tremoveValue={removeContact}\r\n\t\t\t\t\tallowNewValues\r\n\t\t\t\t\tcreateValue={createNewContact}\r\n\t\t\t\t/>\r\n\t\t\t\t<Typography className={classes.headerLabel}>{headerLabel}</Typography>\r\n\t\t\t</div>\r\n\t\t\t<List>\r\n\t\t\t\t{\r\n\t\t\t\t\tselectedContacts.map(c => (\r\n\t\t\t\t\t\t<Contact key={c.name} contact={c} onUpdate={onContactUpdate} />\r\n\t\t\t\t\t))\r\n\t\t\t\t}\r\n\t\t\t\t</List>\r\n\t\t</Fragment>\r\n\t);\r\n}\r\n\r\nexport default ContactList;","import React, { FC } from \"react\";\r\nimport ContactList from \"./ContactList\";\r\n\r\nconst ContactsTab: FC = () => {\r\n\treturn (\r\n\t\t<ContactList />\r\n\t);\r\n}\r\n\r\nexport default ContactsTab;","import React, { FC } from \"react\";\r\nimport { useGlobalState, useDispatch } from \"../context\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\nimport { Item } from \"../model/item\";\r\nimport GroupContainer from \"./GroupContainer\";\r\n\r\nconst MagicTab: FC = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst character = useGlobalState(\"selectedCharacter\");\r\n\tconst { spells } = character;\r\n\tconst allSpells = useGlobalState(\"allSpells\");\r\n\r\n\tconst createSpellCostLabel = (_item: Item) => {\r\n\t\treturn \"5\";\r\n\t};\r\n\r\n\tconst createSpellLabel = (item: Item) => {\r\n\t\tconst { name } = item;\r\n\t\treturn `${name} (5)`;\r\n\t};\r\n\r\n\tconst handleUpdateSpells = (newSpells: Item[]) => {\r\n\t\tconst data: UpdateCharacterData = { ...character, spells: newSpells };\r\n\t\tdispatch({ type: ActionType.UpdateCharacter, data });\r\n\t};\r\n\treturn (\r\n\t\t<GroupContainer\r\n\t\t\tlabel=\"Spells\"\r\n\t\t\titems={spells}\r\n\t\t\tallItems={allSpells}\r\n\t\t\tcreateItemLabel={createSpellLabel}\r\n\t\t\tcreateItemCostLabel={createSpellCostLabel}\r\n\t\t\tonUpdateItems={handleUpdateSpells}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport default MagicTab;","import React, { FC, Fragment } from \"react\";\r\nimport { useGlobalState, useDispatch } from \"../context\";\r\nimport { ActionType, UpdateCharacterData } from \"../reducer\";\r\nimport { getChildNames, getChildSet } from \"../model/dictionary\";\r\nimport GroupContainer from \"./GroupContainer\";\r\nimport { Item, getItemSubset } from \"../model/item\";\r\nimport { sentenceCase } from \"change-case\";\r\nimport { gearRoot, computeItemCost, Grade } from \"../model/gear\";\r\n\r\nconst GearTab: FC = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst character = useGlobalState(\"selectedCharacter\");\r\n\tconst { gear } = character;\r\n\tconst allGear = useGlobalState(\"allGear\");\r\n\r\n\tconst createGearCostLabel = (item: Item) => {\r\n\t\tconst cost = computeItemCost(item, allGear);\r\n\t\treturn `${cost}¥`;\r\n\t};\r\n\r\n\tconst createGearLabel= (item: Item) => {\r\n\t\tconst { name } = item;\r\n\t\tconst costLabel = createGearCostLabel(item);\r\n\t\tlet label = `${name} (${costLabel})`;\r\n\t\tconst includeGrade = item.path.startsWith(`${gearRoot}.augmentations`);\r\n\t\tif (includeGrade) {\r\n\t\t\tlabel += ` [${item.grade || Grade.Alpha}]`;\r\n\t\t}\r\n\t\treturn label;\r\n\t};\r\n\r\n\tconst handleUpdateGear = (name: string, newSubGear: Item[]) => {\r\n\t\tconst newGear = gear.filter(g => !g.path.startsWith(`${gearRoot}.${name}`));\r\n\t\tnewGear.push(...newSubGear);\r\n\t\tconst data: UpdateCharacterData = { ...character, gear: newGear };\r\n\t\tdispatch({ type: ActionType.UpdateCharacter, data });\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t{\r\n\t\t\t\tgetChildNames(allGear, gearRoot).map(name =>\r\n\t\t\t\t\t<GroupContainer\r\n\t\t\t\t\t\tkey={name}\r\n\t\t\t\t\t\tlabel={sentenceCase(name)}\r\n\t\t\t\t\t\titems={getItemSubset(gear, `${gearRoot}.${name}`)}\r\n\t\t\t\t\t\tallItems={getChildSet(allGear, `${gearRoot}.${name}`)}\r\n\t\t\t\t\t\tcreateItemLabel={createGearLabel}\r\n\t\t\t\t\t\tcreateItemCostLabel={createGearCostLabel}\r\n\t\t\t\t\t\tonUpdateItems={newItems => handleUpdateGear(name, newItems)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default GearTab;","import { Character } from \"./character\";\r\nimport { Item } from \"./item\";\r\nimport { Dictionary, transformAllItems } from \"./dictionary\";\r\n\r\nexport type Spell = {\r\n\tcost: string;\r\n} & Item;\r\n\r\nexport const spellsRoot = \"spells\";\r\n\r\nexport function transformAllSpells(allData: any): Dictionary<Spell[]> {\r\n\tconst allSpells: Dictionary<Spell[]> = {};\r\n\ttransformAllItems(spellsRoot, allData, allSpells, transformSpellValues);\r\n\treturn allSpells;\r\n}\r\n\r\nfunction transformSpellValues(path: string, values: any[]): Spell[] {\r\n\tconst spells: Spell[] = []\r\n\tfor (const value of values) {\r\n\t\tconst name = value[\"Name\"];\r\n\t\tspells.push({ path, name, cost: \"5\" });\r\n\t}\r\n\treturn spells;\r\n}\r\n\r\nexport function getSpellsCost(spells: Item[]): number {\r\n\treturn spells.length * 5;\r\n}\r\n\r\nexport function getCharacterSpellsCost(character: Character): number {\r\n\treturn getSpellsCost(character.spells);\r\n}","import React, { FC } from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n\troot: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"row\",\r\n\t\tmarginLeft: 10,\r\n\t\tmarginTop: 10,\r\n\t},\r\n\tname: {\r\n\t\tlineHeight: \"40px\"\r\n\t},\r\n\tvalue: {\r\n\t\tmarginLeft: 5,\r\n\t\tcolor: theme.palette.getContrastText(theme.palette.primary.main),\r\n\t\tbackgroundColor: theme.palette.primary.main,\r\n\t}\r\n}));\r\n\r\ntype Props = {\r\n\tname: string;\r\n\tvalue: number;\r\n}\r\nconst ReadOnlyProperty: FC<Props> = (props: Props) => {\r\n\tconst { name, value } = props;\r\n\r\n\tconst classes = useStyles();\r\n\r\n\treturn (\r\n\t\t<div className={classes.root}>\r\n\t\t\t<Typography className={classes.name}>{name}</Typography>\r\n\t\t\t<Avatar className={classes.value}>{value}</Avatar>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ReadOnlyProperty;","import React, { FC, Fragment } from \"react\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { useGlobalState } from \"../context\";\r\nimport { getEffectiveAttributeRating } from \"../model/attributes\";\r\nimport ReadOnlyProperty from \"./ReadOnlyProperty\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { MetaType } from \"../model/character\";\r\n\r\nconst useStyles = makeStyles({\r\n\theader: {\r\n\t\tmarginTop: 10,\r\n\t\tmarginLeft: 5,\r\n\t},\r\n\tsection: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"row\",\r\n\t\tmarginBottom: 10,\r\n\t},\r\n})\r\n\r\nconst CombatTab: FC = () => {\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tconst character = useGlobalState(\"selectedCharacter\");\r\n\r\n\tconst body = getEffectiveAttributeRating(character, \"Body\");\r\n\tconst agility = getEffectiveAttributeRating(character, \"Agility\");\r\n\tconst reaction = getEffectiveAttributeRating(character, \"Reaction\");\r\n\tconst intuition = getEffectiveAttributeRating(character, \"Intuition\");\r\n\tconst willpower = getEffectiveAttributeRating(character, \"Willpower\");\r\n\r\n\tconst athletics = character.activeSkills.find(s => s.name === \"Athletics\")?.rating || 0;\r\n\r\n\tconst initiative = reaction + intuition;\r\n\tconst initiativePasses = 1;\r\n\r\n\tconst physicalBoxes = 8 + Math.ceil(body / 2);\r\n\tconst stunBoxes = 8 + Math.ceil(willpower / 2);\r\n\r\n\tlet sneaking = agility;\r\n\tif (character.metaType !== MetaType.Dwarf) {\r\n\t\tsneaking += 1;\r\n\t}\r\n\r\n\tlet walking = sneaking + athletics;\r\n\tif (character.metaType !== MetaType.Dwarf) {\r\n\t\twalking += 2;\r\n\t}\r\n\r\n\tconst running = walking * 2;\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<Typography className={classes.header}>Initiative</Typography>\r\n\t\t\t<Divider />\r\n\t\t\t<div className={classes.section}>\r\n\t\t\t\t<ReadOnlyProperty name=\"Initiative\" value={initiative} />\r\n\t\t\t\t<ReadOnlyProperty name=\"Initiative Passes\" value={initiativePasses} />\r\n\t\t\t</div>\r\n\t\t\t<Typography className={classes.header}>Condition Monitor</Typography>\r\n\t\t\t<Divider />\r\n\t\t\t<div className={classes.section}>\r\n\t\t\t\t<ReadOnlyProperty name=\"Physical Boxes\" value={physicalBoxes} />\r\n\t\t\t\t<ReadOnlyProperty name=\"Stun Boxes\" value={stunBoxes} />\r\n\t\t\t</div>\r\n\t\t\t<Typography className={classes.header}>Movement</Typography>\r\n\t\t\t<Divider />\r\n\t\t\t<div className={classes.section}>\r\n\t\t\t\t<ReadOnlyProperty name=\"Sneaking\" value={sneaking} />\r\n\t\t\t\t<ReadOnlyProperty name=\"Walking\" value={walking} />\r\n\t\t\t\t<ReadOnlyProperty name=\"Running\" value={running} />\r\n\t\t\t</div>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default CombatTab;","import React, { FC } from \"react\";\r\nimport { Dialog, DialogContent, DialogActions, DialogContentText, Button } from \"@material-ui/core\";\r\n\r\ntype Props = {\r\n\topen: boolean;\r\n\tonChoice: (accept: boolean) => void;\r\n\tcontent: string;\r\n};\r\nconst ConfirmationDialog: FC<Props> = (props: Props) => {\r\n\tconst { open, onChoice, content } = props;\r\n\r\n\tconst handleYes = () => {\r\n\t\tonChoice(true);\r\n\t};\r\n\r\n\tconst handleNo = () => {\r\n\t\tonChoice(false);\r\n\t};\r\n\treturn (\r\n\t\t<Dialog\r\n\t\t\topen={open}\r\n\t\t\tonClose={handleNo}\r\n\t\t>\r\n\t\t\t<DialogContent>\r\n\t\t\t\t<DialogContentText>\r\n\t\t\t\t\t{content}\r\n\t\t\t\t</DialogContentText>\r\n\t\t\t</DialogContent>\r\n\t\t\t<DialogActions>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tonClick={handleYes}\r\n\t\t\t\t\tcolor=\"secondary\"\r\n\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t>\r\n\t\t\t\t\tYes\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tonClick={handleNo}\r\n\t\t\t\t\tcolor=\"secondary\"\r\n\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\tautoFocus\r\n\t\t\t\t>\r\n\t\t\t\t\tNo\r\n\t\t\t\t</Button>\r\n\t\t\t</DialogActions>\r\n\t\t</Dialog>\r\n\t);\r\n};\r\n\r\nexport default ConfirmationDialog;","import React, { FC } from \"react\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport GetAppIcon from \"@material-ui/icons/GetApp\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\ntype Props = {\r\n\tfilename: string;\r\n\tgenerateData: () => string;\r\n};\r\nconst ExportButton: FC<Props> = (props: Props) => {\r\n\tconst { filename, generateData } = props;\r\n\r\n\tconst handleClick = () => {\r\n\t\tconst data = generateData();\r\n\t\tconst element = document.createElement('a');\r\n\t\telement.setAttribute('href', 'data:application/json;charset=utf-8,' + encodeURIComponent(data));\r\n\t\telement.setAttribute('download', filename);\r\n\t\r\n\t\telement.style.display = 'none';\r\n\t\tdocument.body.appendChild(element);\r\n\t\r\n\t\telement.click();\r\n\t\r\n\t\tdocument.body.removeChild(element);\r\n\t};\r\n\treturn (\r\n\t\t<Tooltip title=\"Export Character\">\r\n\t\t\t<IconButton\r\n\t\t\t\tonClick={handleClick}\r\n\t\t\t\tcolor=\"secondary\"\r\n\t\t\t>\r\n\t\t\t\t<GetAppIcon />\r\n\t\t\t</IconButton>\r\n\t\t</Tooltip>\r\n\t);\r\n};\r\n\r\nexport default ExportButton;","import React, { Fragment, FC, ChangeEvent } from \"react\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport PublishIcon from \"@material-ui/icons/Publish\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\ntype Props = {\r\n\tsaveData: (data: string) => void;\r\n};\r\nconst ImportButton: FC<Props> = (props: Props) =>{\r\n\tconst { saveData } = props;\r\n\r\n\tconst handleFileChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n\t\tconst files = event.target.files;\r\n\t\tif (!files || files.length === 0) {\r\n\t\t\tconsole.log(`No files selected`);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst file = files[0];\r\n\t\tconst reader = new FileReader();\r\n\t\treader.onload = e => {\r\n\t\t\tif (!e.target) {\r\n\t\t\t\tthrow new Error(`Failed to load data from file '${file.name}'`);\r\n\t\t\t}\r\n\t\t\tconst data = e.target.result;\r\n\t\t\tif (!data) {\r\n\t\t\t\tthrow new Error(`File '${file.name}' has no data`);\r\n\t\t\t}\r\n\t\t\tsaveData(data as string);\r\n\t\t};\r\n\t\treader.readAsText(file);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<input\r\n\t\t\t\taccept=\"application/json\"\r\n\t\t\t\thidden\r\n\t\t\t\tid=\"import-file\"\r\n\t\t\t\ttype=\"file\"\r\n\t\t\t\tonChange={handleFileChange}\r\n\t\t\t/>\r\n\t\t\t<label htmlFor=\"import-file\">\r\n\t\t\t\t<Tooltip title=\"Import Character\">\r\n\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\tcolor=\"secondary\"\r\n\t\t\t\t\t\tcomponent=\"span\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<PublishIcon />\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t</Tooltip>\r\n\t\t\t</label> \r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default ImportButton;","import React, { FC, useState, useEffect } from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SelectCharacter from \"./SelectCharacter\";\r\nimport CharacterName from \"./CharacterName\";\r\nimport { useDispatch, useGlobalState } from \"../context\";\r\nimport { ActionType, LoadSkillsData, LoadContactsData, LoadQualitiesData, LoadSpellsData, LoadGearData, ImportCharacterData } from \"../reducer\";\r\nimport CharacterTab from \"./CharacterTab\";\r\nimport SkillsTab from \"./SkillsTab\";\r\nimport Karma from \"./Karma\";\r\nimport AttributesTab from \"./AttributesTab\";\r\nimport ContactsTab from \"./ContactsTab\";\r\nimport { isAwakened } from \"../model/character\";\r\nimport MagicTab from \"./MagicTab\";\r\nimport GearTab from \"./GearTab\";\r\nimport { transformAllGear, getCharacterGearNuyenCost, getCharacterGearKarmaCost } from \"../model/gear\";\r\nimport { getMetaTypeCost } from \"../model/meta-type\";\r\nimport { transformAllQualities, getCharacterQualitiesCost } from \"../model/quality\";\r\nimport { getAllContactsCost } from \"../model/contact\";\r\nimport { getCharacterSpellsCost, transformAllSpells } from \"../model/magic\";\r\nimport { getSkillsCost } from \"../model/skills\";\r\nimport { getAttributesCost } from \"../model/attributes\";\r\nimport CombatTab from \"./CombatTab\";\r\nimport ConfirmationDialog from \"./ConfirmationDialog\";\r\nimport ExportButton from \"./ExportButton\";\r\nimport ImportButton from \"./ImportButton\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nconst useStyles = makeStyles({\r\n    bar: {\r\n        flexGrow: 1,\r\n        display: \"flex\",\r\n    }\r\n});\r\n\r\nconst CharacterCreator: FC = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const selectedCharacter = useGlobalState(\"selectedCharacter\");\r\n    const allQualities = useGlobalState(\"allQualities\");\r\n    const allGear = useGlobalState(\"allGear\");\r\n\r\n    const [drawerOpen, setDrawerOpen] = useState(false);\r\n    const [selectedTab, setSelectedTab] = useState(0);\r\n\r\n    useEffect(() => {\r\n        fetch(\"data/qualities.json\")\r\n            .then(response => response.json())\r\n            .then(qualities => {\r\n                const data = transformAllQualities(qualities) as LoadQualitiesData;\r\n                dispatch({ type: ActionType.LoadQualities, data });\r\n            })\r\n            .catch(error => {\r\n                console.error(`Error occured loading qualities: ${error.message}\\n${error.stack}`);\r\n            });\r\n        fetch(\"data/skills.json\")\r\n            .then(response => response.json())\r\n            .then(skills => {\r\n                const data = skills as LoadSkillsData;\r\n                dispatch({ type: ActionType.LoadSkills, data });\r\n            })\r\n            .catch(error => {\r\n                console.error(`Error occured loading skills: ${error.message}\\n${error.stack}`);\r\n            });\r\n        fetch(\"data/contacts.json\")\r\n            .then(response => response.json())\r\n            .then(contacts => {\r\n                const data = contacts.all as LoadContactsData;\r\n                dispatch({ type: ActionType.LoadContacts, data });\r\n            })\r\n            .catch(error => {\r\n                console.error(`Error occured loading contacts: ${error.message}\\n${error.stack}`);\r\n            });\r\n        fetch(\"data/magic.json\")\r\n            .then(response => response.json())\r\n            .then(magic => {\r\n                const spellData = transformAllSpells(magic.spells) as LoadSpellsData;\r\n                dispatch({ type: ActionType.LoadSpells, data: spellData });\r\n            })\r\n            .catch(error => {\r\n                console.error(`Error occured loading magic: ${error.message}\\n${error.stack}`);\r\n            });\r\n        fetch(\"data/gear.json\")\r\n            .then(response => response.json())\r\n            .then(gear => {\r\n                const gearData = transformAllGear(gear) as LoadGearData;\r\n                dispatch({ type: ActionType.LoadGear, data: gearData });\r\n            })\r\n            .catch(error => {\r\n                console.error(`Error occured loading gear: ${error.message}\\n${error.stack}`);\r\n            });\r\n    }, [dispatch]);\r\n\r\n    const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\r\n\r\n    const handleDelete = () =>{\r\n        setShowDeleteConfirmation(true);\r\n    };\r\n\r\n    const handleDeleteChoice = (accept: boolean) => {\r\n        if (accept) {\r\n            dispatch({ type: ActionType.ClearCharacter });\r\n        }\r\n        setShowDeleteConfirmation(false);\r\n    };\r\n\r\n    const characterCost = getMetaTypeCost(selectedCharacter.metaType) + getCharacterQualitiesCost(selectedCharacter, allQualities);\r\n    const attributesCost = getAttributesCost(selectedCharacter);\r\n    const skillsCost = getSkillsCost(selectedCharacter);\r\n    const contactsCost = getAllContactsCost(selectedCharacter);\r\n    const magicCost = getCharacterSpellsCost(selectedCharacter);\r\n    const gearNuyenCost = getCharacterGearNuyenCost(selectedCharacter, allGear);\r\n    const getGearKarmaCost = getCharacterGearKarmaCost(gearNuyenCost);\r\n\r\n    let gearNuyenCostLabel: string;\r\n    if (gearNuyenCost < 1000) {\r\n        gearNuyenCostLabel = `${gearNuyenCost}¥`;\r\n    } else if (gearNuyenCost < 1000000) {\r\n        gearNuyenCostLabel = `${Math.round(gearNuyenCost / 100) / 10}K ¥`;\r\n    } else {\r\n        gearNuyenCostLabel = `${Math.round(gearNuyenCost / 100000) / 10}M ¥`;\r\n    }\r\n\r\n    const onTabChange = (_event: React.ChangeEvent<{}>, newValue: number) => {\r\n        setSelectedTab(newValue);\r\n    };\r\n\r\n    const awakened = isAwakened(selectedCharacter);\r\n\r\n    let selectedTabPanel: JSX.Element | null;\r\n    switch (selectedTab) {\r\n        case 0:\r\n            selectedTabPanel = <CharacterTab />;\r\n            break;\r\n        case 1:\r\n            selectedTabPanel = <AttributesTab />;\r\n            break;\r\n        case 2:\r\n            selectedTabPanel = <SkillsTab />;\r\n            break;\r\n        case 3:\r\n            selectedTabPanel = <ContactsTab />;\r\n            break;\r\n        case 4: {\r\n            selectedTabPanel = <GearTab />;\r\n            break;\r\n        }\r\n        case 5: {\r\n            selectedTabPanel = <MagicTab />;\r\n            break;\r\n        }\r\n        case 6: {\r\n            selectedTabPanel = <CombatTab />;\r\n            break;\r\n        }\r\n        default:\r\n            throw new Error(`Unknown tab index ${selectedTab}`);\r\n    }\r\n\r\n    const handleShowCharacters = () => {\r\n        setDrawerOpen(true);\r\n    }\r\n    const handleCloseCharacters = () => {\r\n        setDrawerOpen(false);\r\n    }\r\n\r\n    const saveCharacterData = (rawData: string) => {\r\n        const data: ImportCharacterData = JSON.parse(rawData);\r\n        dispatch({ type: ActionType.ImportCharacter, data });\r\n    };\r\n\r\n    const exportFileName = `${selectedCharacter.streetName}.json`;\r\n    const generateCharacterData = () => {\r\n        return JSON.stringify(selectedCharacter);\r\n    };\r\n    \r\n    return (\r\n        <div>\r\n            <AppBar position=\"sticky\" color=\"default\">\r\n                <Toolbar>\r\n                    <Tooltip title=\"Characters\">\r\n                        <IconButton edge=\"start\" onClick={handleShowCharacters} aria-label=\"characters\">\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <div className={classes.bar}>\r\n                        <CharacterName character={selectedCharacter} />\r\n                        <Karma />\r\n                    </div>\r\n                    <ImportButton saveData={saveCharacterData} />\r\n                    <ExportButton filename={exportFileName} generateData={generateCharacterData} />\r\n                    <IconButton aria-label=\"clear\" onClick={handleDelete} color=\"secondary\">\r\n                        <ClearIcon />\r\n                    </IconButton>\r\n                </Toolbar>\r\n                <Tabs value={selectedTab} onChange={onTabChange} variant=\"scrollable\">\r\n                    <Tab\r\n                        label={\r\n                            <Badge badgeContent={characterCost} color=\"default\" showZero max={999}>\r\n                                Character\r\n                            </Badge>\r\n                        }\r\n                    />\r\n                    <Tab\r\n                        label={\r\n                            <Badge badgeContent={attributesCost} color=\"default\" showZero max={999}>\r\n                                Attributes\r\n                            </Badge>\r\n                        }\r\n                    />\r\n                    <Tab\r\n                        label={\r\n                            <Badge badgeContent={skillsCost} color=\"default\" showZero max={999}>\r\n                                Skills\r\n                            </Badge>\r\n                        }\r\n                    />\r\n                    <Tab\r\n                        label={\r\n                            <Badge badgeContent={contactsCost} color=\"default\" showZero max={999}>\r\n                                Contacts\r\n                            </Badge>\r\n                        }\r\n                    />\r\n                    <Tab\r\n                        label={\r\n                            <Badge badgeContent={gearNuyenCostLabel} color=\"default\" showZero max={1000000} anchorOrigin={{ vertical: \"top\", horizontal: \"left\" }}>\r\n                                <Badge badgeContent={getGearKarmaCost} color=\"default\" showZero max={999} anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}>\r\n                                    Gear\r\n                                </Badge>\r\n                            </Badge>\r\n                        }\r\n                    />\r\n                    <Tab\r\n                        disabled={!awakened}\r\n                        label={\r\n                            <Badge badgeContent={magicCost} color=\"default\" showZero max={999}>\r\n                                Magic\r\n                            </Badge>\r\n                        }\r\n                    />\r\n                    <Tab label=\"Combat\" />\r\n                </Tabs>\r\n            </AppBar>\r\n            {\r\n                selectedTabPanel\r\n            }\r\n            <Drawer open={drawerOpen} onClose={handleCloseCharacters}>\r\n                <SelectCharacter />\r\n            </Drawer>\r\n            <ConfirmationDialog\r\n                open={showDeleteConfirmation}\r\n                onChoice={handleDeleteChoice}\r\n                content=\"Are you sure you want to delete this character? All data will be lost forever.\"\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CharacterCreator;","import React, { FC, useReducer } from \"react\";\r\nimport { DispatchContext, StateContext } from \"./context\";\r\nimport { reducer, INITIAL_STATE } from \"./reducer\";\r\nimport { State } from \"./model/state\";\r\nimport { loadCharacter, loadCharacters, loadSelectedCharacter } from \"./persistance\";\r\nimport CharacterCreator from \"./component/CharacterCreator\";\r\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        type: \"dark\"\r\n    }\r\n});\r\n\r\nconst App: FC = () => {\r\n    const [state, dispatch] = useReducer(reducer, INITIAL_STATE, (s: State): State => {\r\n        const characters = loadCharacters();\r\n        const selectedCharacterKey = loadSelectedCharacter();\r\n        let selectedCharacter = s.selectedCharacter;\r\n        if (selectedCharacterKey > -1) {\r\n            const selectedCharacterRef = characters.find(c => c.key === selectedCharacterKey);\r\n            if (selectedCharacterRef) {\r\n                const loadedCharacter = loadCharacter(selectedCharacterRef.key);\r\n                if (loadedCharacter) {\r\n                    selectedCharacter = loadedCharacter;\r\n                }\r\n            }\r\n        }\r\n        return { ...s, characters, selectedCharacter };\r\n    });\r\n\r\n    return (\r\n        <DispatchContext.Provider value={dispatch}>\r\n            <StateContext.Provider value={state}>\r\n                <ThemeProvider theme={theme}>\r\n                    <CssBaseline />\r\n                    <CharacterCreator />\r\n                </ThemeProvider>\r\n            </StateContext.Provider>\r\n        </DispatchContext.Provider>\r\n    );\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}